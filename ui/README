    c++ style conventions:
declaration order:
public, protected, private
methods, data, widgets

    Memory management:

Since multiple BlockViews can share a BlockModel, and multiple TrackViews (in
different BlockViews) can share a TrackModel:

BlockModel, EventTrackModel, and RulerTrackModel all implement a reference
counting scheme.  DividerTrackModel is too trivial to be shared.  Objects that
have subobjects of this kind call a decref method on them instead of deleting
them directly.

When you delete a model, it decrefs.  If there are views on the model, their
refs should keep it alive until they are destroyed.

Views hold shared_ptrs to models.  When all views to a model are destroyed
(views are destroyed explicitly), the model will be destroyed.  At that point,
the model's views pointers should be empty because each view removes itself
from the list in its destructor.

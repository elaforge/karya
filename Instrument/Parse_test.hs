module Instrument.Parse_test where
import qualified Text.ParserCombinators.Parsec as Parsec

import Util.Test
import qualified Midi.Midi as Midi
import qualified Derive.Score as Score
import qualified Perform.Midi.Instrument as Instrument
import qualified Instrument.Parse as Parse


test_parse_annotations = do
    let f = either (Left . show) (Right . map extract)
            .  Parsec.runParser Parse.p_annotation_file () "test"
        extract (inst, annots) = (Score.inst_name inst, annots)
    equal (f "s/1 there\n") $ Right [("s/1", [("there", "")])]
    equal (f "s/1\n") $ Right [("s/1", [])]
    equal (f "s/1 a=b c=d\n") $
        Right [("s/1", [("a", "b"), ("c", "d")])]
    equal (f "s/1 a=b c=d # comment\n") $
        Right [("s/1", [("a", "b"), ("c", "d")])]
    equal (f "# empty\n") $ Right []
    left_like (f "bad inst\n") "unexpected \" \""

test_parse_patch_file = do
    let parse f = extract f
            . Parsec.runParser Parse.p_patch_file Parse.empty_state "test"
        extract f = either (Left . show) (Right . map f)

    let e_init patch = case Instrument.patch_initialize patch of
            Instrument.InitializeMidi msgs ->
                [m | Midi.ChannelMessage _ m <- msgs]
            init -> error $ "unexpected init: " ++ show init
        e_tags = Instrument.patch_tags

    let cc = Midi.ControlChange
    equal (parse e_init patch_file) $ Right
        [ [cc 0 0, cc 32 0, Midi.ProgramChange 0]
        , [cc 0 0, cc 32 0, Midi.ProgramChange 1]
        , [cc 0 0, cc 32 1, Midi.ProgramChange 0]
        , [cc 0 0, cc 32 1, Midi.ProgramChange 1]
        ]
    equal (parse e_tags patch_file) $ Right $
        replicate 3 [("category", "boring")] ++ [[("category", "interesting")]]

    equal (parse e_tags "p1, tag\np2, tag2=b\n") $ Right
        [[("tag", "")], [("tag2", "b")]]
    left_like (parse e_tags "p0\np1, bad_tag=blah") "unexpected \"_\""
    left_like (parse e_tags "p, tag=") "unexpected end of input"

patch_file :: String
patch_file =
    "# some synth\n\
    \\n\
    \*bank 0\n\
    \Patch 1, category=boring\n\
    \Patch 2\n\
    \\n\
    \*bank 1\n\
    \Patch 1/0\n\
    \Patch 1/1, category=interesting\n"

test_parse_sysex = do
    let parse p s = case Parse.parse_sysex p "" s of
            Left err -> Left (show err)
            Right v -> Right v
    equal (parse s_parser sysex0) (Right [0, 0])

s_parser = do
    Parse.start_sysex 0x42
    bs <- Parse.to_eox
    Parse.end_sysex
    return bs

sysex0 = [0xf0, 0x42, 0, 0, 0xf7]

{-
sysex1 :: [Word.Word8]
sysex1 =
    [ 0xf0, 0x42, 0x30, 0x46, 0x40, 0x01, 0x00, 0x44, 0x61, 0x72, 0x6b, 0x20,
    0x46, 0x6f, 0x00, 0x72, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x00, 0x20,
    0x20, 0x01, 0x00, 0x12, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e,
    0x14, 0x3d, 0x00, 0x14, 0x34, 0x14, 0x35, 0x14, 0x00, 0x00, 0x00, 0x00,
    0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x09, 0x63,
    0x20, 0x48, 0x00, 0x48, 0x2b, 0x14, 0x2f, 0x00, 0x00, 0x54, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x14, 0x63, 0x14, 0x63,
    0x14, 0x63, 0x00, 0x14, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x20, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x54, 0x22, 0x00, 0x63, 0x26, 0x34, 0x2f, 0x00,
    0x14, 0x00, 0x40, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x0f, 0x47, 0x00, 0x0a,
    0x00, 0x00, 0x03, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x0b, 0x1a, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0x14, 0x13, 0x00, 0x34, 0x00, 0x00, 0x00, 0x17,
    0x63, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x02, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0c,
    0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x32, 0x00, 0x32,
    0x06, 0x00, 0x16, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x54, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x08, 0x02, 0x25, 0x01, 0x7c, 0x1a, 0x3f, 0x00, 0x00, 0x00,
    0x32, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x38, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x32, 0x32, 0x06,
    0x00, 0x16, 0x00, 0x0a, 0x00, 0x00, 0x03, 0x63, 0x01, 0x00, 0x40, 0x00,
    0x00, 0x2e, 0x07, 0x00, 0x04, 0x70, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b,
    0x00, 0x1c, 0x00, 0x04, 0x03, 0x04, 0x01, 0x04, 0x12, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x02, 0x00, 0x76, 0x00, 0x3c, 0x32, 0x32, 0x06, 0x00, 0x00,
    0x16, 0x0a, 0x00, 0x00, 0x02, 0x01, 0x00, 0x63, 0x63, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x63, 0x00, 0x00, 0x4b, 0x02, 0x13,
    0x66, 0x5c, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x32, 0x01, 0x63, 0x2c, 0x00, 0x3c, 0x3c, 0x00, 0x1f, 0x02,
    0x63, 0x08, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x1e, 0x63, 0x00, 0x63,
    0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x63,
    0x31, 0x3c, 0x00, 0x3c, 0x00, 0x1f, 0x02, 0x63, 0x08, 0x00, 0x00, 0x00,
    0x00, 0x23, 0x17, 0x14, 0x63, 0x63, 0x00, 0x3c, 0x3c, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x3c, 0x3c, 0x00, 0x00, 0x08, 0x05,
    0x00, 0x17, 0x71, 0x63, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x26, 0x56, 0x14, 0x63, 0x14, 0x5f, 0x2b, 0x00, 0x00,
    0x00, 0x00, 0x2d, 0x00, 0x00, 0x0f, 0x01, 0x6d, 0x00, 0x00, 0x00, 0x40,
    0x08, 0x3d, 0x00, 0x7f, 0x64, 0x00, 0x00, 0x06, 0x6e, 0x00, 0x00, 0x19,
    0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x04, 0x00,
    0x00, 0x16, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x1e, 0x3c, 0x14, 0x0f, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x02, 0x01,
    0x5a, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00,
    0x32, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x64, 0x02, 0x00, 0x56, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x64,
    0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x08, 0x00, 0x64, 0x00, 0x57, 0x32,
    0x64, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x64, 0x20, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x54, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x64,
    0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00, 0x01, 0x60,
    0x00, 0x32, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x00, 0x64, 0x00, 0xf7
    ]
-}


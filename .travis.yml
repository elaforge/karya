# vim: set sw=2:

language: generic
sudo: false # use container

git: {depth: 3}

branches: {only: [master, work, travis]}

cache:
  directories:
    - $HOME/.cabal
    - $HOME/.ghc

before_cache:
  - rm -rf $HOME/.cabal/logs
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/0[01]-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx
  - rm -rfv $HOME/.cabal/packages/head.hackage

# apt from ubuntu trusty
# Search at https://packages.ubuntu.com/
# Be sure to select "trusty".
#
# GHC packages are documented at https://github.com/haskell-CI/haskell-ci
matrix:
  include:
    - env: GHC=8.0.2
      addons:
        apt:
          packages:
            # Keep the first paragraph the same for each entry.
            # TODO is there same way to do this without copy paste?
            - alex-3.1.7
            - happy-1.19.5
            - cabal-install-2.0
            - ghc-ppa-tools
            - libfltk1.3-dev
            - libjack-dev
            - libpcre3-dev
            - libsamplerate0-dev
            - libsndfile1-dev
            - zsh

            - ghc-8.0.2 # -prof
          sources: [hvr-ghc]
    - env: GHC=8.4.1
      addons:
        apt:
          packages:
            - alex-3.1.7
            - happy-1.19.5
            - cabal-install-2.0
            - ghc-ppa-tools
            - libfltk1.3-dev
            - libjack-dev
            - libpcre3-dev
            - libsamplerate0-dev
            - libsndfile1-dev
            - zsh

            - ghc-8.4.1 # -prof
          sources: [hvr-ghc]

before_install:
  - export PATH="/opt/ghc/bin:/opt/cabal/2.0/bin:$HOME/.cabal/bin:$PATH"
  # happy and alex are needed by c2hs
  - export PATH="/opt/alex/3.1.7/bin:/opt/happy/1.19.5/bin:$PATH"
  # tools/ncpus gives 16, but
  # https://docs.travis-ci.com/user/reference/overview/ says 2 cores.
  - export cpus=2 latest_ghc=8.4.1

install:
  - ghc-pkg list
  - cp data/all-deps.cabal karya.cabal
  - cp data/cabal.config.all-deps cabal.config
  - travis_retry cabal update
  - if which hsc2hs && which c2hs && which cpphs; then echo ok;
    else travis_retry cabal install -j$cpus hsc2hs c2hs cpphs;
    fi
  # mk typecheck needs this even though it's not in the .cabal
  # TODO Ugh.  I should switch to gauge and get rid of this hack.
  - travis_retry cabal install -j$cpus criterion

  - travis_retry cabal install --only-dependencies -j$cpus

# The fltk provided by the trusty package has --ldflags:
# -Wl,-Bsymbolic-functions -lfltk -lX11
#
# I'm not sure what that is, but it causes warnings when compiling.  They seem
# to be harmless.

script:
  - export CPUS=$cpus # override tools/ncpus
  - tools/setup-elaforge # create Local/*.hs
  - bin/mkmk
  - bin/mk typecheck-ci

  # Run "tests-normal" instead of "tests".
  # "tests" includes the memory leak stuff, which requires profiling libs
  # and a whole separate build with optimization.  I can get the former
  # with ghc-8.4.1-prof apt package, but I can't get around the parallel
  # build.
  # - bin/mk tests-normal

  # Run tests, but print output to stdout too.  This is so travis doesn't
  # think I wedged, and so if I did wedge, I can see where.
  - bin/mk build/test/RunTests
  - build/test/RunTests --noninteractive '^normal-' | tee build/test/output
      | grep '^===>'
  - test/check_output build/test/output

  # I need to get all-deps working for this.
  # - |
  #   if [ "$GHC" = "$latest_ghc" ]; then
  #     bin/mk haddock
  #   fi

# after_success: upload timing info?

# TODO also test with enableIm=True and all-deps.cabal

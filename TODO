big things
  - record chords
  - record continuum
  - compact signals in tracks
  - complete TunedJust
  - complete Idiom.Wind

UNSORTED
  - copy emmentaler font from work
  * trill note call should emit separate notes
  - revive Derive.Call.Sekar
  - shakefile: put compile defines (midi driver, hint) in a config.h file
  - shakefile: can I print [# of #] when compiling?
  * remove config_ prefix from StaticConfig
  * implement hot plugging: snd arg to create client
  - de-globalize MidiClientRef?
  * make Midi.Interface with the interface midi driver modules have to
    implement
  * port core midi to new midi interface
  * make sure unknown devices get warned about
  * connect and disconnect read devices from the repl
    add Midi.Interface to Cmd.State
  * Interface.driver :: String just for the Show instance?
  * add wdev map to Ui.State
  use jack midi
    - ReadDevice and WriteDevice should use ByteString

    I want to set up as a jack server: send midi
    - compile jack midi_dump.c to make sure it works

    - use jack_midi_event_t instead of midi_message and timestamp?  I do want
      to be able to send sysexs.
    - figure out how to append and remove from the ports list
    - Get the basic jack functions wrapped so I can compile and experiment in
      haskell.
    - port test_core_midi to be a generice test_midi

  - instead of using velocity in various ornaments, I should probably use p
    e.g. mordent should also work for wind patches

  abstract pitches
    re-implement Cmd.Lang.LPitch.to_relative:
      - Extract calls from track: parse each event and pull Calls from the
        Expr.
      - Get the environ of the block from the last derivation.
      - Eval all the calls in the environ, select all the VPitch returning
        ones.
      - Get the scale from the environ, and call a new function
        'chromatic_diff :: NoteNumber -> NoteNumber -> Chromatic'.
      - Replace the VPitch returning calls with the result of the diff.  This
        means the parser has to keep track of the text ranges that produced
        each expression.
    - implement labels for pitch tracks in fltk/EventTrack.cc
    diatonic transposition
      - support input key and enharmonics
      - add flip enharmonic cmd
      - default key should be chromatic, which makes diatonic transpositions
        chromatic
      - support for non-circle-of-fifths key signatures (e.g. sharps and flats
        in arbitrary places)
        Key: sharps and flats per degree, then derive the intervals from that
      - support scales that are different ascending vs. descending

  the problem with rambat tick
    I need a general way to manipulate notes and know their pitch, dynamics,
    etc.  There are a lot of ways to do this:

    Note transformers - Already implemented.  This can manipulate notes at
    a high level, such as transposition, duplication, shift/stretch, but
    can't inspect them.  It also has to run in the track above the notes it
    wants to transform.

    Preprocessing for TrackEvents - Not sure what this would look like, but
    it would rewrite bits of score.  It could do symbolic manipulation and
    e.g.  transposition would transpose pitches symbolically.  I think it
    would be hard to do anything other than very simple things, because even
    to know the scale I have to do some deriving.

    Postprocessing events - This works at the RealTime and can inspect other
    notes, but it can only do RealTime transformations on them.  For that
    reason, it's probably best for inserting new notes.  Unfortunately, it
    has to be a transformer which means it can't really be used to insert
    a note.  However, maybe I could have a system similar to the old
    "directive" notion: calls can emit a special 'Directive [Val]' which
    a postproc pass can then fill in.  I think it would work, but only as
    a last resort.

  - pitch bend range on patchman and some of the z1 patches looks off, verify

  complete quickcheck derive testing
    I switched back to Double for RealTime, but this means the roundoff errors
    are back.  Use quickcheck to repro them.
    * make Arbitrary for BlockSpecs
    + make a simple deriver that creates event and midi output skeletons
    - integrate quickcheck with generate_run_tests.py
    - assert that the reduced deriver output equals the simple deriver output
    - basic pitches: If the score was created with notes aligned to note
      starts, then every NoteOn should have the appropriate key, there should
      be no pitch bends, and "same note" should be the only reason for
      a channel split
    - basic controls: Given randomly placed control events, notes have the
      correct control curves.  Don't worry about times or midi.
    - slicing: Given some simple note transformers (tuple, place, ...),
      pitches and controls are still associated with the right notes as above.
      Don't worry about times, just that the right notes and the right
      controls.
    - block call property: a couple levels of nesting for block calls, notes
      still have the expected pitches and controls as above
    - inversion: as 'basic pitches' and 'basic controls', but controls are
      below the note tracks, results should be the same
    - stack: generate nested events, check that stack is as expected

  get rid of schema
    * move Schema into Derive.Call.Block, move parse stuff into its own module
    * remove SchemaId, block schema
    - I think I still need a way to switch deriver per-block, block title is
      an obvious candidate
    - can I add a simple example of a totally unrelated deriver, e.g.
      with no calls, just as an example?  I'm inclined to think such
      a feature is not so useful because it would be incompatible with
      all other kinds of notation, but perhaps for a truly specialized
      notation?  E.g. can I do nanguan pipa?

  - split Ui.State into separate modules for views, blocks, tracks, etc.
    put into Ui.State.* and re-export from Ui.State
  - it's annoying how a track with nothing in it won't play, and has no
    playback.
  - when I implement control block calls, I might want to override a control
    at certain points.  It should be possible to add a 'merge' operator that
    replaces samples.  Is still no good if the samples don't line up, but I'll
    need an event-level merge anyway for notes.

  - Serialize logs with Serialize rather than as text, but I need a record
    format.  This also makes it easier to change Show for various logged types
    like Derive.Stack since I don't then have to write a Read.
  - tempo composition is problematic because it means you can't change the
    length of a block from within the block.  So slowing down one part will
    speed up another.  How can I get local tempo like I want?  Or just edit
    the global tempo?  Unfortunately it's much more convenient to edit local
    tempo.  Maybe I could do a non-compositional tempo that simply overrides
    the caller, or rather multiplies with the caller.
    This means the call event is now longer than its duration would imply,
    and to fix that I need to have the child tempo modify the parent.  So
    effectively I am just modifying the global tempo, only providing a nicer
    syntax.

    This technique really is non-compositional: you can't have more than
    one call at once.
    Actually, I could: tempo track looks at calls in note tracks, gets
    sub-blocks, strips out the tempo tracks.  Then multiplies those signals
    with its own.

    Or I could just make it easier to edit the global tempo:
      * when you click on the parent, show selection pos on the child too
      - show derivation of child inside caller, I think I want to do this
        anyway, but it's hard, how do I fit all that stuff in?
      * merge child rulers with parent?
      But it still seems a bit awkward because I do want the tempo associated
      with the music, e.g. when I play by itself.  On the other hand, if the
      block repeats do I want the tempo to repeat as well?  Sometimes yes,
      sometimes no...
  - try to make TrackEnviron lazy
  - after an uncollapse, it doesn't redraw the selection that was underneath
    Not a big deal since a selection shouldn't be underneath but still...
  - root block window name gets a *?  or if I won't have window names visible,
    put this in the view status line
  - randomize any control by having the 'set' call look for the -rnd control
  - It would be more efficient to move events around if their controls were
    normalized to start from their beginning, so that you never have to modify
    the signals.  Of course, it's only worth it if events tend to get moved
    more than once.
  - some way to get symbol feedback instantly to make it easier to compose them
  - some ornaments should be scale aware, which means scales should have
    a notion of diatonic transposition.  That means I need 'key' in the
    environ.  Actually, named pitch track.
  + automate the manual tests

  fltk
    - skeleton display has leveled steps to make it easier to see who is
      below who.  Only if a track has multiple children.

  wait until I want it
    - shift [ and ] undo and redo zooms.  or one key to toggle last zoom?
    - do tuplets by setting local ruler?
    - lang cmd to show state hierarchically... or does it already exist?
    / there should be a way for play to bring up blocks as they are played
      It's hard to know what blocks to auto-show, and I'd need yet another
      play mode, and a way to communicate new view ids back to the responder,
      so let's wait until I really want it.
    - save repl history along with current song, so you can search for
      previous cmds

  debugging
    - lang level pretty print for events, esp collapsing the stack
    - cmd to save and load cache to disk
    - add a Play.play_msgs function that plays the given msgs, normalizing so
      fst event is at 0.  Use to debug: LPerf.sel_midi >>= Play.play_msgs

  - test sending mtc to reapaer
    also test some mmc commands.  How does reaper support control surfaces?

  input:
    - For control track entry, typing numbers puts them right of decimal,
      typing backtick enters a 1.  Or, enter values in two digit hex.
    - flag for unpitched instruments, so they don't get pitch tracks
    - keyboard editing: non-chord mode that advances as soon as it gets NoteOn

  play:
    - playback should have multiple lines when a block is derived multiple
      times have a set of playback selnums?
    - put a multiplier on play's timestamps to implement a play speed control

  - If I quit and then restart, the second start takes a long time.  What's
    it waiting on?  Midi init?
  - I think PitchSignals may need to be reworked.  They should be (Note, Note,
    Frac).  Otherwise, it's not clear what to call 4a# vs. 4bb.  I can still
    use numbers (Ints this time) as indices into a table of names, but e.g.
    (4c 50) will have to become (4c, 4c#, 0.5) instead of (60.5, 60.5, 0).
    But this means displaying the signal will become more straightforward.

    Remember that some scales may not have well defined degrees and may really
    be in NNs, e.g. a ratio relative scale.  They can't have a notion of
    transposition though.

    What is the use of enharmonics?  Express the current scale.  In some
    non-equal-tempered scales they are different pitches.

    - figure out what to do about relative pitches
      PitchSignal.sig_add
      Can no longer use (+), it has to use a scale provided transpose
    - change PitchSignal.Y to (Word16, Word16, Float)

  - I think if the same TrackId appears in multiple places, it will be derived
    redundantly.  I should be able to cache the signal output in a TrackSignal.
    But with any luck derive caching will take care of this.
  - TrackSignals is per TrackId, but the same TrackId may render to different
    signals in different positions because it has a differnt environment.  It
    should be (BlockId, TrackNum) + TrackId to verify in case the state was
    modified

  - set_render_style should trigger a rederive to get the track signal
  - implement add_hz in Derive.Scale.Util
    or at least think about how to implement pengumbang and pengisep

  / should be able to rescan midi devices when something new is plugged in
    Centralize midi implementation functions in a record, include scan and
    open/close, record is stored in Cmd state.
    How to establish ID <-> device mapping?
    I think OS X midi ID is just for a persistent ID since names can be
    changed.  But I don't think I care too much about that?

    Read is not a problem since the midi layer handles the mapping.  Write
    needs: get (name, id), put name->id in write mapping

    Wait until I want to add JACK or alsa support.
  - local inst db, in Ui.State, so I can e.g. set pb range for fm/* inst
  - implement continuous controller warp
  - make Track.UnsortedEvents and Track.SortedEvents, type or newtype?

MILESTONES
  0.1
    * scales and keyswitches
    + efficient thru
    + tracklang complete with set of basic calls
    - dynamic loading using hsplugins
    - midi record / integrator
    - dense / efficient control signals
    + lazy signals / lazy deriver
    * derive cache
    * symbolic score
    + save undo history / incremental save
    - solution for audio, plugins, track bouncing, etc.  ardour / reaper?
    + linux port
    - simple csound backend
    - simple lilypond backend?
    - documentation
  1.0
    - display / edit derivations inline
    - print scores
    - mouse oriented signal editing
    - windows port?
  far future
    - render audio
    - include audio inline

----------------------------------------------------------------------

external
  - send a patch to improve Random.Shuffle?
  - patch for hsc2hs for #alignment
  srcloc_annotate pragma
    1.31 vs. 5.80, 4.60 for dummy, so just using pgmf already kills perf
    I think a ghc pragma is needed.
    - read up on how jhc does it
    - ask ghc-users if it's a good idea
    - figure out how to implement pragmas in ghc

build
  - wait for shake' around jan 2012 to continue working on this
  - shakefile is close, but gets hung up on util.h
  - make RunTests dependent on generate_tests.py
  - make individual test targets that make a smaller RunTests
  - Makefile: ghc --make doesn't understand the hsc -> hs link, which leads to
    manual inclusion of $(UI_HS) in the deps

use fixed-binary instead of Doubles for ScoreTime and RealTime:
  reasons to do it:
    - get rid of custom implementation in Perform.RealTime
    - get rid of half-open except start==end hack for ranges, a point selection
      is simple (start, start+1).
    - RealTime.to_seconds is big on the profile
  reasons not to do it:
    - what to do about -0?  I could disallow 0 dur events and make control
      events have an eta dur
    - will fixed64 be slower?
  switch back to Double for RealTime, split from Timestamp for midi
    - but floating point imprecision make controls not be clipped to their
      notes properly.  I think this happened at the Deriver level, not Perform
  problems:
    too slow, I do lots of to_double conversions that are slow.
    Can I do all that math in Fixed?

hs plugins:
  How can the plugins link against the core quickly?  They shouldn't link the
  actual code because they are compiled as separate objects.  But to save
  time of reading all those .hi files, I can make a package.  Except it looks
  like it's just the same set of hi files.

  There's a space leak, but maybe it's acceptable?

  - research dynamic libraries: www.well-typed.com/blog/30

  - Can I make relinking faster by making the static core a shared library?
    Use cabal?
  - Either dynamically load local inst definitions and local StaticConfig, or
    auto-generate the link file Local/Instrument.hs.
  - Implement a LangPlugins that uses plugins' eval.  Or is there too much
    space leakage?

  - come up with plan for reloading inst config and static config
    Really what I want to be able to do is recompile the static config
    incrementally, relink it with the main binary *quickly*, and restart the
    app with exactly the same state.  This should be a lightweight operation,
    so it's feasible to edit some code, press play, edit code, and play
    again.  That means a full-on serialize restart is out, because the cache
    could be quite large.

    Of course, you want this stuff in a library so it can be reused across
    projects, so you can put it all in Local/.  Then the song state would
    have a (hopefully minimal) linkage from hs namespaces to the tracklang
    namespaces.

    So with hs-plugins: The static config is considered a plugin.  You edit
    Local/Config.hs, or edit other files in Local/.  It detects the change,
    regenerates Local/Config.hs, recompiles and reloads it.  Then the
    responder is called again with the new static config.

    So I need to be able to re-initialize the responder with a new static
    config.  Actually, the bits I care about are the call map and the cmd
    map.

note input / thru:
  - some way to turn off all midi thru / input
  - keyswitch support in midi thru
  - profile midi->midi thru and implement a fast path if necessary

bugs:
  - Create.rename_project loses the merged tracks
  - bizarre hint importing requirements in Cmd.LanguageEnviron
  * track down ghc rts crashes, assertion failure
    - make a repro case if ghc guys want it
  - run under valgrind every once and a while, just for fun
    - why doesn't valgrind reveal bad memory access from haskell, e.g. poke...
  - hint refuses to compile when a module emits a warning

cleanup:
  - get rid of Perform.SignalBase and do something about the code
    duplication between PitchSignal and Signal
    - port SignalBase to vector
    - port Perform.Signal to Util.TimeVector
    If I want an unpacked TimeVector then I need to abstract out the way
    to unpack it.
    I should use Data.Vector.Storable since I want to pass the data to C++,
    and can pass by pointer or memcpy (as I currently do).  Data.Vector.Generic
    abstracts out the access functions.

  * now that the signal deriver is gone, I can also get rid of ignore_tempo,
    unless I want to use it for a lilypond backend or something
  - use lenses to make some of this record update stuff nicer?
    - fclabels: rename record fields, use setL and setL
    - lenses: got some magic for working with StateT?  don't understand yet
    - data-accessor
    - data-lens - looks simpler than fclabels, but has no TH to derive lenses
  - storing TrackEvents without duration would make maintaining the
    no-overlap invariant easier.  E.g. have explicit 'off' events, otherwise
    each event extends to the next one.  It means after merging I have to
    clear redundant offs, but that's easier right?

  - remove Util.Log -> Perform.Warning import by translating IDs into strings?
    On the other hand, it's not unreasonable for logs to use other data types
  error prone things:
    - setting some state like project directly through State won't update
      global status.  Maybe I could fix this and also avoid the scattered syncs
      by doing a special state diff after cmds
      sync: state_project, state_project_scale

      The problem is that this moves the set_global_status away from the cmds
      that actually use it, and puts them in a distant function.  However, the
      state itself is already centralized.

      However, I'm worried that checking state on every single respond is going
      to hurt latency even more.

    - creating a block through State.create_block instead of Cmd.create_block
      won't get the current track box color
  * since tracklang lets me apply derivers to tracks and skel makes the
    structure explicit, do I still need the schema?  at least for Cmds, I do
    need a way to look up Cmds based on track focus.  Before doing anything
    rash, think about ways to derive e.g. 工尺譜.
  / instead of building log dup suppressing logic into various functions,
    e.g.  allot, maybe I can add 'key' field to Log.Msg and suppress dup
    keys?  Who else produces dups?  Convert does.  But isn't it more
    efficient to just not emit?
    - convert and perform want to suppress the same msgs for the current
      derivation
    - Perform.Midi.Cache.is_splice_failure is just a better way to identify
      the msg than text
    - cache wants to suppress all cache msgs until end of cached block
    The problem is that it's hard to know the boundaries of the current
    derivation, especially if there are multiple blocks being derived
    simultaneously.  I would have to put a block id key.  On the other hand,
    filtering in place knows that.  The extra copy is actually no worse than
    the filter at perform time, maybe better for cache since it only happens
    once.

performance:
  efficient signals
    control
      - make Ui.Events into 'Map ScoreTime (Event | Chunk Signal)'
      - collapse chunks of adjacent 'set' calls into a Chunk
      - track_derive on a Chunk just returns the contents
      - fltk event render should detect too dense events and omit them, rely
        on the signal render
      - UI edits should see the Chunk expanded out as Events.  Inserting an
        event should modify the chunk or split it depending on if the inserted
        event is a set call or not.
    pitch
      Similar to control except I can't make Chunks automatically, since
      collapsing to NoteNumbers loses information.  But recording doesn't have
      this information in the first place, so it can generate chunks.
      However, maybe I should omit chunked pitch signals entirely and instead
      emit an initial pitch along with a transposition curve.
    - make seeks on derive output more efficient with a lazy index

  cache
    - Can I make cached signal more efficient by merging the signals before
      stashing it?  Of course laziness means that this won't actually happen
      until the next time the cache is demanded, unless I force it.
    - see if the cache filtering logs is causing significant copying and
      remove
  - make tracks into calls, so they cache and the sub-run stuff works the
    same with them as other calls
    It would be nice to make them calls in the scopes, so they can be
    rebound like other calls.  This is effectively moving the Schema into
    calls.  Then I can entirely get rid of it.
    * move Schema.default_schema_deriver into c_block
    - make Schema.derive_track into a call
    The thing is block takes 'BlockId' and track takes (BlockId, TreeNode),
    not CallArgs.  And it doesn't make sense to call from the tracks anyway,
    so maybe not in Scopes.
    Not much point to trying to put it in Environ or Scope since it's
    a different type, but it could be dynamically scoped with the others.
    Basically it's the schema, but dynamically scoped rather than attached to
    blocks.  I can't actually see how dynamic scope makes sense, it should be
    attached to blocks.  So keep it how it is, but call through generator
    cache.

    I want to do better tests about speed vs. space, cache hits and misses.
    Improve logging so that I can see, given a change, which areas of score
    were rederived.
  Cmd
    - If a msg aborts or doesn't run any cmds, don't bother to run diff.
      Except that hardly ever happens if I do shortcut thru.
    - cache track cmds for each track, update when the track title or skeleton
      changes
  Derive
    AppendList / MergeList for Derive.Stream
      - switch to AppendList and try to get garbage down
        Avoid copying sublists returned by block calls and cache hits
      - play from cursor is a linear scan on all events from the beginning,
        seems like this would be faster if I could skip chunks.
      - see if a Merge constructor can reduce copying
      - can I cache length and range in AppendList?  does it matter?
      - insert parallelism?  maybe the evaluator can do that when it sees
        Merge?
    - lazy signals
      - check out 'at' and 'bsearch' occurrances and see if they can use tails
      - There are lots of lookups in the tempo map
    - see if making a version of Derive.local that's non-monadic in the
      modifier has any effect on performance
    - to get arrival beats to work right with the control track, I think I can
      make the 'set' control track call set from (prev, cur) instead of just
      cur.  It will make simultaneous samples, but they should be ok.
    derive cache
      - c_block should only cache if the block has > a certain number of
        events.
      - implement tracks as generators so they can be cached too
      - I won't rederive cached generators if they have control damage outside
        of the event range.  But there's nothing stopping a generator from
        reading ahead or behind... come up with some kind of solution for this.
    implement incremental transformer caching, if necessary
      - once I know what I'm doing with transformers, fix up negative duration
        postproc
    - fair amount of garbage generated by SignalBase.bsearch_above, I think
      this is because it has to box the values when it pulls them out.  But
      it's really just comparing to a Double, so I should be able to do the
      operation unboxed.  But decide about lazy signals before going nuts on
      this.  If I revert to linear search then none of this is necessary.
    - at_linear is called a lot by compose, by compose_warp, by d_warp
      can I make this more efficient?

    - or maybe it's the control deriver creating a huge list of signal
      chunks, which is then all forced at once since merge needs them all.
    - Parallelize derivation with strategies.  Can I spark subderivations?
  Perform
    - use a lazy storeable vector for [Score.Event] and [Midi.Message] to save
      memory?  If I make Messages a storable vector, I'd have to hash the wdev
      or something.
    packed midi, encode to storable vector
      - last step of performer is to compact into vector
      but I'm not sure this will much help
      The main thing is how to encode the device.  I think I can hash it.  Or
      use OS X persistent device ID?
      how many msgs in e.g. the ptrio?
        127130, [pno 9205, flute 63748, clarinet 54177]
        5367 for bloom
        peak for 246114 msgs: 46mb for int, 38.7 for int, 38.7 for w64

symbolic score
  - namespacing?  don't worry about it for now, if I need it later it can be
    entirely at the haskell level, I can use the per-song config to import
    namespaces
  - feta's tr symbol looks bad especially when small, is there a better one?
  - find or make a font with jian ti symbols?
  - find or make a font with gong che pu

fltk:
  - after creating a new track, focus should go to its title
  - some kind of special highlight to indicate the active block
  - rethrow c++ exceptions as FltkError
  - auto add pitch track when a track title input is expanded crashes with
    assertion error 'title->w() == body->w()'
    solution: text entry is collapsed by track add, remove, or resize
  - factor scroll redrawing into a single class
  - draw arrows in SkeletonDisplay.cc properly
  - figure out how to have a minimal title bar in os x (win.border(0) removes
    it altogether)
    I can set something like kUtilityWindowClass in Fl_mac.cxx:Fl_X::make, but
    it doesn't get any kbd input
  - can I get the windows into an os x windows menu?
  draw bugs:
    - redraw after track range damage draws things a pixel too low
    - when scrolling upwards, ruler mark text is not drawn completely
    - doesn't redraw after switching monitors
  Track
    / dividers can have separate color for upper part, for collapsable tracks
  event track
    * events pass style as a uchar ID for consistency and memory savings
    - visual indication when both solo and mute is on
    - editing event text should use a text entry widget, that way I get
      a cursor, IME, etc.  A side benefit is that I don't have to derive half
      edited data.  This also solves the problem where the currently edited
      event is hidden.

      This only applies to raw edit mode.  Entering notes and doing
      programmatic changes is still single key.

      Remove the separate raw edit mode.  Return while in edit mode creates an
      event if one doesn't exist and begins editing its text.  Keyboard focus
      is then in the widget until return or tab or a click outside of it.

      The responder has to be able to tell UI to open a text entry, so return
      (State, [UiCommand]), where
        data Edit = Edit {
          edit_block_id :: BlockId
          , edit_tracknum :: TrackNum
          , edit_at :: ScoreTime
          , edit_text :: String
          , edit_insert :: Bool
          , edit_selected :: Bool
          }

      If the edit_insert is True and there is already a text entry open at
      that position, insert the given string at the insertion point rather
      than creating a new one.  This can implement midi->*note insertion.

      Return msg is:
        data Edited = Edited BlockId TrackNum ScoreTime String

      The UI can suppress this if it detects the text hasn't changed.

  control track, render signal
    * support control signals that aren't just 0--1
    / decided against rendering signal as one long line, comment in
      EventTrack.cc
    - render option: solid with color gradient
    - combine multiple signals, e.g. one controls xpos, one controls color

  MoveTile
    - only capture drag on a plain drag with no modifiers

logview:
  - haskell and c++ use the same machine readable format
  * LogView should use Util.Fltk
  - tabs are not lining up properly
  - option to wrap lines or not?
  - hide or display various attrs: date, file, function, ...

Ui:
  Track
    - benchmark large TrackEvents
    more compact implemnetation than Data.Map?  profile first!
      - priorities: memory efficiency, persistent, merge speed (insert many)
        shallow tree of dense chunks?
        can I take advantage of non-overlap?  [(pos0, data), (pos1, end), ...]
        data Event = Event String StyleId | End | ControlVal Double
      - I think memory efficiency is more important than modification speed
    dense sampled signals
      - efficient storage, preferably as a Signal so no conversion is necessary
      - display dense signals: omit text and trigger lines when zoomed out

plugin host freeze audio
  features:
    3 load synth plugins: ardour3, reaper
    1 programmatically configure them, e.g. load 4 fm8s each with poly of 2
      and loading inst X, or switch them all to inst Y
      - dunno?  can reascript do it?  osc on ardour?
    3 sync play position seq, sync start time
      - I think mmc can do this
      - or maybe the control surface support can do this
    3 start record too
      - control surface support should do this
    2 sync from daw back to seq
      - Can I have the DAW also emit MMC?

  features needed:
    - host synth plugins: programmatically load and configure plugins
    - route midi: associate each plugin with its own midi ports
      It would also be nice to split by midi channel, and route each chan to
      its own plugin.

      On OS X this means creating an IAC port for each synth, presumably
      multiple ones for multiple instances of the synth.  Then I need to
      route each synth to the right midi input and keep them configured.  This
      seems like a bit of a hassle.

      Can I use JACK midi to address a specific synth?  It's one midi stream
      per jack port, so I need an association between insts and jack ports.

    - audio graph config: configure the audio graph, placing synth plugins,
      filter plugins, track record / fader / etc. daw stuff, and outputs
      at various places
    - DAW: Need to sync play position and send current cursor position when
      it changes.
    - track freezer: Record plugin output, sync play position.
  rpc
    - osc, but no good for two way
    - thrift?
  ardour
    - ardour3 supports synth plugins, but doesn't compile on OS X yet
      wait for paul to post his updated build instructions, try again then

  reaper
    it can sync to mmc
    - route multiple plugins to the same bus?  can this be scripted?
      Probably, but to use apple IAC I need to create a bunch of IAC ports and
      make sure they are configured the same way on both sides.
    - can it send cursor position?
      I can poll.

  impromptu
    - mac only
    - can programmatically create a au graph
    ? can it record audio?  yes, but maybe not from an au?
    - in any case, I can't do daw stuff, so I think I don't want this

test:
  - tests count number of tests in addition to checks within each test
  - it should be possible to build only certain tests into RunTests
  - use generics or Foldable or something to write a generic StructEqual

misc:
  - program to launch logview and seq together
  - ^T on the cmdline prints stuff!?

integrator / midi record:
  - implement

REPL repl language static config
  - haskeline sucks for long lines, add multiple line editing?
    really I'd prefer plan9 style esc then edit
  - could add syntax mangling, but probably better to add it to the mangler
    so it works for everyone
  - pass -fobject-code to avoid trying to recompile files?

Cmd:
  - step play StepPlay could work even when notes were moved by annotating
    the midi output with the UI event that produced it.  This might be useful
    for debugging too.
  - Can I give Cmds their own state without putting it in Cmd.State every time?
    For instance, twelve scale may want to know what key you're in.
    Actually, it would be best to have per-module state.
    At worst I can have 'Map.Map String Dynamic'.

    Use existentials:
      data forall a. Cmd = Cmd {
        cmd_func :: a -> CmdT (Status, Cmd)
        , cmd_state = a
      }
    This means that such cmds have to be able to be updated after they are run,
    so the cmd lists have to be kept in responder state.  If I'm going to do
    that, why not have cmds optionally return a continuation and handle state
    that way?

      cmd msg = do
        state <- stuff
        return $ continue $ \msg -> do
          more stuff

    Or if I can put it in the monad:
      cmd msg = do
        state <- stuff
        msg2 <- yield Cmd.Done
        more stuff

    For module level, each module of cmds would have to export a bunch of Cmds
    and the responder retrieves the state and passes in another layer of
    StateT, or directly.  I supposed Dynamic wouldn't be so bad for that.  What
    happens when the module is reloaded?

  ? a module with easy access to all GlobalKeymap cmds for cmdline access
  vi style keymap:
    - movement: hjkl, HJKL to move timestep+1 or skip to
      next inst track, bf to move timestep at block section rank, BF to move to
      top and bottom of block
    - esc and i for edit mode
    - number prefixed cmds?  not for now
  Cmd.Edit
    - alternate finale-like note entry: hold down step key to set step and
      turn on edit mode, but only while the key is down
      (merge will clip them to the next event)
    * map selection through function
    - controller edit mode accepts two numbers and moves on, no spaces
    - a legato command that always goes to the next note would still be useful
   * swap tracks keeping skeleton up to date
   - stretch events in selection to another length (need two selections?)

  Cmd.NoteTrack
    - record velocity if there is a velocity track
    - chord input, if there are multiple note tracks for this inst

  Cmd.Language
    - lang cmd stuff to load string serialized tracks for event cut and paste
    - an aux data input for the lang socket might be useful, to paste in data
      without having to quote it
  Cmd.LanguageCmd
    - some way to more easily type IDs, either the mangler adds a let for pbid,
      pvid, etc., or the mangler turns <foo> into <current/foo>

  Cmd.Play
    - play loops
    - start playing from top of displayed area
    - start playing from this block's position in the root block

  Undo
    + incremental save
    - undo as a tree?  On modification, split the undo tree instead of
      throwing away the future.
    - undo only within selection
    - record view changes, at least zoom / scroll so it can be undone / redone
      separately
    - if Cmds have a name return, history entries could have names.  Keymap
      cmds already have a name to put in.

  Cmd.MakeRuler
    - functions to modify zoom levels and other mark attributes
    - functions to splice or delete time or a Meter into a ruler

  Cmd.Freeze
    - details in doc/freeze_track

  Cmd.Save
    - save with a magic number so I can load songs, inst configs, etc.
    - gzip save files

Derive:
  - remove or simplify Schema
    But I need to make sure I don't need it first and can implement a totally
    different language, e.g. gongche.  Having a way to switch default deriver
    and cmds still seems useful.
    Of course, I also want to be able to mix score styles, so I don't want to
    make gongche a total island.  Can I integrate warp tempo as a note
    transformer?
  lazy signals:
    - see if I can make control tracks truly lazy by making signals lazy
    - reimplement various functions like integrate and resample, bsearches
      must be linear
    - make linear searches faster for e.g. warp by dropping warp in the past
    - can make integrate output infinite and remove set-prev hack
  instrument
    - per-project short aliases for inst names so you can fit them in tracks
      easily
    - Implement >inst as setting the null call instead of env.instrument.
      That way the inst has control over the interpretation of e.g. attributes
      and pitch slide (to implement piano style retrigger)

      or maybe, lookup val calls in current inst analogous to current scale
      Maybe I can get rid of the Instrument.inst_control_map if I do the
      mapping in generate_note?

  - implement postproc calls
    - framework for determining scope of a postproc: per inst, per track,
      for pre or post overlaps, etc.
    - Think about how to keep incremental recomputation in the presence of
      postproc.  I suppose they have to declare how much they depend on.
    examples of postprocs:
      * echo
      - retune a note depending on the previous interval (e.g. sloppy pitches
        when playing quickly)
      - negative duration
        I think I'd rather do this as part of the instrument, though.
      * string emulation:  Every note is assigned a string.  When
        a legato new note is played, it either stops an existing string or takes
        a new one.  The previous note will either ring for a decay if the
        string is unassigned, or reset to its "open" pitch otherwise.  Strings
        can either assume their new pitch instantly (stopped), or gradually
        (bent).
      - overblow emulation: a set of overblow ranges are defined, along with
        possible pitches for each one (fundamental and overblow harmonics).
        When a note moves from one to another, start a new note at the
        destination pitch and bend the decay of the old one to the fundamental
        or closer harmonic from the previous mode.
      - rambat damping emulation: notes ring on by default until they can be
        damped.  Damp at the first opportunity, where opportunity is defined
        as a break with no notes for a certain amount of time.  Can only damp
        two neighboring notes at a time.

  - derivers for sekaran patterns
    - do a code version and a block version
    - block version requires block arguments and variable substitution
    - implement deriver like vla/cello duet?  that's a sekaran, so I need to
      think about this more.
  - Inline subderivation.  E.g.
      inst = >foo | {
      ""
      ""}
    Will run the two events as a subderivation.  Uses:
      - set inst, scale, srate, whatever for a range
      - transform a range, e.g. echo
      - set a signal: e.g. set staccato in a range
      If I implement as just {} = subderive, then I don't have access to the
      events inside.  That means I can only use it to group Environ changes.
      However, if I present it as [(Start, Dur, Deriver)] then I can do a few
      more:
      - tuple
      - This doesn't completely solve the sekaran problem, because I still need
        to put controls on, but it would work for note-only sekaran... wait,
        what about pitch?
      I can't move anything, because of the controls problem.

  - Is there a use for "free equals"?  I had planned to use it to set inst
    within a track but there may be easier ways to do that, i.e. bind inst
    aliases within a track and then put an inst on every note, but it
    complicates caching.  Free equals is also awkward because of next note
    having to skip it.  It's also analogous to assignment, and it's nice to
    exclude that.
  - sustain signal, to control staccato vs. legato
  TrackLang tracklang
    - make sure signal derivation doesn't do calls
    - implement block level calls in block title
    - other attributes in block title, e.g. "alias=?squiggle? | xyz"?

  - dynamics controls:
    - volume, velocity, and breath map directly to midi vals
    * pres is continuous volume, maps to velocity or breath depending on inst
    - vel is attack volume, maps to velocity or breath but is only sampled at
      the beginning of the note
  - to cut the middle out of a pattern: a cut signal that disabled derivation
    when it's 1?

  - combine ornaments, like "hold 1s | tr" to hold the first note for 1 score
    time before starting the trill.  I think this could work by warping tr

  * ScoreTime and RealTime literals: 1s, 1r
    If I had score and real time literals, I could merge abs and score trills.
    Then I need to support either typed controls, or a notation for "cont
    x interpreted as score time".

    trill 1 4s -> Signal (Just (RealTime 4), Control)
    trill 1 s%cont -> Signal (Nothing :: Maybe RealTime, Control)

    data ControlType = Scalar ScalarType Signal.Control
        | Pitch PitchType PitchSignal.PitchSignal
    data ScalarType = TReal | TScore | TNum
    data PitchType = TAbsolutePitch | TRelativePitch
  - time interval literal, so I can specify e.g. trill speed in terms of beats
    This means Derive has to have access to the rulers.

  deriver customization
    - set dynamic env vals, especially if a family of derivers use the same
      argument names for analogous behaviour, e.g. 'tr-speed'
    - make it easy to add haskell derivers, tracklang must remain simple
    - derivers call other derivers, which can be rebound

  * arg processing: arg defaults taken automatically from the env, if
    prefixed with call name: "call-arg"
    - one problem with this is rebound symbols, do I want to force new names?
      I think I do, because otherwise it exposes the underlying symbol.
  - test Calls that return overlapping events
  - block-level calls
  - x = _ will unset x

  - come up with a syntax for Ui.Event preproc calls
    >inst1 | echo < preproc1 < preproc2
  - also I can have a post-parse "macro" preproc pass, this is more suited
    for prepending a call
  - re-implement directives: derive_notes returns (EventDeriver, [Event])
    wait until I have a call that wants to use it (suppress event?)

  - When looking for the next note on, I should skip notes which are just
    'statements' that produce no notes.  That way a var set won't interrupt
    the pitch sig.
  - some kind of notation for replacing the track interpreter, e.g.
    TrackId -> EventDeriver.
    This could be used to implement macros, and also preproc.

  val calls:
    - val calls to get the next/prev TimeStep

  note calls:
    * Implement tick as a call:
      Need to get next and prev Ui.Event, get pitch from pitch sig
      to_local (between (to_gloal prev_pos) (to_gloal next_pos)
      d_absolute_at = d_at . to_local

    - Implement suppress as call:
      This is more tricky, how can a call modify neighbors?  Especially
      preceding ones.  This seems to mean I still need postproc calls:
      DeriveT -> DeriveT.  Internally it evaluates the deriver, processes
      the Score.Events and wraps it in another deriver (the seq equivalent of
      cue).  After that most behaviours are ineffective, but them's the
      breaks I guess.  It seems nicer if I could pass something to the block
      to cause it to skip the downbeat, but how can I do this in a non-ad-hoc
      way?  If I can insert a per-project block deriver I can add it as an arg.

    * Implement tuplet:
      't *n1 *n2 *n3 |' runs deriver three times with three different
      pitches. (Didn't wind up doing it that way.)

    * Implement clip-call:
      Undo the call stretching, this should be efficient because of stretch
      combining:

      d_stretch (recip (dur/block_dur)) $ d_clip dur $ deriver
      "unstretch | sub"

      A non-block call (including notes) will have a block_dur == dur.  I can
      also imagine a version without the clip.  'unstretch' is a crummy name
      though.  'restore'?  'abs-dur'?

    / Implement sekar derivation.  The tricky thing here is I want n notes, not
      a call with n args.  Use the Generator "consumed" return val for this.
        Seleh can pair derivers:
          seq [stretch 0.5 (seq d1 d2), stretch 0.5 (seq d1 d2)]
          (d1 @> d2) ~ 0.5 @> (d1 @> d2) ~ 0.5

        Without logical-stop I can't sequence Derivers.

      It would be nice to do a piece on sekar patterns where the form itself is
      in the same pattern, for a kind of fractal structure.  How to have
      a pattern derive patterns?

      - pass the calls as block args
      - put the null deriver in the env
      - more general than the above: dynamically scoped call map and syntax to
        modify it
      - env var that prepends or appends calls to notes.  actually, this is
        better done as a preproc.

      Maybe I could unify the env and call map and also a general variable
      facility: var = val -- 'var' is a symbol, so assign to the call map,
      'val' is a symbol so look up in call map and env

      call var var -- look up 'var's

      This way I need a VFunction type and variable lookup.

    * Implement trill
      * absolute tempo version that adds new cycles when stretched
      * version with n cycles that stretches with tempo
      - hybrid where the initial part stretches, final part is absolute

  PitchTrack pitch
    * Named pitch tracks, so derivers (e.g. tuned just scale) can take pitch
      track args.  The way this could work is that the state_pitch becomes
      'Map SignalName PitchSignal' and the "" signal is taken by the note
      deriver during convert.  Track syntax:
      "*scale" -> ("", ScaleId scale)
      "*scale %psig -> ("psig", ScaleId scale)

  ControlTrack control
    interpolators
      - sine
      - constant slope, exp slope (i.e. slope until next control event)
      - continuous tempo warping for signals
        tempo: "2" -> "1", "2", cont: "2" -> "i, 1", should emit a bent line
  Derive.Scale scale scales
    - implement pengumbang pengisep
    - enharmonics for Twelve
    - just intonation tuned to a pitch signal
    - looks like fun: http://en.wikipedia.org/wiki/Bohlen-Pierce_scale
    - retune a note depending on the previous interval (e.g. sloppy pitches
      when playing quickly)
      I think this has to be postproc.
    - Ratio based notation where the ratios are from the previous pitch.
      Should be able to do this with val calls.
    - octatonic
    - parser for scala .scl files

   - Control track management?  It should be possible to have a note or a bunch
     of note tracks with a bunch of control tracks and control the clutter.
     Ideas: collapse has limited usefulness when there are too many, even with
     color coding.  I could do this with logview: selecting a note track logs
     a list of its control tracks and whether they are hidden or not.  Clicking
     on one in logview will emit a cmd that will hide or show that track.
     Or I could use a UI for adding new controls too: click a track, then a cmd
     'add_control "vel"', this will unhide and focus the control if it exists,
     or create a new one and link it with the skeleton if it doesn't.  ^T is
     intended to create new note tracks, and they're only linked to tempo
     initially.

     This implies a slightly more generic and acme-ish system for logview:
     anything enclosed in {}s can be clicked and will be sent verbatim, even if
     it's in the catch line:

     -- title (tracknum): inst_name, allocation, [control tracks]
     Inst (track 1): fm8/inst1, fm8:0,1,2, [vel {hide 2}, pedal {show 3}]

  - set controller within control track?
  - instrument aliases to make a shorthand for setting instrument, and also
    setting keyswitch on current instrument

  - reflect derivation back into a block
  - merge block level changes with derivation

Perform:
  - damper pedal causes all notes to extend until the pedal comes up, should
    the performer know about that?  Is there anything that this breaks?
    I don't think so, it affects channel allotment so notes could be
    improperly joined, but mixing pedal and multiplexing seems rare enough.
  - Perform.Midi.Perform: should be possible to lead keyswitches as long as
    they don't precede the previous NoteOn, since I think samplers will only
    switch on the next NoteOn
  - instruments can have a native scale, so playing that scale won't involve
    pitch bends
  Instrument
    - some kind of organized way to manage instruments and instrument config
    - some basic midi instrument defs for generic midi (dev, patch)
  Signal
    - lazy implementation
  Midi:
    - see if synths support the set pitchbend range controller
    - Convert certain attrs to controls for cc 'keyswitches'.
    / inst has a notion of polyphony so I can avoid overloading a channel, say
      if I limit it to 2 voices

      The problem is 'allot' doesn't know which channels are going to have
      a lot of notes so it can allot wrong.  For instance, a large chord might
      take up all the polyphony of the first addrs, and then the Nothing addr
      gets the bendy notes.  I think I would have to look into the future and
      make a decision based on the notes that will be overlapping with this
      one.

      The problem comes up with chord oriented instruments that have a few bent
      notes.  However, I'm not totally sure this will be a problem, and it
      would be simpler to simply make two instruments, one for non-bendy notes
      and the other with multiplexing for bendy ones.  Yes, this is putting
      some busywork on the user which should be left to the performer, but
      since the solution is fairly complicated I think I'll leave it be for
      now.

Instrument DB / browser:
  - switch sysex parsing stuff to use attoparsec and ByteStrings
    I don't use state, but I parse [(SrcPos, Word8)] so that I always get the
    byte position correct.  But I should be able to run a sub-parse with byte
    already set.
    Wait, but attoparsec doesn't even keep track of the current byte.
    Should be able to use a Parsec instance for ByteString though.
  - browser search lang: can I write !sysex to search for patches without the
    sysex tag?
  - search lang supports quotes
  - search lang supports - to exclude a term
  * bug: discarded insts still in index
  - ability to edit tags, esp. add "favorite rating"
  * standardized tags
  * put file in a tag so I can search on it
    I can also use it to create a *.txt file with custom info
  * explicitly allow merged patches, so I can get params from syx but send
    program change

Midi:
  bandwidth
    - keep stats
    - display widget

misc ideas:
  - Staff notation represents chords well, but tracks don't.  Think of a more
    compact notation.
  - Staff notation output via lilypond?  This can be implemented as another
    kind of backend.  I think events would need metadata so I have a place to
    put formatting info.  Maybe tracks and blocks need it too so I can express
    staff associations.
  - if derivation needs event IDs, maybe I can use the value-supply package
  - safecopy package does version controlled serialization
  - think about yi's approach to keybindings as a parser and keybinding state
  - also investigate yi's approach to configuration

planning
  Composition of score fragments.  I think I want to display subderived
  notes within the call event.  And then some way to put edits on top of it.

research:
  - spline curve interpolator: evoral/Curve.cpp, www.korf.co.uk/spline.pdf
  - check out Ben Johnston's just notation

future:
  - I need to sync with a DAW but don't want to implement rewire.
    Which DAWs support jack?  ardour, reaper?, ...?

    Can I use ardour as vst host, DAW, and track freezer?  It has OSC support
    and I could add more.  Downside: no windows.

    - vst host: Need to programmatically load plugins, configure plugins, route
      audio.
    - DAW: Need to sync play position.
    - track freezer: Record plugin output, sync play position.

  - check out jack some more.  I don't necessarily support it in the beginning
    but should have an idea at least.
    Looks like I could use it for midi i/o, but what's the advantage over
    e.g. portmidi?  Maybe the ability to send midi to e.g. local apps in
    standalone mode?  Or would be be better to support vst?
  - sync via jack with e.g. ardour, rosegarden

OTHER
  - #(poke Mispeled, field) fieldp field results in compiler bus error
  - problem with pianoteq: if the same note occurs on two channels, one
    will be dropped.  Report to pianoteq.  I could work around, but it won't
    occur with real multitimbral instruments anyway.

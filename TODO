LEGEND
  - todo; + in progress; * done; / obsolete, do not want, or can't repro
  ? open question; . note; bug: marks bugs.

  Use indent folding with indent=2.

STATUS
  + Incremental rendering:
    faust-im
      * add getState / putState
      - use it
    sampler-im
      - start a stream with state, get final state
  + I should set up organized profiling, especially so I can profile before
    and after warp as function, and linear segments.
    . Mostly done, but I think I want to use criterion on some smaller
      examples, since full scores still seems to be really noisy.
    . I have this in the 'criterion' branch.  I investigated using 'guage',
      which has fewer dependencies, but it seems one of those is JSON export,
      which I need.
  - Track down 8.4.1 performance regression.
    . In general I should know what the expensive things in derivation are.
    . It seems like compiles are taking a long time on a certain file.
      . Cmd.GlobalKeymap was 33s, was that true on 8.0.2 as well?
      . Can I get shake to not record 'compilation is NOT required' runs?
      . Or maybe the laptop was overheating.
  - Find out why MemoryLeak latency: went up.
  - Organize reyong and wayang samples for a real sampler-im instrument.
    . First come up with exact pitches for reyong.
    . Ignore the dynamic calibration problem for now, just hardcode dyn ranges.

UNSORTED
  - ghci: often ghci will load a compiled module interpreted, why?
    . If I explicitly regenerate the .o file by deleted and rebuilding, it
      will load it.
    . Can I do verbose logging to find out why?
    . Or I can see where the usual "reason why" text ("flags changed") comes
      from, and is there anything else that causes it to not load the .o.
  - I should use under_scores for all C++, currently play_cache is camelCase.
    . Actually it's kind of forced by the VST interface, which is camelCase.
    . Of course I control that too, so I could change Synth/vst2/* to
      under_scores as well.
  / sometimes I want to see the control curve without event text in the way
    . E.g. when reading wayang patterns.
    . Maybe I just need to learn to read better.
    . Actually LTrack.filled is pretty good.
  - MemoryLeak latency:
    . getting above the limit of 0.05
    . I don't know what the historical values have been, maybe I should be
      saving those.
    ? It's the first cmd only, what is it doing that's more work?
    . Try with 8.0.2.  Yes, still happens there.
  ci:
    - cache shake output
      . branch travis
      . For some reason shake doesn't reuse the .o files.  Asked on
        shake-build-system how to find out why shake wanted to rebuild.
        No answer yet.
    - Build with data/all-deps.cabal
      . branch travis-all-deps
      . I need a ppa for faust, the ubuntu one is too old.
  - Check out pretty-show or pretty-simple or ghci-pretty
    . https://www.reddit.com/r/haskell/comments/8ilw75/there_are_too_many_prettyprinting_libraries/
    . http://teh.id.au/posts/2017/02/13/interactive-print/index.html
    . https://www.reddit.com/r/haskell/comments/76fvsq/replacing_ghcis_prettyprinter/
    . https://github.com/cdepillabout/pretty-simple
    . Maybe I can use this to get rid of the haskell-src dep.
    . Also this is maybe an up to date variant:
      https://hackage.haskell.org/package/prettyprinter

    . pretty-simple takes up too much vertical space, and I think I don't want
      the colors.
    pretty-show:
      . pretty-show still takes more space than HughsPJ Pretty.pprint, but
        seems ok?  It's like Util.Format, but doesn't pack horizontally.
      . Actually pretty-show dispatches to HughsPJ under the surface.
        But it works by parsing and reifying to a Value type.  It also has
        a PrettyVal which is a GHC.Generic implementation to convert to Value.
      . It also renders to HTML, from the Value.
        It's kind of interesting, but I don't like it.  Takes a lot of space,
        has confusing 2d layout.  Can collapse though, but you have to click
        on it.  I'd want to collapse everything at a certain level, like zm.
      . It uses haskell-lexer instead of haskell-src, so I can remove that
        dep, which seems old.
  track down 8.4.1 performance regression:
    . performance regression notes: http://ghc.haskell.org/trac/ghc/ticket/14964
    - try with 8.0.2
    - try without RTS flags
    . Also it seems to really only be OS X, it's only sligtly worse on linux,
      or even slightly better for cerucuk-punyah.
    . It correlates with the productivity decrease, so maybe GC related.
    - maybe I could help with compile time regressions by exporting shake's
      report.html and noticing when files change time.
    compile time mehitabel:
      . 8.0.2:
        RunTests      549.10s user 118.45s system 343% cpu 3:14.53 total
        RunTests      548.71s user 117.10s system 347% cpu 3:11.78 total
        debug/seq     284.47s user 55.95s system 345% cpu 1:38.58 total
        debug/seq     283.33s user 55.27s system 343% cpu 1:38.53 total
        opt/seq       732.63s user 70.86s system 338% cpu 3:57.30 total
        opt/seq       735.21s user 71.48s system 327% cpu 4:06.31 total

      . 8.4.2:
        RunTests      450.92s user 109.63s system 343% cpu 2:43.13 total
        RunTests      445.48s user 107.99s system 341% cpu 2:42.19 total
        debug/seq     220.92s user 50.21s system 337% cpu 1:20.32 total
        debug/seq     218.39s user 49.20s system 345% cpu 1:17.47 total
        opt/seq       785.12s user 65.42s system 327% cpu 4:19.84 total
        opt/seq       765.52s user 64.01s system 321% cpu 4:18.29 total
    compile time tammananny:
      . 8.0.2:
        . RunTests    781.31s user 58.21s system 363% cpu 3:50.70 total
        . debug/seq   429.44s user 31.34s system 362% cpu 2:07.03 total
        . opt/seq     1277.20s user 45.85s system 358% cpu 6:08.68 total
      . 8.4.1:
        . RunTests    613.11s user 49.84s system 357% cpu 3:05.52 total
        . debug/seq   329.67s user 23.86s system 352% cpu 1:40.38 total
        . opt/seq     1339.73s user 39.87s system 341% cpu 6:43.50 total
  - extend gliss so I can gliss on harmonics
    . Why does eval_quoted give opposite pitches?
    note = Eval.eval_one_call True $ Expr.call0 Symbols.null_note
  - Since gliss uses a 'n' parameter for note transform, I should use it
    consistently, e.g. in grace and roll.
  - It's awkward to rearrange tracks and then redo the skeleton.  Since
    I never really want tangled skeleton anyway, can't I make that implicit?
    . I could say the skeleton always goes left to right, and only branches,
      never merges.  So the control is the tree structure and the ordering of
      the toplevel tracks, and I think the rest can be inferred.
    . Write infer_order_from_skeleton, and infer_skeleton_from_order.  I can
      invoke the first after modifying the skeleton, and the second after
      moving a track.
    . Actually, how can the second work, if I don't have the tree structure?
      If I just have the first I would have to move tracks by modifying the
      skeleton, but that seems pretty awkward.
    . The restricted skeleton is like that which is used by integration and
      ModifyNotes: [(Note, [Control])].  Except I have a tree of controls on
      top: [TopControl] where
        data TopControl = TopControl Title [TopControl]
          | TopNote Note
        data Note = Note Title [Control]
        data Control = Control Title
    . Or maybe I could address it directly by making track move work on the
      whole note track.  I can already do this by just selecting all the
      children, but this would make it automatic.
    . But I originally added this entry because I was swapping a control from
      below to above.
    . I guess I could have a move variant that keeps the skeleton the same.
    . The other annoying thing is having to manually add e.g. the tempo track
      to all new note tracks.  I sort of get around this with the insert-above
      etc. cmds, maybe I just need to make those smarter, or understand them
      better?
  . Simplify or unify various types in Derive.ScoreTypes,
    Derive.BaseTypes, and Derive.Score.  Maybe get rid of type aliases
    and move simple types to Derive.T.
  . What would I actually need to have a useful TrackTime?
    . TrackTimes come from Events, and they are absolute measures.  Addition
      and subtraction yields ScoreTimes:
        (+) :: RelativeTime -> TrackTime -> ScoreTime
    . Ui.Event has to be polymorphic on the time type, because I synthesize
      fake Ui.Events or translate real ones (do I really do that? where?).
      . An alternative is to put all calls in normalized time, and then have
        some organized way to get TrackTimes for when I need them.  Or rather,
        make the things that require them not accept ScoreTime.  I'd need to
        go review why I made calls non-normalized in the first place, and see
        how much those reasons still hold.
  Unify Environ and ControlMap:
    . I can get most of the benefit by unifying the syntax: x=y becomes set
      a control or env depending on the type of the rhs.
    . However, they're still separate which means I can make an "invisible"
      numeric env in haskell.
    . Also, I would need Derive.Sig to default from numeric controls.
    . I guess it would then be better to have a single
      Map Key (NumSignal | ValSignal | PitchSignal)
    . This means I can also get rid of the separate pitch and named pitches,
      and just have a signal named "pitch".
  cleanup from linear:
    - rename RealTime.seconds to from_seconds etc.
      . I'm kind of reluctant because RealTime.seconds reads nicely and
        there are a lot of places to change and they all get longer.
    - Deriver.Lib.with_control_mods
    - GConvert.fingerMovement
    - Signal.integrate
  - Look for TODO(polymorphic-signals) for places where a signal typeclass
    would help.
  - what if I added a 'default-interpolator' argument so Control.c_set and
    Pitch.c_set could make curves by default?

  - pnovla @pno1 32.25t mordent broken, probably too much note overlap
  - It seems there's no way to explicitly pass Nothing if the default is Just,
    because _ turns into set the default.
    . Ultimately I think because VNotGiven is special-cased in Derive.Sig.  I
      would need some way to distinguish between "give me the default" and
      "pass Nothing".
    . I could change the default to "pass Nothing" by having Sig check the
      type against VNotGiven and only default if it fails.  But of course
      now there is no way to indicate "use the default" for a Maybe argument.
      This might be more likely to be what I want, but it's inconsistent in
      that the type of the arg influences the process and nothing else does
      that.
    . Meanwhile, there's never a point to defaulting to (Just x) instead of x.
  - generic deriving Monoid?
    . Probably not hard with generics-sop, but what about stories of
      GHC.Generics hurting compile and runtime?
    . How about monoid is_empty that doesn't use Eq?
  - Attributes are not necessarily suited to fundamentally exclusive
    articulations, like striking technique.  For NESS strings I use the
    'element' field, maybe I should be using environ for that at the score
    level.
  - Switching to Symbols.default_note means any event created via Call.note
    winds up with event_text="NOTE", which is not as informative as the
    original text.
    . Was in always "" before?  If so it's not really a regression.
    . I'm back to Call.note using "" again, but I should still check this out.
  - string_idiom should ignore notes that already have a string.
  - It's easy to forget to place the note when I use Call.pitched_note, should
    it take args and do a placed_note?
  - Let synth defs log warnings
    . So e.g. MidiInst.compile_library can report shadows.
    . I should be able to incorporate Faust.PatchDb.warnings too.
  - Generic Show and Pretty instances for ScopesT and Scope.
  - Typecheck PSignal.Pitch instance for NoteNumber could use Twelve.nn_pitch.
    . Except it can't because of circular dependencies.  Maybe instead
      Twelve.nn_pitch should replace the one in PSignal.
  - Maybe 'set' should be the default merger, not mul.  It seems less
    confusing.
    . I could still have 'dyn' default to mul, if that's not confusing too.
  - decide if the ( call is called slur or legato, not half and half.
    . I already have something called slur in Rearticulate, so let's go back
      to legato.  Slur is just how it happens to be realized in lilypond.
  - Use EnvKey.string for string selection in vsl, not attributes.
    . It would be nice to be able to select by name instead of NN, but the
      calls like NNs.  Maybe val calls that emit the right NNs.
    . I'm using pitches with e.g. '60nn' for names.  g, d, a e are still
      a better UI though.
  - if 'roll' were a transformer I could do 'roll | some-note'.  This is the
    same problem as extending 'grace' to be able to put stuff on the main
    note.
  - Pitch bend doesn't work right on a MIDI instrument with patch scale.
    . Likely because the pitch gamut is not linear, but pitch bend is.
    . I would need to warp the pitch bend by the patch scale... but don't I do
      that?
  - It seems too complicated to set up patch scales, how can I make that
    easier?
  - Highlight for block calls which are 1:1, or not 1:1.
    . Use event width for this?  But this is a different mechanism from
      highlights, which uses selections.
    . Or use event color.  Effectively the highlight does that though.
    . How to get the highlight?  Other highlights are postprocs that attach
      the highlight, but I think I can get the block call itself to do that.
    . But highlights go on Score.Events, and this is a UI event.  I could
      extend LEvent.Log with a general Metadata kind of thing, or I could
      also attach a highlight to the first event from the block.
    . The latter means highlight needs to support a time range, and of course
      it won't work if the block produces 0 events.  But in that case it
      doesn't matter if it's 1:1 or not.
    . The problem with LEvent.Metadata is that I don't want to rewrite all the
      LEvent stuff to also deal with logs, but I don't want to pay another
      indirection.  But if I put UNPACK it should solve that:
        data LEvent = Event a | Log {-# UNPACK #-} Log
        data Log = Metadata X | Msg Log.Msg
      Does that work?
    . What other things could I put in Metadata?
      . Highlights for one, I think a ScoreTime range is more appropriate than
        taking RealTime from the events, since the latter is wrong if the note
        extent doesn't match the score extent.
      . What about integrate?  I currently have a special spot in
        Derive.Results, but I could also emit it as a meta-event.
      . But for that matter, why not put highlights in Derive.Result?  It
        seems more elegant to favor the explicit Stream return value over
        implicit Collect results, but the logical conclusion of that is to get
        rid of Collect entirely.  I think I don't want to do that, because
        I take advantage of monoid merge to discard data.  But on the other
        hand, if the output stream is lazy, then it's just the same to do the
        same collection while iterating over the result.  This would make it
        explicit that to get collected data I have to iterate over the events,
        instead of how implicitly touching some fields actually implies
        evaluating the score.  Also I could evaluate Collect only up to
        a certain point, though I don't think I ever want to do that.  And
        then it separates result collection from the deriver, so maybe more
        modular.  Could it be more efficient?  I might spend a lot of time
        combining memptys. and a final fold might get rid of that.  Presumably
        I'd use an ADT for the metadata instead of a record.  On the other
        hand, it's more cons cells for the stream, which maybe means more junk
        to skip when sorting and merging.  Maybe I could mitigate that by
        collecting Metadata together into short vectors, which can be skipped
        as a unit.  It's only a win if they tend to clump together.
      . What would the metadata be?
      . Also I should profile to make sure about Collect usage and of course
        to see a difference if I switch.
      PLAN
        - profile current status, look for Collect allocation
        - enumerate the things that go in Metadata
        - verify UNPACK can flatten Log event
        - estimate work to switch
        - sketch out where and how the collect fold would happen at the end
        - ensure Streams are lazy... I think transforms might actually destroy
          laziness.  But would getting rid of Collect be able to restore it?
          I'd have to do something about exceptions, maybe put it in as
          a Metadata too.  If I can make the whole derivation fully streaming
          then this might be a big win.
  - binary-serialise-cbor is out and implemented by serialise, try switching
    save format to that.
    . But figure out how to use the built-in versioning first.
    . I can, but the encodeListLen stuff is awkward.  Can I get rid of that?
      Maybe make instances for ()?  Of course there already are such
      instances, so maybe just use them?  The result is it goes
      [tag, length, ...] instead of [length, tag, ...], but the former makes
      more sense to me anyway, since the length will likely be different
      depending on tag/version.
  - Adding a new track puts a bit of extra padding on the right side.
  tabuh gari:
    - octaves notation for trompong
    - octaves for gender rambat
    - I get the wrong pitch on too-high trompong notes
      . It shouldn't try to emit pitches above its range.
      . I should extend the samples up a couple pitches anyway.
    - how can I write angsels?  E.g. same as template, but with bits replaced.
      Score derive?
    - It's inconvenient to have two roots, because play-from-root stops
      working right as soon as I change it.  But it does have a definite
      single caller, so shouldn't it be able to figure out a root all the
      same?
  - It's really tempting to put a '>inst = %dyn=.5', but that just forces it
    to always have that dyn.  How can I set a per-instrument default dynamic
    which I can still override?
    . First define exactly what I want.
    . I want to set a baseline dyn per instrument, but I want to be able to
      override it.
    . It should be as if I set a global %dyn, so specific ones can override
      it, but only for that instrument.  So each 'dyn' affects all dyn-*
      signals, and then each instrument can pick out its dyn-me.
    . And of course this should generalize for all controls... well, I don't
      have a use for non-dyn, so I don't really need to generalize.
    . If I always set dyn absolute, I could just set when the instrument comes
      into scope.
    . Wait, why does '>inst=...' not work?  Wouldn't it set at the note track,
      and then the child dyn track would be able to override?
  - Can I have ^j and ^k only move events up to a limit?  How do I set the
    limit?
    . Here's a use for multiple selections.
    . If there's a secondary selection, it should disappear somewhat
      automatically, so I don't get confused by it still being around.
    . Maybe I can get space to do that?
    . Or I could set it to a timestep, e.g. one measure.  Then it would turn
      into move within measure.
    . If I stop clipping events at the end of a block, it's not so annoying to
      move everything, as long as I move it back.  I guess it's still kind of
      annoying though.
  - Figure out how to control vsl legato transition volume mismatches.
    . slur call has a legato-dyn arg to try to address this.
    . Look into http://www.beat-kaufmann.com/vitutorials/index.php
  - (Sig.typed_control "tr-neighbor" 1 Score.Diatonic) when given 1 returns
    an untyped ControlRef.  Can I make it default to Diatonic?
  - ^o should ignore orientation on child control tracks.
    . Otherwise, it would confusingly not delete +0 controls on a negative
      note.
  - LRuler's sections*per_section is awkward when I'm really thinking in
    measures.
  - I had a bug due to using 'Derive.real dur' instead of
    'Call.real_duration start dur'.
    . Separate types for {Score,Real}Time and {Score,Real}Duration would fix
      this, but how much hassle would it be?
  - An 'accent' call on squart/6 @b4 causes a very distant %breath sample to
    go >1.  Why is the note including such distant samples anyway?  Isn't it
    inefficient to scale samples which are clearly not in the note bounds?
  - I often want to see where I am in the parent, e.g. like parent->child
    selection but the other way.
    . I can get this by playing from the point, but why not do it
      automatically?
  - I'd like to use Ui.allocation lens for modification, but I need to be able
    to put it in the monad.  Research once and for all how to do that with
    either fclabels or van-laarhoven lenses.
    . Looks like fclabels can do it, but I need separate monadic lenses, since
      monadic and non-monadic lenses can't be composed.
    . I should be able to write a function to promote a pure one though.
    . Actually I can't figure out how to get lenses to do this.  Lenses can't
      include the Ui.modify, since they have to be composable, which in turn
      they have to be used with Ui.modify, which is the thing I'm trying to
      not use all the time.
    . So maybe just get rid of Ui.allocations.
  - generalize zheng 'gliss'
    . It would use scale instead of open strings.
    . If I wanted to be fancy for harps I could do gliss on whole note or
      diminished minor sevenths that repeat strings tuned to unison.
  - >kontakt/kendang-bali-pasang doesn't work as a dummy instrument because
    those can't have the Patch.Triggered flag, or any flag.  I could move some
    flags to Instrument.Common, but what's wrong with having a MIDI instrument
    with no allocation?
    . Triggered is duplicated in Im.Patch, so I could get rid of that.
  - can I have a block template kind of thing, with a standard set of
    instruments?  Maybe REPL cmds.
    . E.g. for a standard orchestral template.
    . I could also add a track for each allocated instrument, but I'd need an
      order.
  - Also cmds to re-order tracks by instrument.
  - How to add grace notes to a non-null call note?  Also what if I want
    non-null grace notes?
    . I can make a 'g' transformer for the first: 'g 0 1 | x'
    . For all maybe a grace-transform env arg.
  - squart/6 has some jumpy dynamics due to sets in dyn with a scope over them
    e.g. end of @b3, vln2
  - It would be nice to have a text interpolation syntax
    . E.g. "textlike: %s, %v ShowVal, %p Pretty, %x hex, %.3f showFloat 3"
    . Cmd.Load.Mod2.commands_to_controls: "from=%v | %s %v" vol c val
    . But printf style can't work for typeclasses without dependent typing
      because it doesn't know which one to select.
    . text-format: requires importing a bunch of formatters, type-unsafe
      . format "from={} | {} {}" ('val vol, 'str c, 'val val)
      . I don't like it because the format type is out of context.
    . formatting: import a bunch of formatters plus (%), type-safe
      . Probably worse errors.
      . format ("from="%'val%" | "%'str%" "%'val) vol c val
      . Still much noisier than "from=%v | %s %v".
    . fmt: even more operators and imports
  load octamed files
    - implement set tempo and set frames cmds
  selection-orientation branch cleanup:
    - set_duration: If I have ><---|, I can't set the negative event back to the
      zero dur event because it sets the previous positive event, regardless of
      selection orientation.
    - Slice range should be Events.Range so it can remember the orientation.
      Otherwise I think -0 note slices don't work.
    - I think Slice.events_in_range should get an orientation, which in turn
      means checked_slice_notes needs one.  Otherwise don't negative notes
      not get the end event?  But Sekar maybe relies on include_end.
    - Perhaps related, I removed include_end since negative should work for
      that, but Sekar used it.  Can I use Sekar with negative events to get
      end bias back?

  - QuickCheck for Midi.Encode_test just for practice
    . Ui.Events_test.test_from_list_qc is an example.
  - Will TimeVectorStorable.Sample Double have both fields unpacked?
  - bug: Track 'mute' status gets increasingly off.  Surely this is due to the
    bug fix in c523680838564ec55752302d1d591482971b9190 where I no longer do
    only absolute updates to the skeleton.
    . Can't reproduce this now.
    . It happens in save/bali/kebyar-duduk, e.g. mute reyong part in @b3
    . It definitely happens occasionally, but always when I'm busy.
  - Add 'angklung' and 'beleganjur' scales.
  - BaliScales should have a default ombak, depending on laras.
    - Also there should be a way to randomize per instrument, so it's not too
      perfect.
  - Legong scale umbang and isep is too close.
    . Maybe something wrong with how I retuned the sc gamelan samples.
  - TSymbol could have a descriptive arg with e.g. instrument, scale, etc.
    . This would get back the documentation I lost when I got rid of
      VInstrument.
  - OutOfRange pitch error should show the pre-transposition pitch.
    . In fact, all the errors from e.g. Pitches.pitch_nn should be annotated
      with information about the pitch.
  - Cmd.Ky: Keep the defining file in a special slot in the call doc, so I can
    print it out in shadowed msgs.
  - Cmd.Backend's Midi.Patch is redundant, since the Inst already has it
    . Not quite, since Backend encodes that alloc and patch backends are
      equal, but is it really necessary?
  - do a renaming pass on all the prev/next pitch function names in Derive.Args.
    . Should Prelude.Pitch.approach use the lookup pitch style?

  - it looks like special kajar calls like 'oo' mess up track signal.
    . I can fix 'oo' by making DUtil.doubled_call inverting, but that doesn't
      work for 'o..'.
    . DUtil.multiple_call doesn't need inverting because it dispatches to
      call that do invert, right?
    . Actually it's pretty pernicious, because without inverting, doubled_call
      will still appear to work because the underlying call inverts.  But
      TrackSignal gets messed up, and if it did anything based on controls
      then they would not take child controls into account.
    . Why is TrackSignal messed up though?
  - do nruk with a static macro
    alias 'o..' 'nruk | o'
    . I could modify c_nruk to have a generator version that takes a deriver,
      but then I have to copy paste it.
    . How can I inherit args?  StaticMacro is no good because I want the
      generator to be late bound.  But 'nruk' should be static bound because
      it's in another module and I want to inherit its args.
    . What I really want is to inherit args and docs from the transformer, and
      apply to the generator dynamically.  So something like a static macro
      where I give all args to one transformer, and the generator is dynamic.
      I think I can do the former with a special arg, and the latter with an
      eval "static call".
    . But what happens with StaticMacro when it hits a Sig.many?  I think it's
      broken.
    . To support this, Sig.required_vals needs to support 'many' parsers.
      I could infer from ArgParser but it seems like it's getting too
      complicated.  I think at that point I had better just be able to copy
      the parser over.  Can't I just reapply to the callee?
  save/sketch/16-04-10-charukesi:
    - fltk/EventTrack.cc:109 sample time didn't increase: 37.2 <= 37.2
    - Use kotekan for >wy with sargam scale.
  - I should collapse adjacent Collapsed tracks so they don't turn into
    a giant blue block.
    . If I do it at the fltk draw level, then I don't have to worry about diff
      complications or tweaking indices, but I still have to model as fewer
      widgets so the index tweaking just happens lower down.
    . If I do it at the haskell level, hopefully I can reuse the existing
      Track / DisplayTrack distinction used for collapsed tracks in the first
      place.
    - I have to also collapse the skeleton, which means I need
      a Block.display_skeleton and Block.display_integrate_skeleton.
    . However, I'm not sure it's worth it.
  vsl:
    - figure out how to do tuning
      . I think it needs to be pitch bend, since it doesn't seem to respond to
        MTS.  But VSL ensemble should be able to load multiple copies of the
        patch and share sample data.
      . Figure this out before doing too many more patches, because I'll have
        to update them all with global control config, unless there's a way
        to copy paste that.
      . However, it apparently can be used with hermode, so not sure how that
        happens.  Maybe I can just ask VSL support.
      . Scala files are not very good because I'd have to go manually load
        them every time, and they're static.
    . Legato attack scale control affects the crossfade level of interval
      samples, experiment with that.
      . Wait, where did this go?
    . figure out how perf reps work, and how I should handle them
    - make sure perf_upbeat_repetitions are consistent
    - make sure grace vs. grace.updown is correct
    attribute groups:
      . bass clarinet has nv without vib
    - rename +sec# to +s#?
  - Perf.lookup_instrument on a pitch track could look at its note track.
  - I forgot to add Sub.inverting to mridangam.p1 and mridangam.pn calls.  Can
    I have a warning for when a non-inverting call has a note track below it?

  - empty track doesn't get an Environ, which causes Cmd.Track to not be able
    to find the instrument.
    . It was because the kendang tracks were below >pno, not "tempo".  So, two
      problems:
      . It's too hard to see that the skeleton is wrong.
      . Note track children should have dynamics too.
  - Do I need Perform.perform_control_msgs.trim or not?  Figure it out and
    write a test if I do need it.
  - fix control scope in parent events that cover up an orphan, as
    demonstrated in Sub_test.test_overlapping_parent_control_scope
  - Better solution for the "sample at end of block" problem, as demonstrated
    by Block_test.test_trim_controls_problem
  wayang
    - Infer late damping.  E.g., if there is a jump wider than 2 notes, then
      wait until the hand is free for long enough to damp it.
    - Automatically fill in weak notes?
      . This also applies to reyongan, even more so.
      . In fact this is similar to noltol.
    - many double strikes or ngoret tones land a bit ahead of the beat
    - I want some optional ngoret to happen the same way in both hands.
      I could make it apply to a parallel kempyung or octave.
      . I'd need a fancier ngoret that understands 'inst-top' so it can go
        down if necessary.
  - thru on *legong notes is wrong the first time
    can see this editing rehearsal/kendang-legong
  - %sus-abs=-.x is not quite right for detached, because it should scale
    a bit for shorter notes.  E.g. it's absolute but scales down to 0 below
    a certain threshold.
  - network midi doesn't seem to handle abort?
    playing the second time doesn't happen
  - I have a feeling like FM8 doesn't obey ResetAllControls
    Maybe I should extend Midi.Interface.note_tracker to keep track of
    used CCs to issue resets for them.  Some reset to 1, e.g. cc2 and cc7,
    the rest reset to 0.

IN PROGRESS / branch: branches:
  . This has longer term projects, which are partially complete.
  - ControlFunctions are still super confusing. NOTE [fix-control-functions]
    . Yet another confusing thing is that they don't work for arbitrary
      signals given to notes.  I think it would be better to override '' to
      get e.g. %location as %location + rnd ...
    . E.g.  '%strength=.5 | %strength=(cf-rnd ...)' means it looks like
      %strength is .5, but it's actually not, and the only way to get rid of
      the CF is %strength=_.
    . Also the whole implementation is a mess.  Isn't there some other way to
      randomize signals?
    . I could pass a Quoted, and then control functions are val calls that
      return Quoteds: (cf-rnd control 0 1)
    . Then I want to be able to treat those as signals, or coerce them both
      to the same thing.  Really that's a SignalFunction, or maybe just
      RealTime -> Deriver Y.  So this turns into the problem of how to coerce
      various types into SignalFunction, but not have to have an opaque
      SignalFunction for all the defaults.
    . I could have a Convert typeclass.  In fact maybe it would be cleaner to
      split Typecheck and Convert?
      Typecheck: Val -> Maybe a, Convert: a -> b
      Convert would be: Int -> SignalFunction.
    . I think this won't work because the intermediate 'a' will be
      ambiguous.
    . I can always have a Default class that is used only for Sig defaults,
      and provides both ShowVal and the coercion.  It would mean I have to
      duplicate everything in Typecheck, unless I use an overlapping
      typeclass.  Or I could default to... what exactly?
    . The problem with `Convert a b` is that 'a' needs a type annotation,
      which would make signatures annoying to write.  Normally I don't need
      them because they are the Typecheck val, which already needs to be
      fixed.
    . Or I could have defaults be either a Typecheck val, or
      (Doc, Typecheck val), and then have an explicit constructor for Function
      which promotes various types to (Doc, Function).
  Support for adding or removing time in the middle of a score:
    . Status: this is implemented manually via Cmd.BlockResize, and
      specifically LBlock.add_time and remove_time.  It seems to work, but I
      haven't used it extensively.
    - Add a variant of ^z that moves events below and track children.
    . This has overlap with the idea to have a track as a read-only view of an
      expression.  E.g., the expression would be b1, b2, b3, ..., and the
      view would be to get the CallDuration of each and sequence them.  The
      trick is that it would have to re-integrate whenever the callees changed
      CallDuration.  In this approach, I'd have a separate expression with the
      sequence of calls.  That would then be bound to a track, which would
      then become read-only.  I'd have to edit the original expression.
      . The cmds that change a block ruler could trigger re-integration in the
        same way they would have to trigger the caller resize.
      . Even in this case, I need something to put in for ruler.  I guess I'd
        use 'extract'.
      . It may be more awkward to edit the expression instead of directly
        editing the track.
      Advantages:
        . It would be a specific case of a generalized integrate-expression
          feature, which I'm pretty sure I'll eventually add anyway.  Actually
          I can just add an optional read-only option, otherwise it could be
          integrated as normal.
        . If I lock a whole track, then I don't need some special "time locked
          event", I have a whole locked track.  That seems simpler because it
          doesn't have to coexist with normal events.
        . I don't have to scan blocks for calls, since they are explicitly
          listed in an expression.  Presumably the expression is data, not
          code, so I don't have to do any evaluation.  But maybe I have to
          evaluate anyway to get CallDuration?  But it seems clearer to update
          specific expressions, rather than just scan the entire score for all
          calless and try to mess with their durations.  Also, mixing block
          call events and normal events is not necessarily something I want to
          support... even though I have done it in the past.
      Disadvantages:
        . Another language.  If it's just linear sequence then it's trivial,
          but surely that won't be enough.
        . The whole point of the track is that I can line things up in time,
          and I still want to do that with score blocks.  Why should I wind up
          with a whole new language for that?  E.g. initially it's just
          sequence.  But then I want 'clip', so I need explicit durations.
          Then I want time gaps, so I need start times too.  Then I want to
          express alignment, so I don't have to calculate start times... and
          in any case, those times will be invalid when the callee changes, so
          I need alignment anyway.
        . But the clip problem is something I need to express anyway.  In
          a language I could say "Clip | awak" dur=-1gong, but how would
          I tell a track version that?  I guess it would just not update the
          duration of clipped calls.  In fact 'clip' and 'Clip' could express
          that by setting the CallDuration to the event duration.
      . But in fact I don't need a locked event at all, I can just update it
        on demand, but have no particular requirement that it stay that way.
        I could do a universal thing where block calls get a subtle hue that
        indicates they are 1:1.  Or use event width?
    older notes:
    . I want add a measure, and then automatically:
      . Extend the ruler of this block.
      . Extend or contract the duration of the caller in the parent, moving
        all its events as necessary.
      . Also extend or contract the caller's ruler, if necessary.
      . Renumber the ruler in other callees as necessary, e.g. inverse
        LRuler.extract aka LRuler.inject.

      . All of this ruler resizing would not be necessary if I used
        Ui.event_end instead of Ui.ruler_end for the logical block end.  But
        then I'd need a -- event to mark the explicit end.  And it's just
        putting off the inevitable... I'd still need to extend the ruler, so
        why not make it easy, so now I don't mind doing it frequently.
    . If I have a way to mark a call as "unstretchy" it can try to move events
      below it, or at least highlight if it's not 1:1.
      . Or maybe it should even default to unstretchy, and you have to mark
        stretchy.
      . I could do it with special metadata in the event that could cause it
        to render differently, or by prefixing with a magic character, say '='.
      . The advantage of the magic character is that it's visible and I don't
        need any special editing support, but the disadvantage it that it's
        metadata interfering in notation.
      . Presumably it only has an effect on events with CallDuration, and
        maybe even an error on ones without... but I can't find that out
        syntactically.
      . Maybe the first step is to implement the move later events part,
        triggered by a keystroke (like cmd-z for events), and worry about
        doing it automatically later.
  Integrate from dsl.
    . Status: I think it just barely works, via LSol.edit_new, and
      reintegrate, but not tested and not hooked up to the editor.
    - I tend to use multiple korvai sequences as versions of a single korvai.
      Maybe use index -1 to concatenate them all?  Or have a general way to
      concatenate multiple korvais?
    - validate Block.ManualDestinations from Ui.set_integrated_manual
    - If I put a TrackTime offset into the ManualDestination, I could have
      multiple destinations on a single track.  But then I'd have to also
      know to move things around if they change size, and it seems
      complicated.  Maybe it would be better to put them in their own
      block, and then implement a way to nudge calls when one changes
      size.
    - If I put the destination on its own block, I could automatically
      adjust the ruler.
    - make block version of LSol.integrate_track, where integrate also adjusts
      the block ruler to the right length.
      . I need to understand the tala, not just for the ruler, but to know
        if there's a final stroke.
    - Solkattu realize with an alignment error should still realize, just
      emit a warning.
    - On vim 'gs', output from 'send' messes up the draw.  Maybe bring it
      back to vi and do :echo?
    - Get rid of Korvai index, it gets more annoying as time goes on.  Just
      have separate korvais, and I can tie them together with variable_name if
      necessary.  But I still need a way to distinguish for SourceKey, so
      maybe I still need it but as another tag, added by 'korvais'.
    notes:
      . I'd like to be able to edit e.g. solkattu dsl, then save triggers
        a score integrate.
      . This is also the way to get text language to integrate in general.
      . Also it's visualization for text language.
      . StateConfig can have 'dsl_integrate :: Map Symbol Code', then repl cmds
        to edit them.  This is then haskell, which means I need some way to get
        it into the REPL, and some standard environment in which it is executed.
      . I can actually do this currently but I have to run a repl cmd, e.g.
        LSol.integrate Score.xyz
      . So simpler way would be to hook the editor so it does 'send ...' on
        save.  I should do that first, and think about a more automatic way
        if it's too awkward.
      . The common building block is a manual score integrate like
        integrate :: Symbol -> Track [Ui.Event] | Block Ruler [Ui.Event]
      ? Remind myself about how score integrate works.
        . Manually call LIntegrate.score_block
        . Which sets (source_block, ScoreDestinations []) on the dest block.
        . score_track adds (source_track, ScoreDestinations []) to dest
          block_integrated_tracks.
      . Dsl integration won't have a source track or block.  Instead it needs
        another ID which can link it with the source.  So for code it would be
        defining file or expression.  I also need identifying stacks for the
        generated events.
      . I have to load the module with the dsl.  If that's supposed to be
        per-score then I need to get that into an .hs file and get the repl to
        add that to the targets.  The file should be .hs and loadable anyway so
        I can use ghci on it.
      . But I'll likely have multiple DSLs, so it needs some configurable
        boilderplate, i.e. imports.
      . Two cases: EDSL means it's haskell with a special "prelude", like
        solkattu.  DSL means text with a parser, e.g. Derive.Text.TScore.
      Make this work for solkattu:
        . Make solkattu set Event.stack.  It should have the sollu and position
          as a TrackTime.
        . The score has a link to a module name, e.g. Local.Score.Xyz.  If it
          doesn't exist, create one with the standard set of imports.
        . On refresh, have the REPL load that module, and pull out every symbol
          with the right name, e.g. _xyz.  Each of those should be of Block
          type, and will be used to create score integrate to a block of the
          same name.  I do the integrate for everything, since it will detect
          if there were changes.
        . Figure out how to make the GHC API load a specific module and find
          symbols.  I need to verify their types too.  Trigger like :dsl X.Y.Z
        . Make a Block type, and hook it up with score itegrate, and :dsl.
        . Make solkattu realization retain the original sollu.
        . Add the "dsl modules" score field.
        . Make a REPL cmd to open vi with the file and bind save to the :dsl
          cmd.
  - track calls / track macros:
    . Status: lost motivation after I figured out another solution for
      gamakam, which now uses a t-nn track.  It's implemented all the way
      up to having a spot in Derive.Scopes and special control track syntax,
      but there are no implemented track calls.
      . See also signal-discontinuities.
    - More general and descriptive names for Derive.Scopes and Scope.
    - Implement calling TrackCalls.
      . Overloading 'x' to mean a call to x or a control %x might cause some
        problems.  E.g. title_to_control can't know unless it looks
      . If I just use a symbol there's no way to tell if it's a control,
        pitch, or note track.  So I need to keep the syntactic clues.
      . Maybe control: '!call', note: '> !call', pitch '*xyz !call'?
      . I'd like to be able to abstract control, e.g. '!gamakam', and the t-nn
        is an implementation detail.  But I can't have track calls return
        (Control, d), because that's only control tracks.
      . I could have it set a control with the same name as the track call,
        and then some way to rename it.  But what is that way?
      . Or I could just fake it by returning Score.Control, and pitch tracks
        just use Score.Control, and note tracks just ignore it.
      . It seems awkward that this is simultaneously giving a way to abstract
        syntax and control name, and they don't seem naturally related.  Can't
        I have an orthogonal way to make 'gamak' an alias to t-nn?
    - Write a TrackCall for gamakam4.  ! calls quote the argument and pass
      to gamakam call.  Or I could invert it and use ! for non-gamakam calls.
      Copy pitch calls over.
    . Maybe this is how to do macros: track title is a lookup in
      a track-macros namespace.  If 'name' isn't found, then it defaults
      to '%name' ala LookupPattern.  Track call namespace should also be
      in the CallMaps and Library so it can be imported with modules.
      Also I think it needs note, pitch, and control variants in the same
      way.
    . As long as I'm doing this I can go back to using pitches for
      gamakam, and just copy over from the pitch track.  Not sure if
      I should though.
    . old notes:
      . consider track calls and block calls:
        note_track :: TrackTree.EventsNode -> Derive.EventDeriver
        derive_tree :: ScoreTime -> TrackTree.EventsTree -> Derive.EventDeriver
      . I could use this to implement is-ly and no-ly, and also totally custom
        track types and block types.
  - draw-text-lines
    . I think it's a bit of an improvement for code simplicity, but still has
      an annoying redraw bug.  So it's almost done but not merged.
  - Sortedness tracking for Stream and Post functions.
    . Track down usage of Stream.from_sorted_list, probably most uses are
      bogus.  Stream.from_list and Stream.from_events have to take
      Score.Events so they can sort them.
    . Sorting vensions of Post functions also have to return Score.Events to
      be able to sort them.  They could take another event_of, but it seems
      like there should be a way to compose the mapped functions instead of
      the maps.
    . I should also come up with a plan for deforesting the intermediate
      lists.
    . Order is easy to check with quickcheck.  I could come up with some ways to
      do quickchecks on certain score fragments.  Or alternately, apply
      a standard set of checks: start =0, >0, in callee block, etc.
  - Make BaliScales which are not saih pitu be fundamentally diatonic, not
    just degenerate chromatic.  Or figure out how to simplify the whole scales
    mess.
    - Disallow 4e# in selisir.  And generally accidentals.
      . Validating the absolute pitch is broken for *legong, because I want to
        make sure the relative pitch is in the key's intervals.
      . I could make validation more complicated, but I think not using
        ChromaticScales would also fix this.
      . I don't get an error because the pitch is created, but will evaluate to
        UnparseableNote, which makes an error only on conversion.
      . It's because ChromaticScales reads a relative pitch, and only checks
        for validity once it's absolute, at which point it already created
        a ScaleDegree.  I could either also validate relative, or get rid of
        the fancy ChromaticScales use for scales without modes.
      . Or maybe UnparseableNote should have a msg arg to show what it was?
      . The thing is, I don't want the whole accidental parsing mechanism,
        I just want 7 symbols, and a relative pitch system.
      . So I could have a simplified ChromaticScales which dispenses with letter
        + accidental, and instead just has a unique name for each scale degree.
      . Then I could use 1234567 for javanese-style notation.
      . I'd basically replace the show/read pitch stuff with a hardcoded map to
        RelativePitches.
      - I can't have different pc_per_octave based on key, without parsing
        the key in input_to_note.
    - It would be nice to have a no-keys version of BaliScales so I don't have
      to mess with a fake key in *selisir and *wayang.
      . I guess it's not a big deal, but at least it means it ignores key.
      . Actually it seems like it might be a pain, because then I can't use
        the same Config.
    Why are scales so complicated?
      - Can I make it simpler?  If I were to rewrite it knowing all this stuff,
        what would it look like?
      . twelve: Keys have mode and tonic, so each key has a signature that
        influences enharmonic spelling.  Has accidentals with enharmonic
        spelling, and a layout which says which pitches are skipped, also based
        on the key.  Both the pitches and accidentals are absolute and so
        independent of the key.
      . twelve-k: Like 'twelve', but while pitches are still absolute,
        accidentals are relative to the scale.
      . twelve-r: like 'twelve', but both pitches and accidentals are relative
        from the key's tonic.
      . just: Keys have mode and tonic as with 'twelve', but they affect the
        tuning.  The layout is diatonic in that there are no skipped pitches,
        and hence no enharmonics and accidentals.  Accidentals are supported
        just as a constant ratio offset, so respelling enharmonics will change
        the frequency.  Since there's no per-key spelling, the key is much
        simpler, just a tonic pitch.
      . just-r: Like 'just', except that pitches and accidentals are relative to
        the tonic.
      . raga: Like 'just-r', except with a much larger selection of modes.
        Also, instead of accidentals, there are multiple candidates for
        certain pitches (e.g. ri1 ri2 ri3), where one will be default based on
        the key.  TODO the last bit is not implemented yet.
      . legong, pelog: These have keys, but like 'just-r', they are simply a
        starting note (tonic) and a layout to indicate skipped notes.  However,
        there are no accidentals, and instead each note has a unique name.
        'legong' (but not 'pelog') has a 'tuning' which indicates pengumbang or
        pengisep, and they also have a 'laras' value, which indicates the tuning
        variant.
      . legong-pemade, legong-kantilan, etc.: Like 'legong', but with octaves
        relative to the tessitura of a particular instrument.
      . selisir, wayang:
      . selisir, wayang -pemade etc.: Relative octave variants.
      . belaganjur, angklung:
      misc notes:
        . Simplest is an absolute scale with no key and no octave structure, just
          a mapping from symbol to pitch.
        . Then we have a relative diatonic scale.  This has a key which influences
          the note names, since they are relative to a certain pitch, but no other
          structure.
  - rewrite shakefile so I can disable features like 'im' and not require
    their dependencies for tests, haddock, etc.
    . I'd like to generalize this to a shake haskell build system, so I can
      use it with other projects.
  - Complete Util.PrettyGeneric so I don't have to hand-write Pretty
    instances.
    . Maybe I should fix the formatting bugs first.

TASKS:
  Performance
    . Solve input lagginess when the score is large.
      . Notes for this in ghc-events:
    . Reduce GHC-API memory usage: NOTE [reduce-repl-memory]
    . Look for memory leaks.
    . Make transformers lazy so they can interleave, aka
      map f . map g -> map (f.g)
  Music / design / language:
    . Clean up tracklang type checking with subtypes: e.g. ValType.types_match.
    . Music Analysis: Look for repeats or repeats with transposition.
    . Text score.
    . Solve how timing changes bubble up.  Text score can do it, or maybe
      integrate from DSL (either text score or haskell) or have a purely
      read-only block or track.
    . Simplify scale implementation 'Why are scales so complicated'
    . Something better than ControlFunctions for randomized signals.
      . I might be able to solve this if I can figure how to get literals in
        Sig.Parser defaults to work.  If I coerce to Typecheck.Function
        from signal or a val call, then I can replace with a val call.  The
        problem is that the default then becomes a Function, which means it
        loses ShowVal and hence documentation.
      . See NOTE [fix-control-functions]
    . Im
  Tests:
    . Quickcheck for derivation.
      . Or Midi.Encode_test.test_encode
      . Or Ui.Diff
    . Test Ui.Diff and Ui.Sync.
    . Properly parallelize tests.  Maybe use a Test monad instead of IO and
      make tests pure.
  . fix bugs in Util.Pretty / Util.Format
    . Or use someone else's library... printcess?
      . Looks like it only has one level of indentation.  Also I think it
        doesn't have breaks, it just always breaks on space.  And uses String.
    . Other formatters:
      . https://ocaml.org/learn/tutorials/format.html
      . https://github.com/google/google-java-format
      . https://github.com/dart-lang/dart_style
        http://journal.stuffwithstuff.com/2015/09/08/the-hardest-program-ive-ever-written/
  GUI:
    . Prettier events, smooth scrolling etc.  OpenGL?
    . TrackSignals could use y position and color / transparency.
    . Window management: automatic tiling, window manager configuration.
    . Switch logview and browser to Fl_Html_Display.
  Linux:
    - Increased scroll sensitivity for the scroll wheel.  Or is that an
      X config?

----------------------------------------------------------------------

documentation:
  - strict markdown parser, and extensible:
    . with https://markkarpov.com/post/announcing-mmark.html
    . But not ready yet (no lists or block quotes).
  - Publish haddock with http://documentup.com/feuerbach/standalone-haddock
  - Can I have Util.Linkify check the validity of single-quote links?  Or
    maybe I could run a link checker against the final output.  Otherwise
    'Module.function' references get out of date.
  calldoc: CallDoc:
    - each call should have type (note, pitch, control), so I can see
      what it is after a search
    - collapse control for modules, option to collapse / expand all
      . Haddock:
        <span id=xyz class="module collapser"
          onclick="toggleSection('n.1')">Title</span>
        <ul id='section.n.1' class='show'> ...
    / put anchors on calls and make single quotes link to calls
      . It's not quite so simple because there is module, and then call type.
        So the linkifier would have to understand that structure and search
        for one, or have some javascript, and then it would have to choose
        if there is >1 match.  Too complicated.
    / For call doc, can I group calls with the same doc but different args,
      especially different defaults?
      . Would look like:
        doc doc doc generator
        bind -- name
          args
    - I could go look through arg docs for controls and list all the controls
      that have someone listening to them in a certain scope.

oriented signals
  . This is to get rid of the Derive.C.Prelude.Block.trim_controls hack
  old notes:
    / Block.trim_controls relies on samples, I don't think it can work with
      segments.
      . What exactly is it doing, and why does it work with samples?
      . According to the comment, it's so a block final note doesn't pick up
        controls from the start of the next block.  But it seems like for many
        controls it should.
      . I think the problem is that in an arrival context, a "transpose +1"
        for the whole block is meant to include the final note and exclude the
        first one.  But since controls are always t0<=t<t1, they can't make
        that distinction.
      . But can't I solve the problem more directly?  E.g. final notes are
        effectively -0 dur, so they should get controls from <t.
      . I might even be able to solve the t0<=t<t1 problem with segments:
        have negative duration calls generate negative segments.  Then 'at'
        defaults to before the discontinuity, rather than after.
      . It seems simpler to do a hack for final notes first:
        . Note call trim controls notices when it's block-final, and gets
          constant values from Signal.at_before.
        . Really I do want the controls following the block, but just not at
          t0, though the call may just sample at t0.  E.g. pitch for gangsa.
      . Could I replace ConstantPitch with a general notion of note-constant
        controls?  I already have this in DUtil.attack_sample_note.
      . For pitch I need this to apply to transpose as well, but the set of
        transpose signals depends on the pitch.
      . Ok, so the plan is
        * Augment controls_at with Orientation
        . Signal.at_before is actually wrong for old style signals.
          at_before 2 [(0, 0), (2, 2)] should be 0, not 2.
        . Also, some kind of slicing is happening with the pitches that's
          putting the previous pitch at the same X: [(1, 4c), (1, 5c)]
          . It's an artifact of TimeVector.set.  So isn't it intentional?
          . I guess with Negative I want pitch from Positive, but the
            controls are Negative.
          . Maybe the control points should themselves have orientation, so
            I would specify that the pitch sample is Negative, which means
            it's included in the Negative query.
          . What I really want is for the controls from this block to win
            over the ones from the caller, which is what Block.trim_controls
            achieved.
          . If the notes are all negative, then I don't need cancel, though
            I do need infer-duration.  But I'd still need to pick up pitch
            from at-after, and transpose from at-before.  In this case,
            though, pitch isn't a signal, it should be directly associated
            with each note.  Continuous signals just don't work with this.
            But discontinuous ones do, they are just a bunch of <n<= ranges,
            instead of <=n< ones.
          . What if the signal has orientation, not lookup?  Then pitches
            are positive, and I don't use orientation with
            constant_controls, but put it on t-dia.
          . Negative orientation for signals is only useful at
            discontinuities.
          . I guess that gets into how this worked with deleting samples:
            since samples were all discontinuous, it was assuming there was
            a discontinuity right there.  I could actually get the same hack
            with segments by saying "if there's a discontinuity exactly
            here, then trim the signal."
          . In fact, maybe I should do that, and then look into oriented
            signals later.
        / Add Flags.block_end, and use Negative when at block_end.
        . Can I replace ConstantPitch with this?

Util.Segment: linear: linear piecewise signal: signal-discontinuity:
  . Problems I'm trying to solve:
    . Need to remember to use Signal.set, and provide previous y.  Signals
      should be implicitly flat in both directions, and merging them should
      respect that.
    . Transpose signal resampling should "just work", without needing special
      'at_before' stuff.  Why does it require that now?
      . Because it gets raw samples, without treating them as segments.  So I
        could make unsignal return segments: [((X, Y), (X, Y)]
    . Awkward rules where the sample at 0 sets values before.  Or at least the
      part where it leads to errors when asking for the value at <0.
    . Include shift so I can get rid of Score.Event 'untransformed' nonsense.
      I think the problem before is having to use the shift on all signal
      operations even when it's 0 for everyone except Event seemed over
      complex.  Also that I just want a per-event offset, not one for each
      signal inside.  Though if I extend this to stretch as well, then I don't
      need a separate Warp type.  I don't think anyone except warp would use
      it though.
      . Ideally I could optionally layer it on a signal, but then I have to
        reproduce all the functions.  But I could try to make a minimal API
        in a typeclass, and have the functions be generic.
      . Could I use this to unify pitch and control signals?
    . How much would I solve just be changing (<>)?
  . If I want to replace Environ with Val signals, then I'm back to
    non-interpolated.
  . What would a typeclass + associated type actually look like?
    . It would be like Vector.Generic, only with more specialized access
      functions.
    . Maybe in general, I can give a Segment y type, and an interpolation
      function.
    . But a polymorphic interface is only as useful as the number of functions
      that can be polymorphic with it.  So what could be polymorphic?
  . If I can make signal a typeclass, I should be able to make offset (and
    maybe stretch) a wrapper.  This only works if I can reduce the interface
    to a few things like 'at'.  But I feel like all the various transformation
    functions won't allow that.  They are type specific too.

  Util.Segment:
    / I should put a final sample on for sampled curves too.  Maybe I do?
    invariants:
      / ensure that NumSignal omits redundant samples in a flat segment
        . Use or remove String_test.strip_flat
        . There's no strong reason to care about this, except to avoid writing
          redundant stuff in tests.  It's nice to not do more than necessary,
          but not worth making into an invariant.
      - Also ensure that MSignal.Signal can't get duplicate Xs.
    - Util.Segment winds up with _v vector variants.  Maybe I should make
      a whole new module with no offset, and then if I really need offset,
      make a wrapper for it.
    - Maybe rename Signal.from_sample to constant_from for a higher level
      emphasis.
  - Adding linear hurt performance
    . For cerucuk-punyah:
              max mb  total mb  derive     perform
      before: 142.58  8743.73   5.89~5.98  0.70~0.72
      after:  139.28  9827.79   6.77~6.83  1.18~1.22
    . It seems like the big jump as expected was at 'switch the signal
      implementation from piecewise-constant', but I have to go to 'linear:
      make Segment.drop_discontinuity_at insert an extra sample', since that
      fixes a serious bug.
    . There are:
      * update Derive.Note.extract_track_signal to use new clip_before / clip_after
      * linear: update Block.trim_controls to use drop_discontinuity_at
      / linear: remove yet more unused functions from Signal and PSignal
      / linear: implement clip_bounds, export head and last, misc cleanups
      / linear: in Pretty Signal, put a + in front of positive offsets
      * linear: fix buggy offset handling in Util.Segment
      / linear: add Segment.to_piecewise_constant
      / remove TimeVector.interleave
      / linear: clean up curves and generate ControlFunctions from curve descriptions
      / use ControlUtil.make_curve_call with cf-jump, and add cf-const
      * linear: fix Segment.drop_after to only emit the first sample in a discontinuity
      / linear: fix buggy Segment.concat
      / linear: add various small functions to Perform.Signal
      / linear: rename map_y to map_y_linear and add a map_y that resamples
      / linear: fix buggy Signal.scalar_max, and remove scalar_min
      / linear: fix bug in Segment.map_y, where it didn't retain discontinuities
      / linear: add Segment.num_clip_after
      / solkattu: ...
      + switch the signal implementation from piecewise-constant to piecewise-linear
      / linear: get rid of infer linear in fltk
        ...
      ? linear: make Segment.drop_discontinuity_at insert an extra sample to avoid changing the slope

    . Do a SCC profile to see where the time goes.  Maybe do one before to see
      if something new has come up?
    . Try to get that back.  Maybe the 'clip_before, clip_after' change above.
    . Or possibly look into optimizing vector operations.
    . It looks like the Warp change didn't have noticeable performance
      impact, so that's good.
  / optimize flat pitch segments in PitchUtil.segment
    . These would only show up in PitchUtil.breakpoints, and I only use that
      in a single val call, which I don't really use.

  reimplement:
    - implement Warp.compose_hybrid
    / SignalTransform.c_quantize.
      . It will have to find where segments intersect the quantize multiples.
      . Don't bother for now.

  / If I get rid of constant signals starting at 0, then Tempo.tempo_to_warp's
    constant_val doesn't work, because tracks start at 0.
    . I could move tempo track's first sample to -large, but no I can't
      because it makes integrate take forever.
    . However, with segments I probably could, but I would have to make all
      control tracks implicitly start at -large.
    . Fixed via Segment.constant_val_num from.
  ? Another way to make moving events cheap is to make event controls relative
    to event_start.
    . Surely I thought of that before, but I don't remember why I didn't do it.
    . People looking at controls presumably use Score.control_at, which can
      apply the offset for me.
    . Plain references to Score.event_controls could be error-prone though.
      I'd need a Score.event_absolute_controls, which is effectively
      event_transformed_controls.
    . I think the reason I added the offset optimization in the first place
      was that randomize moves every event.

gamakam:
  . Arvind Krishnaswamy did pitch tracking studies:
    https://ccrma.stanford.edu/~arvindh/cmt/
  gamakam6:
    - Implement suffixes for absolute time: : or ;
      . I want a move to current which is not dependent on the note length, so
        flat notes can be smoother.
      . In generality, this suggests a set of constant time movements.
    - port other tests from gamakam5 as necessary
    - When the pitch track is above, I don't hear midi thru.
      . MidiThru looks above for the instrument, if there is none above, then
        find the first one below.
    - It might be nice to collapse the sahitya track into notes.
      . Maybe just generalize collapse to take the track to the right if there
        is no pitch track below.
      . But I don't want to just merge any note track with the track to its
        right.  If I do that, collapse all will get confusing.
      . I could maybe exclude those from collapse all.
  understand the ragam:
    . I could attach code strings to raga swarams, e.g. (G, "=0").  Then
      automatically add a "default" alias per scale degree and direction.
    . How to make them scale with time?  Something like "=0" can become "=n=n".
      Actually that's incorrect, it should be an optional transition to the
      neighbor, then touch G.  E.g. N might be "=0a".
  - I need some solution for when the beginning depends on the end of the
    previous section.
    . I could write notes after a logical stop, and say the replace whatever
      follows.
    . But this is no good if the section goes to different places.  Really
      it's the combination (A, B) that gives rise to the alternate notes.
    . Sometimes the end of A will be different depending on the following B.
  - promote a gamakam score to verify_performance
  prev pitch:
    . Originally somewhat broken, but broken in more cases by linear segments.
    . Why is prev pitch so hard?
    . Couldn't I solve all of the gamakam previous pitch problems by just
      putting the gamakam track above?  How about some cmd utils to help line up
      with notes?
      . No, because I need to get previous pitch from the previous swaram.
        Remember gamakam is now pitch + t-nn.
    . All I want is the last pitch as it sounds.
    . Why isn't that just the pitch of the previous note <now?
      Because it might actually be the pitch of the current note, just the
      previous swaram.
    . Could I simplify this by always using one note per gamakam, and then
      some other means to join them together?
      . What would that other means be though?  Event duration seems most
        natural since that's what everyone else uses.
    . Putting pitch above actually seems to solve these problems.
    . But it breaks the the until next note hack.  I can get it back by
      looking for the next pitch instead.

  - Integrate notes from the other gamakam: section in here, and unify it into
    one document describing the history with gamakam.
  notes due to linear segments:
    . This breaks '* interleave', which was always fragile anyway.
    . Can I save it with a hack?  It could get more clever, and move the
      end sample: [(0, y1), (n, y1)] -> [(0, y1), (x, y1), (x, y2), ...]
    . Or I could get rid of it entirely, if I can fill the same need another
      way.  That's where I want to have swarams and gamakam separately, so
      I interleave with the swaram track.
      . I could have the gamakams read from the swaram track, but then
        I want to get the pitch even when there is no gamakam, so I don't
        have to put a dummy call on each note.
      . The most direct way might be a track preprocessor that copies over
        swarams, or maybe adds a "!^".  I worry about how this obscures
        the usual rules of evaluation, but ! notation is already sort of
        its own language.  I'd need some special track-level macro call.
      . What if ! in a track call was a macro symbol.
        Control.d_control_track separates those out, and calls them from
        a special namespace.  I think they have to go at the front.
      . Why is gamakam not emitting a transpose signal?  I can transpose
        to another pitch with scale_read and scale_show.  But then what kind
        of transposition?  t-dia is obvious, but some gamakams are below
        diatonic.  Actually it can emit multiple signals via the
        ControlMod hack.  I can try to do everything with diatonic, but
        I do need absolute pitch deviations.
        . Speaking of ControlMod, what would it take to have a control track
          actually emit multiple control signals?
          . I guess it would have to be a new type of track, with a
            [(Control, Signal)] return value.  It's actually similar to
            ControlMod except without biased towards any particular Control.
        . So try a Gamakam5: build fragments of transpose signals.
      . But can I really use t-dia?  How do I represent alternate ga or
        something?  I think the most straightforward way is treat them as
        chromatic notes.  Then it become t-chrom.  But I think I can do
        t-dia for now, until I have that.
      . But now if I have different types of transposition, I can't go from
        one to the other, e.g. +1nn move to -2d.  I would have to flatten to
        an absolute measure like nn, but scales don't give me that.
      . I could get it though, by reducing to NN and doing a diff.
        I think I do need transposed pitches, though.
      . From would always be NN, to would be (Transposition, Step).
      . This all makes it dependent on the scale, it seems nicer to have
        all those functions just emit signals. I guess I can still do that
        if I supply a Transposition -> NN function.  The output gets kind of
        unreadable though, unless I want to emit (Transposition, Step)
        breakpoints, and assume everything will fit into that.  Might as
        well be (Transition, (Transposition, Step)), but now PCalls don't
        really do much.
      . I still need a value for discontinuities though.  It's code vs. data
        again.
      . Oh yes, and prev pitch doesn't work if I'm a control track.  But
        I can get the prev transpose.
      . Another problem is that I have to make it a t-nn track, which
        doesn't make much sense, and any other control calls wind up being
        in t-nn, which doesn't seem that useful.
      . If pitch gamakam is also in a cantrol track, I can't tell it from
        dyn controls.  Really what I want is to be able to write "gamakam"
        for the transpose, and it can set the interpretation of !.  Or even
        use a lookup so I don't need to use !.
      . Maybe this is how to do macros: track title is a lookup in
        a track-macros namespace.  If 'name' isn't found, then it defaults
        to '%name' ala LookupPattern.  Track call namespace should also be
        in the CallMaps and Library so it can be imported with modules.
        Also I think it needs note, pitch, and control variants in the same
        way.
      . As long as I'm doing this I can go back to using pitches for
        gamakam, and just copy over from the pitch track.  Not sure if
        I should though.

      . Which of these would be best for possible future kinds of notation,
        or further extension?

vector performance:
  . fromList doesn't measure the list, it does exponential resizing
  ? Segment.to_samples:
    . Does 'V.toList . V.map f' fuse the map into toList?  It should, so
      'head . V.toList . V.map f' should be efficient.
  ? Do these have the same performance?
    . map TimeVector.to_pair . Vector.toList
        . Vector.filter out_of_range . Segment.to_vector
    . filter out_of_range . Segment.to_pairs
  . I should be able to get fusion if I keep things in vectors in Segment and
    TimeVector.  But to look in the future, I think I need zip, which means
    I need Storable (a, b).  The thing is, since I'm hoping the intermediate
    vectors are fused away, I shouldn't actually use the Storable instance.
    Except of course when compiling without optimization.
  . A Storable that throws an exception would be an interesting way to assert
    that fusion happens.  Surely there are more sophisticated ways though.

synth: im:
  . actually it looks like VST3 SDK now includes VST2 again?  E.g.
    link from https://www.steinberg.net/en/company/developers.html has
    a VST2_SDK in it.  All in a convenient 80mb zip file!
  bugs:
    - Shift-play plays im cache even when the instruments are gone, but not
      enter-play?
      . Properly I should clear out the cache when instruments go away, but
        meanwhile I should be noticing that there are no im events and not
        starting play_cache.
      . Proper MIDI fallback would also fix this.
    - If I delete an instrument and rerender, the old one is left around.
      This is because the cache won't delete existing files.  This will be
      fixed by making a new cache dir instead of just copying into the
      existing one.
      . I should be able to cache instruments that don't change.
  cleanup:
    - put ScoreTypes.Instrument and ScoreTypes.Control in a Shared.Types so
      im and seq can use the same types.
      . On the other hand, maybe they should remain different.  Synth Control
        at least is different in that also includes pitch.  Also Instrument
        is a score-only.  Even though it winds up in Note.instrument, it's not
        really in its original context any more.
    - I can maybe also just replace unchecked_control with Control, and
      make both Instrument and Control have checked_* constructors.  I can't
      really enforce Id.valid rules, except at score parsing time.
    - Also move callers from Score to ScoreTypes.  Can I give it a shorter
      name?  Base types modules should have short names.
  overview:
    * Cmd.Performance will serialize im notes and start the binary.
    * sampler-im or faust-im will read the notes and render wav files for each
      instrument.
    * Cmd.Play.from_realtime can emit the im protocol from Perform.Im.Play,
      which will mix together the unmuted instruments, starting at the given
      time.
    - Im instruments should have a midi thru-like preview sound.
      . This doesn't have to be performance-level of low latency,
        probably < 100ms will do.  Still, the lower the better.
      ? Experiment with how various latencies feel, so I know my target.
      possible designs:
        parallel MIDI:
          . Assign a parallel MIDI instrument for thru.
          . All I get is the right pitch and possibly similar instrument sound.
          . Probably in practice I'd just have a single MIDI instrument with
            a neutral sound.
        hybrid im and MIDI:
          . A compromise would be a general mechanism to render samples, and
            then feed that into a realtime sampler.  Of course commercial
            samplers can do that but would insert a lot of manual work into
            the process.  So maybe I can write a minimal MIDI VST sampler.
          . All it needs to do is play a sample with a given pitch (pitch bend
            and pitch) and velocity.
          . For this, I need to prepare each instrument by rendering a set of
            example samples.
          . I don't want to have to encode notes as MIDI, so just have
            play_cache open a socket, which takes a filename and pitch and
            immediately plays whatever it gets.  All I have to do is teach
            play_cache to resample and maybe scale volume.
        pure im:
          . I have to give a single Note to the im synthesizer, which then has
            to stream to the VST, which has a socket to immediately play
            samples.
          . I might have to run im synthesizers persistently to avoid startup
            overhead.
          . Presumably I also have to ensure they use a sufficiently small
            block size to get that first block out quickly.  Since I'm not
            doing realtime control, I don't actually care about the rest of
            the blocks.
          . This is more complicated, but is accurate for the instrument:
            I get the right sounds so I can e.g.  see how sampler-im picks
            samples in realtime-ish.  However, if I go this far, it might not
            be that much more work to go for the full realtime interface.
        realtime interface:
          . This is basically try to turn im into a realtime interface.
          . The difference with the previous is that I'd also support realtime
            control signals.
          . The reason to want this is that I could explore instruments
            interactively.
          . I would probably have to take MIDI or OSC, run the im synth
            persistently, and either stream to the VST or directly to audio
            out.
          . I'd have to plan out a general purpose interface.  Synthesizers
            that use knowledge of the future would have to be adapted to not
            having that.
    + incremental rendering:
      . Overview: Karya has to emit damage ranges, and the synth has to
        rerender just those sections.  The cache becomes a sequence of wav
        files, which play_cache concatenates as it plays.
      . Propagate score damage up to the im perform step.
      . Instead of writing all notes as one big chunk, only replace the notes
        that changed.  I'll need some kind of time-indexed data store for
        this, possibly just a directory of files with timestamp names.  The
        main thing is that it supports delete and insert a time range of data.
      . Im synthesizers get (instrument, time_range) to rerender, and only
        read and render the Notes in that range.
      . Similarly, the wav cache also needs to be time-indexed to replace the
        specific chunks.
      . This means the synthesizer needs to be able to segment its output.
        . For faust-im, I can store the current state with each chunk, so it
          can restore that state when restarting at that time.
        . For sampler-im, I might want to take the same approach, only the
          state is the currently sounding samples and their offset.  If
          there are effects like reverb or filters then I save the state in
          the same way as the faust stuff.
    - Atomic cache replacement.
      . Im synths write to a new cache dir instead of modifying the existing
        one.
      . If they're doing an incremental rerender, then hardlink over the
        unchanged outputs.  If there are a lot, maybe I want to symlink
        directories of unchanged instruments, but then GC is more difficult.
        Still, I can GC offline so performance is not such a concern there.
      . When all im synths complete, move the new cache dir into place.
        Presumably I can just use a serial number.
      . Each time play_cache plays, it chooses the latest cache dir.
      . I'll need some way to GC away the old ones.  If it's all hardlinks,
        I can just delete the old ones.  play_cache can do that itself on
        stop.  If there are symlinks I need something fancier that moves
        the files instead of deleting, but that should be relatively easy
        since it's a fixed directory structure.
      . The synth generates a new cache dir, and play_cache GCs the old one
        when it stops.
  performance
    - Profiling for time and space.  It should take constant space.
    - fast serialize / deserialize
      If I'm going to serialize Notes, then serialize / deserialize should be
      fast.  But Data.Binary is not fast, at least according to dons CBOR talk.
      . I'd like to be able to directly write and read control signals, e.g.
        send the pointer to the OS write() call with no intermediate steps.
      . Or I can map directly with vector-mmap.  For that I need to record the
        offsets in the file.
      . On the other hand, if I'm doing incremental rerenter, then it's not so
        critical.
  incremental rendering:
    hash and checkpoint based rendering?
      . I can skip rendering a block if the note hash and state are the
        same.
      . Compare Note hashes with checkpoints.
      . Later I can use track damage to narrow the range down to a block,
        but I'll need hashes to see what to rerender within the block.
      . Also, I need to compare states to render due to state, e.g. string
        energy.
      . For cheaper instruments, especially realtime ones, it might be
        cheaper to just rerender, than to check hash and state.
      . Also I may never get back to the original state, so it may be
        pointless comparing all those states and hashes, just rerender the
        rest of the score.  The problem is that I don't know when the state
        is "close enough".
      . This implies that any modification winds up rerendering the rest of
        the score.  So maybe I should take the MIDI backend approach, and
        render on demand, but ahead of the play point?
      . But this means I have to be real-time or greater, all it does is
        eliminate the latency problem.  And since I could start playing
        anywhere, I don't know where to render to.  MIDI doesn't have this
        problem since it's definitely faster than realtime, doesn't have the
        stateful thing where a change invalidates everything afterwards.
      . And while faust state may never sync up again, I think sampler
        should be able to, as long as I leave reverb and effects out of it.
        That means I have to do those realtime, or maybe just ignore their
        state, at the cost of discontinuities at the join points.
        . Actually as long as reverb and effects are deterministic, why
          shouldn't they line up again?

    - Propagate score damage up to the im perform step.
      . I have to change it from ScoreTime to RealTime though.
      . By the time I get to Performance.evaluate_im, perf_damage is empty.
        Maybe I have to stash the old damage?
      . Do I need to keep Derive.state_control_damage?
      . Then there is Derive.state_score_damage, from the caller.
      . Since ControlDamage is inferred during derivation, I think I need to
        collect it in Collect.  At that point I may already have RealTime.
      . I think I can do it in the note track deriver, store
        (TrackId, Ranges RealTime), which is the union of state_control_damage
        and state_score_damage.
      . Of course the fact that I'm evaluating the track at all means I missed
        the cache.  I can't just emit the track range though, because then I'd
        always just get everything from the top level.
      . I want to only emit damage for the ranges which are not above block
        calls, because the block call may have a tempo which modifies the
        range.  Control damage may also be expanded, but since it's always an
        expand, redundancy isn't such a problem.  Still, inefficient.
      . So, that's a problem.  Ultimately, it's the Score.Notes that matter,
        but if I just emit damage for rederived Score.Notes then I miss
        deleted ones.
      . Ok so since track is the lowest cache level, eventually I hit a track
        which is a complete miss.
      . If no damage, then hit, nothing is evaluated.
        If damaged, then evaluate, but that block or track in turn may hit
        other caches.  So maybe I want to damage the whole track range, but
        then subtract out the hit ranges.  Since I always rederive the root,
        actually the whole thing is subtractive, so I might as well just
        collect *undamaged* ranges, and then invert it.

      . This damage informs what note ranges I serialize and replace on disk.
        I also write them to a per-root file so the synth knows which have
        been replaced.  This also has to accumulate in case multiple edits
        happen before a synth completes successfully.
      . Damaged chunks will wind up being at the track level, which should be
        fine for just serializing Notes, but if synthesis is expensive I may
        want something more finely grained.  If I break the note serialization
        into time range chunks, I can store hashes of each file and the
        synthesizer can then skip ones whose hash hasn't changed.  This is
        kind of a time-based memoization.
      . I need synthesizer state in the per-chunk metadata anyway, so it would
        look like (InputHash, State).  Compare the InputHash to the current
        file contents, and if it differs, run the synth with the given state
        to make a new file.
      . At this point, it's likely that the State for the next chunk has also
        changed, so this might lead to evaluating the whole rest of the piece.
        I could either accept that (assuming most edits are at the end), or
        try to minimize it by allowing a "close enough" States to be
        considered equal.  What exactly this is requires internal synth
        knowledge, and it might be hard to figure out if the state is a bunch
        of faust-generated caches.  I could assume the values have a vaguely
        linear effect on the output and just do approx equal by eta.  It might
        be ok if there's a slight discontinuity at the transition just for
        auditing purposes.
      . If I'm rerendering asynchronously, especially if I do the "evaluate
        the rest" approach, I might want to preserve the work if the rerender
        is killed.  Instead of writing and updating the whole output cache,
        I would replace chunks atomically, and if the synth is killed, rely on
        the damage and memoization mechanism to notice that the bits I didn't
        get to are still dirty.
      . I should be able to play past the rerender point, presumably there
        would be a discontinuity and then all would be well.
      . In fact, if there will be a discontinuity for both this approach and
        the "close enough State" heuristic, and I want the effect of the
        heuristic without the fussy per-synth heuristic and "permanent"
        pollution in the output, I could just stop rerendering once I get
        sufficiently past the end of the damaged range.  If the problem is
        battery use, I could stop entirely, if it's interactive latency
        suffering due to contention, I could bump up the nice.  Unlike the GHC
        runtime though, the OS should be pretty good at prioritizing
        interactive processes over background ones.
      . All this is making me think I should remain with the single mutable
        output cache idea instead of writing a new one and atomically
        switching to it.

      . One thing is that the Derive.Cache is only down to track level.  But
        I'd like to know exactly where on the track is the damage.  That's
        basically the ScoreDamage.  The reason I can't just directly use
        ScoreDamage is that I also need to take ControlDamage into account.
        But I don't want ControlDamage directly, I want the ranges of notes
        invalidated by it.  Hence using the cache.
      . Maybe I can have the cache emit the exact range, even though it's just
        checking if it overlaps with the cache.
      . But that doesn't work if I'm doing the inverse thing, where I remember
        the hits and then invert it.  Why am I doing that again?
      . Actually, never mind all of the above.  This damage is just for
        re-emitting Notes.  I can do a separate per-block cache to do
        a minimal rerender.

      . Ok, so the plan is:
        * Derive.Cache marks that bits that hit the cache.
          . That's already in logs, but I should stick it in Collect.
          . Maybe as a side-effect I can get rid of the log parsing for cache
            stats.
          . For hits, I collect (BlockId | TrackId, Ranges RealTime).  I can
            collect just as a list and merge them later, or merge them
            in-place in Collect.  Eventually what I want is
            Map TrackId (Ranges RealTime) and count of hits (for logging).
            It would also be nice to have the cached event count, since
            current logging has that.
          . If I switch to putting Collect in LEvent, then I think this kind
            of question becomes moot.  Also I should be able to collect into
            a list via cons, rather than (++) on subtrees.  I think that's
            equivalent to the dlist transform, in some way.  Anyway, this is
            support for Collect in LEvent being worth doing.
        - Perform.Im.Convert inverts that and writes it as damage.
        - Write a disk-backed time indexed DB.
          . Implemented as a directory with time-stamped files.  For
            simplicity, put each note in its own file, but maybe I'll want to
            combine them later.
          . Not sure though, surely modern filesystems can handle this fine?
          . But if I'm not doing incremental write at the moment, then why do
            I need this?
        - Once this stuff works, add misses to CacheStats, and replace the
          log msg parsing hackery.

        - But first: make render incremental.  I need to do the whole save
          states thing for this.
    sampler-im:
      . save samples and positions, along with resample state.
      . Or, since samples are all independent, rewind to the beginning of
        each overlapping sample.  But to remove the samples from the old
        output, I have to output each sample individually, at which point I've
        just moved the sampler to realtime implementation in play cache.
      . For samples maybe that's actually reasonable.  And I just have to mix
        in realtime, sampler-im is still picking samples, resampling, applying
        envelopes.  Still, it wouldn't work great with really long samples.
      . So try true chunk-based incremental first, and see how hard it is.

      - figure out how to save libresample state
        . there's src_clone, but I think I just need the size?
        . I have to fork the library:
          https://github.com/erikd/libsamplerate/issues/40
      chunk incremental:
        . Currently I just map noteToSample notes.  Instead I want to iterate
          over chunks, and only render if the inputs have changed.
        . What if I just say inputs are the set of notes overlapping?
        . For each chunk, hash notes in scope and compare to saved hash.  If no
          match, then write the hash and write the chunk.
        . Then I need to switch to chunk-based rendering.  How?
        . Segment input notes into the groups in scope each chunk: [[Note]]
        . I can hash the [Note] and that's the input.  If it matches I just
          go to the next chunk.  If it doesn't match, I need to render the
          chunk.
        . For this, initialize the state, which means each sample and offset,
          along with the resample SRC state.
        . This seems maybe hard to reconcile with streams, since they have
          implicit state inside.  What would it look like without streams?
          . render prevState@(srcState, offset) sample = do
              Resample.setState srcState
              write chunkSize $ Resample.resample srcState (ratio sample) $
                File.open (offset sample + offset)
        . Maybe faust-im is easier, since they both have state, but faust uses
          only one channel per instrument.
          . I can write state and sample chunks easily enough when writing, but
            the tricky thing is to resume in the middle.
          . I need to initialize the streams, so they start with initial state
    faust:
      notes:
        . instrument stream has to take initial state, and return it at the end
          . What to call chunks?  Sections?  Checkpoints?
        . I could just call once for each section, but it seems wasteful to
          save and restore state each time.  I want to call Resource.allocate
          and Resource.release only when necessary.
        . I could also put save state during the stream, then Audio doesn't
          need a return value.  It needs to stop on its own, I guess when it
          detects that the state is the same.
        . But this is pre-mixed?  I guess for faust each patch is a single
          audio stream, and if I have multiple voices then I need to save
          state for all of them.
        . In fact, there may be multiple stateful things in the stream, e.g.
          filters and reverb, so I need some way to collect all the states
          together and checkpoint in one place.  Also I have to know who
          emitted those things, so when I reconstruct the graph, I can pass
          the right bits back in.
        . So the expression would look like:
          . writeCheckpoints state dir $ reverb reverbState $ faust faustState
            where
            state = State { _reverbState :: Bytes, _faustState :: Bytes }
            faustState = lens _faustState state
            reverbState = lens _reverbState state
        . I guess the state writing has to be in writeCheckpoints, which means
          it has to somehow ask for it.  If I put 'state' in an mvar, then it
          could send a signal to get them to update their fields,
          at which point writeCheckpoints could serialize it.
        . Alternately, I could stream state with every chunk:
          Stream (Chunk, State), and each participant updates its own field.
          Getting state should just be a pointer, no copying needed.
      either:
        / Generalize Audio to AudioState, which streams (Chunk, a).
          . I can lift audio transformers via 'first'.
          . Actually, it's NAudio that needs that.  But then I interleave to
            Audio, so do they both need it?  Bother!
      or:
        * Pass an IO action to each function to update a State with the
          current state.
          . writeCheckpoints can then look at it after getting a chunk for the
            current states.
          . I don't have to send a signal because if getting state is
            copy-free I can just do it on every chunk.
      * implement writeCheckpoints
        . How do I control chunk size?  I know faust blocks will be
          a multiple of Audio.chunkSize, so I might as well make a multiple
          of that, and then accumulate until I get >= checkpoint size, then
          write out a checkpoint.
        . Or I could just set that to faust chuck size, why not?
        . I control that by setting controls chunk size, which in turn is
          Audio.linear, which is min chunkSize nextBreakpoint.
        . But I did want to make Audio.linear use a constant chunk size, so
          I don't have to reallocate in Audio.nonInterleaved.
      + write [Note] hash with each checkpoint
        . Only calculate the hash when the [Note] changes.
        . How about I just store a hash with each Note, then I can remove from
          the set without recalculating too.
        . If I want to write notes incrementally anyway, why can't I use this
          for rerender instead of hashes?
      - continue from checkpoints
        . Find the first chunk where the hash doesn't match
      - tests for FaustIm
        . It's easy to test the pure functions
        . How to test e.g. incremental rerender?
      - reaper crashes when playing back recorded MIDI
        . Can't reproduce it now, maybe it only happens when I have a audio
          "stem" track.

  - I think I want to switch from by-instrument muting to by-track, because
    that's what the UI is.
    . And it's more flexible, I can put multiple instruments on one track,
      or split a single instrument across multiple tracks.
    . The track enforces non-overlapping notes, but the faust implementation
      assumes non-overlapping instrument notes.  To make faust line up with
      tracks, I'd have to allocate by (TrackId, Instrument), then mix together
      all the instruments on the track.
    . I think the sampler can go by-track without further hassle, since it
      doesn't have state across notes.
    . Also, I don't trust using namespace/ident as a unique name for a block.
      Lots of scores have the same namespace, and while it sort of defeats the
      purpose of the namespace, that's what happens.
    . If I use the filename, it has to be the complete path though.
    . Fixing namespace is another problem.  If it's not serving its purpose
      I should get rid of it.  See fix namespace:
    . Wait, how does this even work?  It's the bottom track for the note, but
      do I need block?  I think technically yes, because UI mutes are
      (block, track).  So render blocks are marked with both, and the midi
      mute msg has to include both.
    . Ultimately this is because note damage is per-track, which means the
      note storage should also be per-track. Of course that doesn't mean
      muting has to be per-track, so I guess this is sort of orthogonal.
      But it does seem more useful than per-instrument.  But since it's
      orthogonal, maybe I should put it on hold for now.
    . Also, is this overkill just to save time writing Notes?  That's not even
      the expensive thing.  The point is to make rendering audio incremental,
      and I don't need damage for that, I can just memoize.
    . Having explicit damaged ranges would let me skip serialization and
      checking for the majority of the score, so I think I will eventually
      want that.  But I can probably do without in the beginning, if I get
      incremental audio.
  audio:
    make Audio.linear more efficient
      - reuse buffers for flat signals
      . E.g. [(0, 0), (1, 0), ...] should just be Signal.constant 0.
      . Various functions like Audio.linear go through some hassle to create
        constant chunks efficiently.  But it still doesn't reuse buffers for
        constant segments in the middle of a sequence, which may be pretty
        common for a sparse instrument.
        . Of course for the sparse instrument I want to detect the gap and
          deactivate then anyway.
        . Maybe I should switch back to Chunk Vector | Constant Frame Float
        . This would subsume Chunk | Silent.
        . I stopped doing that because it was annoying to handle in Resample,
          but why can't I just map through a Chunk -> Vector if I don't want to
          deal with them?
        . And even if I deactivate the instrument during gaps, I need to
          represent them, so I still need some kind of efficient Silent for
          NAudio.
        . Ultimately I want to be able to have a faust instrument with a control
          which is constant, and not really pay for it.  So faust should be
          seeing the same buffer too.  Since I reuse Vector buffers directly
          I think this should already happen.
    - integrate freeverb for reverb and filters
      . Or why not just use faust integration?  I think it has the same
        algorithm?
  play_cache: PlayCache:
    - Log on a separate thread.
      . Ideally I would accumulate the msg in a static buffer, then copy it
        into a ring, and the logger would then pull it off the ring.
      . Maybe I don't actually care though.  LOG is for debugging, and
        eventually I should be able to turn it off.
    - The im/ directory is fundamentally global, since PlayCache hardcodes
      a single path.  It could be theoretically configured, but I'd probably
      have to do it manually via some kind of VST GUI, and save in the VST
      preset mechanism, and it sounds like a lot of hassle.
      . Or I could send it over via MIDI, but that kind of state always gets
        out of sync.
  sampler: sampler-im:
    - support Control.volume
      . Currently dynamic is exactly the same though, so I just multiply them.
      . Will dynamic ever be different?  Only if I implement filters and
        envelopes and other synth type things.
    - I should be able to optimize a constant envelope or pitch over
      min sampleDuration envelopeDuration.
      . This might be valuable since many samples could have a locally
        constant pitch or dyn.
      . I can't do it at the score level, because I don't know the decay, but
        for samples I do.
      . See audio:
    reyong:
      . samples are: $nn-$lowVel-$highVel-$attrs+v$variation.wav
      . I'll want a tuning mode to figure out actual pitch.  Or maybe I put in
        the ideal pitch, to reflect instrument variation.  Of course I can
        easily insert that back in, so lets go for accuracy.  The instrument
        can define deviations.
      . I need the same thing for dynamics, but there isn't such an absolute
        measure.  But I can match all in one group to each other, then go pp
        to ff to verify a smooth sounding range.
      . Filenames should use the symbolic metadata:
        $pitch-$dyn-$articulation-$variation.wav ==> 4e-mp-open-1.wav
        Or $oct;[12356]-{0pp, 1mp, 2mf, 3ff}-open-1.wav if I want to sort by
        (pitch, dynamic).  And if I ever have saih pitu or pamero samples then
        ioeua won't work anyway.
      Pitch calibration:
        . Group samples by pitch, pick a representative, then render
          a sequence against a test tone.
        . Or I could do it in realtime with a reaktor patch.  Or do it the
          other way: loop the note, and then adjust the test tone.
        - Make a reaktor patch first.
      Dynamic calibration:
        . Alternate reference sample with the testee, adjust testee until they
          sound the same.  Record the negated number as the offset.  Reaktor
          should have a dB scale fader.
        . Consistency is most important across samples that will alternate:
          . Calibrate variations against v1.  They should already be close.
            (pitch, dyn, articulation), variation
          . Calibrate similar articulations: [open, mute+*], [cek+*]
            It's probably hard to calibrate dissimilar ones, but they should
            represent the same logical dynamic.
            variation=1, (pitch, dyn), articulation
          . Calibrate across pitches by articulation:
            variation=1, (dyn, articulation), pitch
        . The dynamic scale should be smooth.  Per (pitch, articulation) I
          play short clips from pp to ff and listen for jumps.  Then adjust
          the sensitivity to dyn, which is the slope of the scaling curve, or
          dB multiplier from the distance from the center point.
        . I'm assuming I divide the dyn signal into uniform sections where
          each dyn level is nominally at the center.  I could just do
          1/dynCount, or I could bias towards mp and mf, under the assumption
          that extreme dynamics are rarer and I want to save the timbral
          changes for that.
        . I still want to avoid sudden timbral transitions at regular
          dynamics.  I can ameliorate some of that by randomizing dyn, but
          that also should change perceptual dynamic.  So I can also have
          overlap between each dynamic range, and include them in the sample
          choice set with a weight according to the depth of overlap.

        Try absolute measurement?
          . The above is a complicated multi-step process, and since it's all
            relative I worry things could get off from each other depending on
            (arbitrary) choice of initial reference.
          . I still don't really trust automatic normalization, but maybe
            I could do perceptual normalization manually by picking a midrange
            sample and then adjust everything to that.
          . Or maybe automatic normalization was ok after all, just the
            instrument I put together had a mis-adjusted dynamic response
            curve.  The problem was that quiet samples were made too loud.
          . Or it could be that normalization linearizes the dynamic, when
            they're actually not.  Since I lose the original level, I could
            wind up with samples not ever overlapping their original level.
          . At least with the manual but absolute approach I can retain the
            original dynamic, and thus have a rule like only attenuate, never
            amplify samples.
          . Actually, that might be hard.  I'd have to pick the softest within
            each group and adjust everyone down to match.
      . Damping rules: +mute damp everything, all others overlap.
        . When a +mute damps an +open, it should actually damp very slightly
          before.
    wayang:
      . Same situation as reyong, except I also want to fade out based on
        duration.
      . Or model it as a hand-mute, which doesn't have its own sample.
    guzheng:
      . Everything rings except when explicitly muted.

    - The sampler could render per-track since each note is independent.
    - bind to rubberband library for pitch change without time change
    - convolution
      . What are the options?  jconvolver, ...
    - integrate faust effects for reverb and filters
    features for an actual sampler:
      . see doc/dev_notes/synthesizer
      . Intrinsic pitch independent of the pitch curve, which influences
        sample selection.
      . Intrinsic velocity for the same, independent of volume curve.
      . For a given pitch and velocity, generate a set of candidate samples.
        . Who decides on the sample?
          . I want this to be deterministic, so that it's driven entirely
            by EnvKey.seed, but not necessarily put the whole sample selection
            logic in karya.
          . On the other hand, why not?  Then the sampler has individually
            addressed samples, and I ask for each one by name.  Karya has access
            to higher level concepts like intrinsic pitch.
          . I can put the code physically in Synth.Sampler.PatchDb and still
            link it in to karya.
        . Each candidate has a goodness of match weight, so I can optionally
          borrow from a neighboring pitch or velocity, but with lesser
          likelihood.
      . Rules for automatic damping.
        . For drums I can use the existing mechanism: Samples are in groups,
          and each group is stopped by a set of groups.
        . For gangsa reyong etc., it's the same, where each
          (pitch, articulation) is a group.
        . For strings, I have a set of open strings, and I have to merge pitch
          signals on each open string, as with Ness.Guitar.  Damping the
          string when it's played again would be like plucking, not damping
          would be like striking.
      . Recognize sequences, e.g. nakatiku.  Then I'd also have a "speed" axis
        to pick the closest speed and use rubberband to fit.
      . I could also use rubberband pitch shifting instead of resampling.
      . Per-patch signal network so I can incorporate faust effects.

      . Problems to solve:
        . Intrinsic pitch, used to select the sample.  I can use Note.element.
      . Write down patch description for reyong, and mridangam, so I have a
        concrete place to start.
  faust:
    - faust-stk/bowed.dsp?
    - Compare timing with pre-input signals.
      . In general I should set up performance tracking for faust-im and
        sampler-im.
    - Suspend instrument rendering if gate and signal goes to 0.
      . Maybe I need to bring back Audio.Chunk for this.  Or V.empty in the
        output NAudio?

    - follow up with Yann about extending inputs with metadata
      - Add defaults: default=x:Doc doc doc.
        . Use this when no signal is present.
    - Maybe constant controls could use UI controls, then I don't need to fill
      up the buffer.
      . But then I have to deal with two kinds of controls.
      . And I can just set constant buffers and leave them.
    - Extend the guitar single string model into a multi-string instrument.
    - Figure out decay time instead of hardcoding it.
      . How to know when to drop notes?  I think I have to use a heuristic
        like >1s of audio under a threshold after note off.
      . I think this has to go in the driver.  Implement a gate signal, and
        the driver renders until the output gets low enough and gate is 0.
      . For instruments that play multiple notes, I can use this to suspend
        processing.
    - Instruments with explicit voice assignments (e.g. strings) use Attribues
      to assign the string, and create a set number of Instruments which are
      reused.
      . Actually I should use Note.element, since it's exclusive.
    - MIDI thru for im instruments.  Tie to a MIDI instrument for thru.
      . If I support faust controls, I can reuse existing OSC or MIDI bindings
        for an accurate thru.  But I'd have to build the faust library as a
        VST and then have some way to address it.  MIDI would be more
        convenient for reusing existing thru, but OSC could be more convenient
        for communicating with the thru-VST, so I could just address patches
        by name and I don't to fuss with MIDI channels.
    support faust ui controls:
      - Store persistent buffers in Instrument.
      - convert to standard control names:
        . Convert pitch NoteNumber to freq Hz
        . vol -> a special control that always multiples output volume
        . amp -> gain
        . note-on + duration -> gate
      . If I use GUI elements for controls then they update at "control rate",
        which is probably enough actually.  It also means I can reuse the GUI
        controls.
        . But faust has to resample those to a-rate anyway, so if I use controls
          I do that twice in a complicated way and add some latency, for no
          other benefit.
        . Wait and see if interactive GUI experimentation plus compatibility is
          worth it.  Also MIDI is "GUI."  Probably yes.
        . UI metadata like [key1: val][key2: val] winds up as calls to
          ui->metadata("key1", "val")
    cleanup:
      - Put find_sample into a TimeVector.cc library.
    plan:
      . Faust has a bunch of *.dsp files.
      . shakefile runs faust to generate .cc from the result, and then collect
        into a map of (name, *dsp)
      . Export a Load function that introspects all of those for the inst db.
        If there is karya code, it gets attached by name just like Sampler.
      . faust_driver loads Notes, and maps PatchName to dsp pointers.
      . Based on patch config (polyphonic, strings, etc.), allocate a certain
        number of dsps by cloning them, and allocate Notes among them.
      . Call compute dsp startFrame endFrame controlsp outputp for each time
        range, and mix the output into a wav.
      ? How does FAUST handle global things like a reverb bus?  I guess I have
        to pipe around the samples myself.  But what if you have multiple
        strings with resonance?  I guess it has to have inputs for each one,
        as one giant list of input channels.  But since they're all
        interleaved samples, I can't just leave some empty, or not easily at
        least.
        . A polyphonic instrument could export controls like pitch-1 pitch-2
          etc.  But does it know to turn off the ones that aren't in use?
      ?  Where does the state go?  I.e. how do I save and restore energy in
        strings, etc?
        . It looks like the state winds up in instance variables, so I should
          be able to just save those.
    . https://ccrma.stanford.edu/~rmichon/faustDay2017/
    . http://faust.grame.fr/faustplayground/

  things to change with faust:
    - Use const on const methods:
        getNumInputs(), getNumOutputs(), clone(), ...
      . I have a patch for this but it will likely be rejected because it will
        break subclasses that don't declare const.
    - const on inputs:
      compute(int count, const FAUSTFLOAT** input, FAUSTFLOAT** output)
      . Same deal, might break subclasses.
    - Have a way to save and restore state.  E.g. stick instance variables in
      a bytestring.
      . I think the way to do this is put state variables in a struct inside
        the class.  Then update all variable references to state.x.
      . It's too annoying to edit C++, especially heavily OO-pattern faust
        C++.  I just used the C backend and wrapped it in my own C++ class.
    - Provide access to input signal names so I can get rid of the awkward
      declare thing.
      . Talked with Yann about this, seemed receptive.  Probably have to
        remind him, or implement myself.
  csound:
    . Use csound-expression?
    . writeSnd "A.aiff" $ setDur 10 $ osc 440

  cache / incremental rerender:
    notes
      . I want the sequencer to only send the damaged range, but the synthesizer
        will have to rewind to the previous chunk boundary, since it can't just
        put every note in its own sample.  I suppose a sampler could actually do
        that, but presumably physical models couldn't.
      . Though actually a model would need to save its state at chunk
        boundaries, so if I go per-note, then I wind up with rendering each note
        separately, with a header with the model's state at start time.  But
        overlapping notes would influence each other, so it would have to be
        chunks of overlapping notes.  Of course it's not guaranteed there will
        be a gap, so it would have to break anyway over a threshold.
      . This is all to say that the cache chunks are synthesizer dependent, so
        it needs access to all the serialized notes and can rewind as much as it
        wants.  If notes are saved individually and indexed by time then I just
        need to re-save the damaged ones and either send the time range or infer
        from file timestamps.
    - Include DamageRange RealTime RealTime in the notes dump.
      . This is assuming I always serialize all notes, but I'd also want to do
        that in chunks.  But I would have to expand the damage range out to
        all overlapping notes, which is not great if there's a drone + control
        and you modify the control in the middle.
      . I should just have to emit the notes with overlapping damage, but only
        rerender the time range.
      . Say I make each note is its own file:
        <start-time>-<instrument>-<voice>, where voice is just a number for
        otherwise overlapping notes.  If there's damage from s to e, I get
        the set of overlapping notes.  I delete everything in the damaged
        range, all all (start, instrument) at the times of overlapping notes
        before the range, and then write overlapping notes.
            |----------->|--->
                |--->
                |--->
                XXXXXXX damage
        . This is like Ui.Diff, except that it's RealTime and for
          Score.Events.
        . I also need to turn ScoreDamage into RealTime.  Maybe not trivial?
      . Actually first let's not bother with incremental, and just rewrite the
        whole dump each time.  The real saving is in not rerendering audio.
    - synthesizers break output into chunks of n seconds.
      . Chunk = (startTime, InstrumentState, samples)
      . InstrumentState = Map (Instrument, Voice) DspState
      . Voice = Int -- assigned by polyphony, but how can I keep it stable?
        . For unlimited polyphony instruments, it doesn't matter, since it
          doesn't affect the output.  For limited voice, I just map it to
          different instruments.  So no Voice needed.  The difference is
          whether I allocate a new instrument for every note or not.
      . DspState = ByteString -- raw serialization of dsp class.
      . Or I could do a memoize thing where I memoize
        (startTime, Instrument, Controls, DspState) -> Samples.
    - PlayCache can sequence multiple .wav files.  The filenames need to have
      a timestamp so it can know how to seek.
    * As PlayCache does fancier stuff, maybe I need to put the sample
      streaming into a separate thread.
  . If there is only one cache mutated by the synth, then a play in progress
    will be spoiled by a new render.  I can fix this by making a new cache
    each time, and hardlinking the unchanged entries.  I can remove the old
    one if the play is stopped and there is a newer one, so this could be done
    by the PlayCache vst.
  more efficient Perform.Im.Convert
    - Trim signals.
    - I can probably serialize more efficiently by just mmaping the signal
      pointers, or at least directly copying their contents.  But maybe not
      worth it if I can just write the changed bits.
  Is it possible to do physical modelling on GPU?
    . http://futhark-lang.org/index.html
    . http://halide-lang.org/
    . hackage accelerate

shakefile: build:
  - use Text, not ByteString, files can be unicode
  + get rid of cppFlags and follow #includes in all hs
    . branch shake-includes
    . previously I would run CPP, which gets accurate imports, but I think
      it's just wrong for #includes because they get expanded out
    . I think it's ok to ignore #ifdef and chase all imports.
      . Will this cause non-imported modules like JackMidi.hsc to get
        compiled?
  - could I use -fno-code with mk typecheck?
  - Modular package system, where I can express the dependencies for each
    target individually.
    . Also as I depend on C libraries I need to add them to the ghci cmdline,
      e.g. -lsamplerate
      If I can get it to work with fltk, then I can get rid of the
      Ui.BlockCStub hackery.
  - in HsDeps and CcDeps, if I need every intermediate file, then
    I think I don't need Generated.
  - determine Shakefile.cppFiles automatically.
  . To get a path between two rules:
    ancestorOf('Synth/Sampler/Main') && descendantOf('Cmd/Cmd')
  - use new system calls and logging levels
  automatic "All.hs" modules
    . I'm reluctant because it's simpler to have normal files, and it's not
      that hard to update them.
    - Derive.Call.All looks for (note|pitch|control)_calls from Derive/Call/,
      but could also take from Local/Call/*
    - Local.Instrument looks for 'load' from Local/Instrument/
  - once upon a time, the shakefile took .2s to discover the build is up to
    date.  Now it's up to .7s.  Where is the time going?

incremental save / git:
  text save:
    . consider switching to a text format so delta compression and diff works
    . I just don't want to fuss with a lot of quoting.
    . Maybe I can store as null-separated values.
    . But I want to be line-oriented, so diffs work.  And maybe delta
      compression is also line-oriented.
    . Also I don't want to have a whole independent Serialize class for
      binary.
    . If I use CBOR, then maybe I could convert to CBOR records, which is
      JSON-like, and then have an automatic CBOR to text bijection.
    . Research how git deltas actually work first.
    . Actually it seems like they work with binary, so space efficiency is not
      a reason to use text.  The only thing left is visible diffs, but I don't
      know that there's much point to that.  They're likely to be completely
      unreadable, so if I want to see diffs I'd need a graphical version.
    . And actually it looks like I can diff binary too, but using dump for
      textconv, e.g.:
        [diff "jpg"]
        textconv = exif

  + try saving individual events for incremental save
    Seems to be just as slow as full save, probably most of the time is in
    the call to git.  Test again with larger tracks.
  - wrap operations in a lock file
  - make sure things are ok if it fails at any step
  - I don't think Ui.State needs to emit CmdTrackAllEvents for cases where
    diff will catch it.
  . Git docs: http://progit.org/book/ch9-2.html

integrate / integration:
  score integrate
    - cascading score integrates
      Is there really a use for this, other than consistency?
  derive integrate
    - attrs that the instrument understands can turn into +attr calls, if
      they're not in the CallMap, e.g. save/test/wayang
    - adding a +soft stroke means it gets both less dyn and +soft again, so
      it's extra soft
    - bug: can't delete a derived track, it just gets regenerated
    - bug: can't undo past a integrate create, it just creates a new one
      Maybe I could not record the integrate step?
    - bug: create tracks, remove <, re-add <, does it work?
      Removing < should break the integrate links.
    - Ensure cascading track integration works.
    - If integrate is committing changes to a track, can that bite me if
      a "canceled" derivation comes through?  Think about this later.
    - quantization

lilypond:
  - Lilypond complains about simultaneous tempo marks due to the ly-global
    distribution.
    . I guess I want just one after all.  But what about extracted parts?
    . I probably extract parts by succesively setting staff_display, so I'd
      need something to put ly-global or something in the top visible staff.
  yangqin-zheng-kendang/house-2014
    - xstaff notes are not appearing in the right places
    - Where do those double sharps come from?
  - write a ly function for that quarter = eighth stuff?  I have it in both
    huiyin-concert and squart/spawn
  fix viola-sonata
    - Looks like another lilypond change:
      . score.ly:663:63: warning: this Voice needs a \voiceXx or \shiftXx
        setting
        af8 \mf bf8 c'8 df'8 d'8 a'16 ^( d'16 \change Staff = "down"
        ><
        a16 \change Staff = "up" gf'16 d'16 \change Staff = "down" d16 ) |
        % viola-sonata/pno3-2 viola-sonata/pno3-2.t15 62.75-63; 52
  - It's really confusing how transformer and generators work for ly calls.
    . E.g. I assign ly-span in ky to generator, then doesn't work as
      a transformer.  But if I make it a transformer and add |, then I get the
      bogus 0 dur empty event implied.
  - Similarly, it's awkward to have transformer + generators just so I can put
    multiple bits of code on one event.  I wonder if it's worth adding a ';'
    separator that allows multiple expressions?
  ties: rhythmic spelling:
    - I prefer the old 3/4 spelling: 2~ 8 8 | to the new spelling 4~4. 8
      . Beaming should at least be 3/4, but that's lilypond.
      . Shouldn't I be able to write 16 8. instead of 16 16~8?  Both old and
        new do the latter.
      . The new way spells 16 8 16~16 8 16~16 etc.  Why not 16 8 8 8 8 ?
      . Could I put in ad-hoc spelling rules?
    - I could do manual rhythm spelling with a special directive to turn off the
      meter, and then use a tracklang-level tie to join notes.
      . Or if I could annotate individual notes with tie directions.  That way
        I could apply a pattern to a whole section.
    - Staff notation has a notion of rhythmic spelling, which, being
      proportional, karya lacks.  In most cases I want to automatically infer
      it, but would it make sense to spell it explicitly in some cases, and
      how would that look?
      . I guess I could add a tie annotation, which merges duration with the
        next event, and a lilypond mode that ignores the meter and puts down
        each duration explicitly.
  / add 'ly-~' to add a lilypond-only tie for e.g. trill -> non trill
    transitions
    . Actually I'd want this to delete the following note and extend this one.
      Are there any complications?
    . Yes, of course, I want this to happen at the track level but of course
      that's lost by the time it gets to ly.  I can already do this though,
      with a if-ly type refactor.
  - Can I get it to print time signature on each line?
    . There's no built-in support, I'd have to hook into clef display code to
      add the time signature.
  trill:
    . http://lilypond.org/doc/v2.18/Documentation/internals/trillpitchaccidental
    - It doesn't like my ^\trFlat variants on notes within a chord, while
      \trill is fine with it.
      . This might work:
        trFlat = \once \override TrillSpanner.bound-details.left.text = \markup{
          \concat {
            \musicglyph #"scripts.trill"
            \translate #'(-0.5 . 1.9)
            \fontsize #-7
            \with-dimensions #'(0 . 0) #'(0 . 0)
            \flat
          }
        }
      . Nope, but maybe I have to use that with \trill.
    - Wavy line should extend to the end of the note, not stop at the
      beginning.  Lilypond seems to stop too early.
      . It wants \stopTrillSpan to go after the note *after* it ends.
      . Maybe I can do a AppendNext, which goes after the next note, but
        before any of its other appends.
    - Also the example pitch has an extraneous natural, but this seems to be
      built in to \pitchedTrill.

  - Warn about free code events that don't line up with a note.
    . Test in Process_test.test_note_code
  - add subdivision tests to Process_test
    . Make sure per-voice subdivision changes also work.
  - ly^ is confusing, it seems like it should be ly-^
    . Either that or get rid of the hyphen for everyone.
  - harmonic string arg is hard to use if I have to give nn.  How about
    strings export (g) (d) etc. calls which emit the appropriate string's nn?
    Or should I understand string names?
  - What's the difference between tracks '> | ly-track' and '> | when-ly'?
  - It would be convenient to be able to see where I am in the ly score, e.g.
    measure number.  Lilypond derivation makes a ScoreTime -> measure mapping,
    I'd just have to save that and invert it.
  - Infer ruler from meter markings, or maybe the other way around.  Meter
    markings seem more convenient, but maybe I could just make LRuler
    similarly convenient.
    . But since the ruler is more flexible, it's easier to infer ruler from
      meter than the other way around.
  squart/6:
    - Why does 7/8 not bar the eighth notes?
      . Because lilypond does beaming on its own: lily/Auto_beam_engraver.cc,
        configured in scm/auto-beam.scm and scm/time-signature-settings.scm
      . I should be able to use Meter for beaming too, but for now just beam
        manually.
      . I need to set the subdivision explicitly:
        \set Score.beatStructure = #'(2 3 2)
        Or \compoundMeter #'((2 8) (3 8)) to also set the visible meter.
      . Have the meter and subdivision commands set beatStructure for
        meters where lilypond doesn't already do a good job.
  - lilypond: espressivo <> should be like a normal hairpin
    But the way to do this is awkward, << .. { s4 s4 \< s4 \> s4 \! } >>
    . I also want tied notes to expand to 'c4~ \< c4 \>'
      But that has problems, I need a \!.
    . Even '<< b'2.~ { s4 \< s4 \> s4 } >> | b'4 cs''4 \!'
      is not ideal, the decrescendo extends to underneath the next note.
      If I put \! on the tied-to note, it still won't extend.
    . see \at in https://github.com/openlilylib/openlilylib/tree/master/input-shorthands/articulations-not-aligned-with-notes
    . Ideally:
      a \cresc \decresc % over duration of the note
      a \cresc ~ a \decresc % same
  - Lilypond.write_empty_staff creates incorrect rests for a tuple, as shown
    in Lilypond_test.test_add_bass_staff
  - to make notes without duration, ignore the existing duration and choose
    the simplest possible duration.  For zheng, yangqin, percussion.
    . Exception for +trem
    . Also applies to pizz, and sonically equivalent things like +det detache.
    . Or maybe I can fix detache in VSL by ignoring NoteOff, I think it can do
      that for pizz and staccato too.
  - optionally emit the lilypond to display a compound meter, e.g. 3+2/8
  jianpu
    . Research jianpu conventions, but basically:
      . Hide staff lines, stems, beams.
      . Noteheads replaced by numbers
      . Use a somewhat proportional layout.
      . Lines for 8th, 16th etc. notes.
      . Dots for octaves.
      . Stack chords vertically.
      . Grace notes as superscripts.
      . I still use lilypond's bars, slurs, tuplets, dynamics, etc.
    . http://people.ds.cam.ac.uk/ssb22/mwrhome/jianpu-ly.html
      . Produces extremely mangled lilypond.  I should make my own from first
        principles.
    . standalone commercial software:
      http://www.medeli.com.cn/soft/gb/soft.asp

negative duration / arrival beats:
  new arrival notes scheme infer-duration:
    . I don't want to trim because I might need the controls if I extend the
      duration.  I do want to trim because I don't want e.g. t-dia at start
      from the caller, but I do want pitch at start from the block.
    . t-dia:  0   1   0
              b1  b2
              a b|c   d
              a b|    d
    . If 'c' is present, then I clip off t-dia because I drop controls
      starting at 1.  The starts are replaced with ones from b1.
      So the sample at 'start' should come from the local block only.
      Samples after start can be used from global.  So what if the block
      call just deleted samples at exactly block end?  Any local tracks
      could put a sample there, but otherwise the event gets control signal
      afterwards.  If there is a note to replace, the >start samples are
      replaced, but otherwise, I get the ones from the caller.
    . E.g. global filter sweep.  A infer-duration note would stick out
      because the sweep is meant to be continuous.  In this case, I can
      just use the untrimmed control.  But t-dia should not do that, unless
      I really am treating it continuously.  This is the same problem as
      whether a control should continue changing into the decay or not.  The
      sweep should, but a pitch belongs to the next note.  So maybe this is
      a fundamental limitation of the score language.
  represent arrival notes differently
    . Instead of representing arrival notes as the sounding time plus
      a negative duration, I could represent them as a start time plus a flag.
      If the flag is set, it's considered an arrival note and the trigger line
      is drawn at the bottom instead of the top.
    pros:
      1 Cmds work the same for negative and positive durations, I don't have
        to do any special checks for overlapping with a following negative
        event.
      2 I can have a note arrive and another depart from the same point, e.g.
        trill up to a note.
    cons:
      3 The encoding seems not as elegant.  I can still do it with negative
        durations, but now the negative is just a flag, rather than
        representing the actual extent of the duration.
    4 This means that cmds work spatially rather than logically,
      i.e. I'll need a separate "set beginning" cmd since it becomes set
      duration for negative events.  I don't know if that's a pro or con, but
      it feels like a con since I need more cmds.
    #1 might not be compelling if I've already done the work to get them to
    work, but if it's buggy or turns into continual for for every cmd then it
    becomes a big deal.

external:
  hpc:
    - there should be a way to turn off .tix generation
      . also HPCTIXFILE /dev/null shouldn't crash
    - hpc tool is slow and noisy
      . hpc markup shouldn't spam Writing
      . and it should create index.html
    - ghc runtime shouldn't hard crash if it doesn't recognize the tix file
  parsing "1r" instead of "1s" gives a "unexpected eof" error msg, it should
    say 'r' was an unknown suffix
    Can't get attoparsec to consistently report an error.  Kind of hard when
    it always backtracks.
    - Need to add <||> to attoparsec.
  + send a patch to improve Random.Shuffle?
    . I did a very long time ago, but author unresponsive.

local: plugins:
  . http://simonmar.github.io/posts/2017-10-17-hotswapping-haskell.html
    . packages: ghc-hotswap, ghc-hotswap-demo, ghc-hotswap-so
  I also want local code in haskell.
    . I could put code in Local.Score.SomeName, and have those either
      statically linked in, or dynamically compiled and loaded on each
      derivation.
    . Static linking is easier, but I should at least automatically create
      a All.hs.
    . Also, creating calls is a bit heavyweight, since I likely don't care
      about tags and doc and module can be inferred.  Presumably I can get
      around that with a constructor that defaults those fields, and then
      the generated All.hs overrides the module.
    . Writing in tracklang lacks typechecking.  There could be utilities to
      write like tracklang, but in haskell, e.g.
        c_p1 = with_note_call "p" "subst1" $ block "pattern"
  . ghc can now unload code: http://ghc.haskell.org/trac/ghc/ticket/8039
  . might be relevant: http://hackage.haskell.org/package/dynamic-loader
    http://codeutopia.net/blog/2011/08/20/adventures-in-haskell-dynamic-loading-and-compiling-of-modules/
  . to do per-score code, I can put it in Local.Score.<namespace>
    Convert to module name by replacing -x with (upper x) and capitalizing the
    first letter.
    Then when you load a score, incorporate the static config from that
    module.  Shakefile can link in the local modules under the right name.
    . If it gets to be too much overhead to link on every single build, then
      I can load dynamically at runtime.

cleanup:
  - support cabal new-build
    . The advantage is that people can install dependencies without messing up
      their global package db.
    . Also I might be able to skip the install build tools step.
    . cabal sandbox already does this, but with new-build they can reuse
      installed packages.
    . I think to support this I install deps via new-build --only-dependencies
      and then compile with: -no-user-package-db
      -package-db $HOME/.cabal/store/ghc-8.4.1/package.db
    . Also I could consider using a freeze file if there are problems with
      deps.
    . The advantage of doing this for travis is that I can resue the cache but
      still use latest library versions as they come out.
      . I think?  Or does it prefer what's installed?
      . It's hard to test this with 8.4.1 because every single package was
        just update, so only has one valid version.
      . It will use global packages, but it won't use old versions in user db.
      . Yes, it will use the newest packages available.  This is probably good
        for CI, since it means I find out about new breakage.
      . If I can set up performance CI, then I can find out about performance
        regressions due to dependency changes.
      . But locally maybe I want to freeze, to avoid churn whenever I install
        anything new.
    . All in all, this is not really a big deal.
    . I think I'd really want to do nix, then I can get all dependencies in
      one go.
  - see TODOs: lentil ^build
  - replace fromIntegral with http://hackage.haskell.org/package/int-cast?
  - visualize module dependencies: https://github.com/yav/graphmod
  . Merge Val and MiniVal (RestrictedEnviron.Val for now).
    . NOTE [val-and-minival]
    . The problem is that I'd like to use Val to communicate with tracklang
      without having to re-parse, e.g. via Expr.ToExpr, but that means I can't
      use Val without dragging in Derive, due to VPitch.  I don't need the
      separate MiniVal if I can get rid of VControlFunction and make VPitch
      not in Derive, have a ShowVal, and serializable.
    . I already want to get rid of ControlFunction, but not sure how to do it.
    . I should be able to do those things with Pitch by adding more function
      fields.  Or alternately, typeclass + existential, but I'm not sure if
      that's any better.
  - switch from parsec to megaparsec?
    . Save it for a big ghc upgrade, since it requires a newer semigroups.
  - Cmds don't indicate when they could abort or throw.  I rely on ad-hoc
    conventions like get_ vs. lookup_, but what about it actually being in the
    type signature?  I could try the "lightweight checked exceptions" in:
      http://www.well-typed.com/blog/2015/07/checked-exceptions/
      https://www.reddit.com/r/haskell/comments/3g41au/follow_up_safe_lightweight_checked_exceptions/
    . Or an easier way would be to put 'throw' in a subclass.
    . I have this implemented in the p-monad branch, but it didn't seem
      terribly compelling.  I think the reason is that it turns out most
      functions can throw.  It doesn't replace get_ vs. lookup_ because they
      are likely to call something else which can throw.
  . Could I simplify slicing and inversion by making it into a score
    preprocessing step?  It would annotate UI Events with children, so the
    sub tracks would be in Event, not in Context.
    . If I could get rid of the ctx_sub_events / ctx_sub_tracks thing too that
      would be nice.
    . Could I also somehow make inversion universal?  The idea is to
      eliminate the thing where I forget to add Sub.inverting.
    . I could also take evaluation control away from the event, effectively it
      would mean the Sub.notes bit would be hardcoded and events would get
      [[Sub.Note]] instead of a TrackTree.  I'd lose power, but what are the
      advantages?
  . Things I don't like about evaluation:
    . All that stuff in Context.  The presence of sub_tracks can cause
      unexpected further inversion.  An example is that when I inherited
      the Context for Call.note_here, it also inherited the sub_tracks,
      which caused Call.with_pitch to be overridden.
    . It's also dumb how Context has the event (start, dur) duplicated
      in the 'event' field.  It's not duplicate info for track events
      because they have TrackTime, which is otherwise unavailable.
      This I think is ultimately due to events being in TrackTime
      context instead of (0, 1) normalized.
    . Maybe the problem is inheriting Context?  Or maybe it's awkward
      how it's effectively a manually passed packet of data, while the
      stuff in Dynamic is dynamically scoped.  Events wanting to know
      about their neighbors really does complicate things.
    simplify Context
      . Maybe I should explicitly provide specific bits of context, e.g.
        . prev, cur, and next event TrackTime
        . prev and next logical pitch
      . Say I do that, and put them in Dynamic.  How can I then get rid of
        sub_tracks?
      . I still need prev_val
      . There's nothing intrinsically wrong with Context, ultimately it's
        just an argument, like passed_vals.  I guess it's easy to remember
        passed_vals as just the arguments and understand how they work,
        while that sub_tracks stuff was confusing.
      . Maybe it's just the presence of sub_tracks in Context?  How can
        I get that out?
    . That 'collect' arg in Eval.eval_expr.  Why False for Eval.reapply
      but other functions make the caller decide?
  - pitch transpose
    . It's confusing how sometimes the environ is applied to the pitch during
      derivation (e.g. Post.set_instrument), and sometimes it waits for Convert
      to do it.  Do I really need both?
      . The environ goes in the Score.Event, which is then applied to the pitch.
        So Post.set_instrument actually maybe doesn't work, if the event
        still has environ.  I have to replace the event environ instead.
    . Post.set_instrument needs to set because I need the environ from the new
      inst.  Could I instead overlay the environ into the event environ?
    . It's error prone because there's nothing that enforces that you set
      instrument with Post.set_instrument, and if you don't, it will work until
      you use a scale with e.g. tuning, and then it will be slightly off.
    - Maybe I should at least not export Score.Event(..) so I can't directly
      modify its fields?
    . Or maybe insist on rederive instead of just changing the instrument.
      In general that's the proper approach.
    . Originally added in the patch 'add interpolate scale':
      The bigger problem was that since pitches got the Environ at conversion
      time, the interpolate scale couldn't substitute `key-from` and `key-to`
      because any environ values it set before evaluating the pitch wouldn't
      "stick".

      So I switched to applying the environ when the pitch is created, but this
      broke the case that made me switch to applying environ at the end in the
      first place, which is when switching instruments in a postproc I want the
      new instrument's environ, specifically Environ.tuning, to apply to the new
      event's pitches.  So now when I switch instruments I have to explicitly
      apply the environ from the new instrument, via Post.set_instrument.
    . Also error prone: I applied octave transpositions via Call.add_constant,
      but then realize-ngoret uses transposed nn to infer, and untransposed
      pitch for the final pitch, so I get a confusingly wrong result.  The
      solution is to apply via Pitches.transpose, but I shouldn't have to make
      complicated decisions like that.
  - It seems I get slicing on an already sliced track if I have an
    intermediate empty note track, e.g.:
      [(">", [(0, 1, "")]), ("> | +a", []), ("*", [(0, 0, "4c")])]
    . Is it a problem?  Should I skip if already sliced?  Document if it's ok.
  - use Data.Vector.Algorithms.Search.binarySearch instead of my own, but
    make sure it has the right specializations.
    . Or at least use mine in Util.Vector.
  - Modification of State is still kind of messy since I have lens and
    non-lens versions.  And if I wanted to modify with a lens I wouldn't be
    able to add an effect, like causing damage.  If I used ekmett lenses maybe
    I could unify effectful modification.  I'd also need a way to focus
    on UI state.
    . For example, I can add an allocation with State.allocations, but if
      I wanted to make that cause damage I couldn't.  Of course maybe it
      doesn't matter since I infer damage based on config changes.
    . Also I can't make sure that UiConfig.allocate is used instead of
      directly modifying the map.  The root of the problem is that I have
      unrestricted modification via State.modify_config, but even if I removed
      that I'd want something as convenient as lenses, but with the posibility
      of effects, or at least access to Ui.State and Cmd.State.
    . That said, I'm not sure how much this actually matters.  Maybe I should
      wait to see if it's actually a problem before worrying about it.
    . I guess it already has been a bit of a problem, in that the test had
      a bug where it put on the wrong backend.
    - If State.allocations is so read-only, why not make it a plain function?
      . Tests use it to write...
  - Research a better solution to records:
    . generic-lens combined with generic-lens-labels, OverloadedLabels, and
      DuplicateRecordFields
  - Why re-export UiConfig from Ui.State?  Why not directly reference
    UiConfig?
  - Can I make prev val or {Note,Control,Pitch}Deriver return values more
    typesafe with GADTs?
    . Study https://github.com/goldfirere/glambda for ideas.
  See about removing type prefix from record fields.
    . However, if there are lenses, then I need those names for the lenses.
      But perhaps the plain version can have a leading _?
    . Another bonus of the leading _ is I don't have to worry about unused
      function warnings.
    - Cmd.State
    - Derive.Deriver.Monad
    - Ui.State
    - Ui.UiConfig
    - Perform.Midi.Instrument
  - Util.TimeVector has a hack where a sample at <=0 is considered to extend
    to -inf.  It's because I want a control track call at 0 to extend back.
    But I could do that directly with a postproc ala the tempo hack.  It seems
    like a hack at a higher level is better than one deep in the signal
    implementation.
  - Expr is NonEmpty since there is always at least a "" call, but this is a
    special feature of events.  Would it make more sense to parse "" as [],
    and then special case [] in EvalTrack.derive_event?
    . But I'd need a newtype, otherwise ShowVal [Call] overlaps.  Of course
      the only reason it doesn't already overlap is that a don't have
      a ShowVal for NonEmpty.
    . But Quoted is also Expr... should it be non-empty?
    . I now don't remember where it was that I had an Expr that made sense as
      [], so maybe I don't care about this anymore?
  - Move Derive.info_prev_val to the environ, maintained by EvalTrack.
    . This gets rid of all the Taggable stuff, at the cost of making
      Args.prev_val in Deriver and dynamically typed.
    . There's no Val for Score.Event, so I can't use it for note tracks.
      Of course I could just add one, maybe not a big deal.
  - Overlap detection in Derive.Slice I think is still messed up, or at the
    least it's more complicated than it should be.
  - I could make the fltk interface clearer by putting c_interface.cc into
    fltk, and then putting all the types it depends on in one header.
    . I could make that a .c file too, and get rid of the sketchy hsc2hs on
      c++, as well as clang's "treating 'c' input as 'c++' when in C++ mode"
  - split up CallInfo depending on type
    I got started but was discouraged when it came time to write
    GetLastSample, maybe I should make another go.
    Note tracks can't get a GetLastSample at all.

performance:
  . use weak pointers to detect space leaks more precisely:
    https://github.com/ghc/ghc/commit/5fe6aaa3756cda654374ebfd883fa8f064ff64a4
  . Criterion-like with fewer deps: https://github.com/vincenthz/hs-gauge
    . Also supposedly --measure-with to run each in a separate process
      produces more consistent results.  But there's no reason I can't do that
      on my own.
  . http://www.tweag.io/posts/2017-09-06-hyperion.html
  . https://github.com/tobami/codespeed can make a web page with perf graphs
  . https://github.com/nh2/haskell-cpu-instruction-counter
    . But only works on linux.
  . perf stat ...

  signal:
    - clip_before and clip_after usually require changing the signal
      . I could eliminate this with _start and _extent fields.
    - Segment._offset might not be worth it
      . Since I think it's only really used to move Score.Events, I could get
        the same effect by making event signals relative to event start.
    old notes:
      . Slicing a signal will require changing the vector, to add a new
        sample on the beginning or end.  I could eliminate this with _start
        and _extend fields.  Not sure if it's worth it.
      . Do it the simple way first, and profile.
      . Do I need to clip at all?  The performer can clip to the start, but
        I think it needs to know where the note stops because otherwise this
        information isn't preserved.
        . I could do it more efficiently by just sticking an end time in the
          Score.Event, and leave it to the performer to observe.
        . Indeed NoteUtil.trim_controls only does drop_before.
        . E.g. BlockUtil_test.test_compile, final test
  - I should include the number of events in the verify profile, so I can
    compare relative event throughput per score.
    . Clearly the wayang ones are doing something expensive, what is it?
  ghc-events:
    - GHC.RTS.Events doesn't handle unicode properly
    docs:
      . https://www.chromium.org/developers/how-tos/trace-event-profiling-tool/frame-viewer
      . https://www.chromium.org/developers/how-tos/trace-event-profiling-tool/using-frameviewer
      . http://www.well-typed.com/blog/2014/02/ghc-events-analyze/
    conclusions:
      . 10ms for mouse up + minor GC, 9ms for 'j' with no GC.
      . During derivation, I get 80ms for OutOfDate, which should normally
        be 10ms since it just sets the box color.
        . While GCs are longer than normal, there is still plenty of time with
          no GC... what is it doing?  Maybe just competing with the derive
          threads.
        . Can I put responder on its own thread, or somehow bump priority?
        . ghc-devs subject:(GHC Threads affinity)
          Might be able to pin respond to its own capability.
    Even once I do get this, what use will it be?
      . I can see if a hiccup is waiting on GC, or trying to evaluate
        something.
      . But I pretty much know it's going to be GC, because it happens
      . What would the "real" solution be?
        . Ideally a low latency or interruptible GC, but that won't happen.
        . I could put derivation in a separate process.
      . Reducing garbage would help both latency and throughput, so I could also
        try to speed up derivation.
      . It would be useful to verify that hiccups are indeed GC, and then verify
        that GC is particularly bad when lots of derivation is going on.  I may
        be wrong and it may be another too-strict field.
      . In fact it seems like they may just be thread priority.
    . ghc 8.2 puts heap profile in the eventlog so I can align heap profile
      with events: https://ghc.haskell.org/trac/ghc/ticket/11094
    + convert from by-HEC to by-thread
      . evCap is capability, which is more-or-less CPU.  But I want to track
        haskell threads, specifically the respond thread, since it may migrate
        across caps.
        . ghc-events-analyze does this.
        . I think I look for CreateThread, and then associate a HEC with the
          thread id.
      . Though I could use async events to track thread migrations.
      - Use ThreadLabel to add the name.
      - This works, but chrome doesn't combine threads, so there are too many
        short lived ones.  I should reuse thread IDs when they don't overlap.
        . Do this only for unnamed threads?
        . If there are named threads that don't overlap, I should give the
          same ID.
    + include the cmd name in the trace
      . I have msg in args, I'd need to emit cmd name as it is encountered,
        and collect them inside the respond bounds.
      . maybe use args?  Or put it in the name?
      . Use the Object feature?  No, not applicable.
    - put tracing in derive, I can put block calls in.
      . Can I make the hierarchical?  Get a flame graph kind of thing.
    - Is trace free-ish when eventlog is off?  Otherwise I could CPP it out.
    - add Object support
      . Thats all documented phases, right?
    - Think about generalizing convert_event_log so I can release it separately.
    * include GC
      . What's major vs. minor gc?
        GlobalSyncGC is involved, but I don't understand the GC events.
      ? Specifically, GCIdle should mark idle GC, but it occurs inside
        StartGC.  Shouldn't it mark the start of a GC?  And what is GCWork?
      - Mark major GCs like threadscope does.
    . JSON event format:
      https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/edit?pli=1
    old notes:
      . xi-editor, what did he use for that?
        https://www.youtube.com/watch?time_continue=12&v=4FbQre9VQLI
        . write "chrome tracing" format, chrome://tracing, then load
      . I probably need to save all cycles, and then search for ones with
        hiccups.
      . Use ghc-events, then I can get gc events too.  I guess this may turn
        into using chrome instead of threadscope, but why not?
      . http://www.yesodweb.com/blog/2012/10/future-work-warp
      . Can I use custom events to see lags in threadscope?
        . Yes, but hard to visualize with everything there.
          I can get labels with View -> Event labels, but often they are jammed
          together, and draw inconsistently.
        . What do the numbers in threadscope's green bars mean?  ThreadId?
        . What I want is for each respond cycle to see where pauses were, and
          why.  I'd want to bracket the respond cycle outside of waiting for the
          next msg, get the total duration of each one.  Possibly I can do that
          by using ghc-events to process the eventlog.
      GHC's +RTS -v flag writes eventlog to stdout
        . It's documented but doesn't exist.
        . It only exists when -debug, but this isn't documented.
        - Send doc fix to ghc.
  . Libraries for 2d rendering: Skia, WebRender
    . Or use OpenGL.
    . Skia is a 2d library, like cairo, and it has a OpenGL backend.  I guess
      it provides fancier features on top.  But if I don't need those
      features, then I should just use OpenGL directly.
  - Bring back profiling, and do it regularly.
    . Look into that graphing stuff, I have the links around here somewhere.
    . I can get historical data with a script to step through darcs history.
    . I don't have historical scores.  Well, I have backup/y-m-d, but they're
      done irregularly and don't line up to commits.  Still, I should be able
      to do ok by looking for the closest match.  Outright failures should be
      visible as outliers.
    . For the future I should have a more organized way to backup scores.
      . One way is to trigger a save-backup/backup after every patch that
        requires that score to be updated.
        . This is actually uncommon, less common than ones requiring an update
          for the the saved realization.
        . Also the backup needs the commit date, not current date.
      . Or put the saves in source control.
        . Not the same one as the source, I don't want to have tons of giant
          binary diffs.
        . So I need some way to link them... is commit date enough?
        . Other people have surely created solutions for this, e.g. git-annex.
        . This would be weird for git saves, I don't want nested source
          control!  git saves have their own history and could be rewinded
          their own.
      . Or use git saves for everything, now each score has its own history.
        . For some reason I don't really like to use git saves though.
        . If I extend the .last mechanism to make dated versions, it's
          essentially a simple homemade version.  It would be too cluttered
          if I did it on every save though, it would still need some trigger
          to notice when an incompatible change happened.
    . Ideally I have a separate set of scores that don't change other than
      compatibility updates and are just for profiling, like the old data/*.
      . In fact, maybe I should go back to that, except keep data/ in
        a separate repo.
      . The problem is I have to update twice as much stuff, but I don't need
        that many "reference" scores.
    . Profile MIDI and ly generation separately?
  - When I'm using ghc 8.2, try compact regions for inst db, especially vsl.
    . 'compact' package
    . Maybe even serialize it to disk?  Probably not worth it though, since
      startup is pretty fast and probably inst db is not a big part.
      . 0.584cpu / 0.222s.
    . Can I use heap profiling to find other large CAFs?
    . Can I use compact regions for the REPL loaded modules memory?
    . compactWithSharing is slower but retains internal sharing, test to see
      if it's worth it.
  - Reduce memory used by REPL.  NOTE [reduce-repl-memory]
    . About 200mb.
    . GHC reads interfaces maybe with ghc/compiler/utils/Binary.hs:/readBinMem
    Try -fignore-interface-pragmas
      . From ghci: 210mb without vs. 1552mb with
      . But from REPL seems to make no difference.
      . Actually, I can't reproduce this now.
    . 200mb for an empty score seems excessive.  Where does it go?
      . With inst db: 197, without sysex: 190, without vsl: 187.4
      . Without repl: 12mb
      . So 190mb consumed just by loading .o files!  du on obj dir is just 76mb.
      . Loaded modules:
        [254 of 255] Compiling Local.Repl       ( Local/Repl.hs, interpreted )
        [255 of 255] Compiling Cmd.Repl.Environ (Cmd/Repl/Environ.hs,interpreted
        . with verbosity=2:
        . Stable obj: [Local.Instrument.Kontakt.Wayang, ... 253 modules
        . log: Ready for upsweep
          [NONREC
                ModSummary {
            { ... imports of every module }
        . compile: input file ./Ui/ScoreTime.hs
          *** Checking old interface for Ui.ScoreTime:
          [ 41 of 255] Skipping  Ui.ScoreTime( Ui/ScoreTime.hs,
              build/opt/obj/Ui/ScoreTime.hs.o )
          *** Deleting temp files:
          Warning: deleting non-existent /var/folders/6j/.../ghc_62.hs.o
          . bypecode compile for last two modules
    . 'du -hc build/opt/**/*.hs.o | tail -1' shows 55mb for object code,
      and 19mb for .hi.  I'd think object code would be loaded directly with
      little overhead, but that means .hi code expands by (190 - 55) / 19 = 7x
      expansion, which seems like a lot.
    . Also the memory measurements are haskell heap, which might not include
      loaded object files.
    . However, it's also loading .hi files for external packages too, though
      I'm not sure how much.  The external package code is shared libraries,
      which is shared with the app (and not in the haskell heap anyway).
    . Use dtrace to figure out exactly what the GHC API is loading and when.
    - I should be able to share object code by linking everything as a shared
      library... that might save 55mb at least?
  - Allocation when idle: about 300kb/sec
    . What triggers this?  Nothing, it's basically always happening.
      No, the allocation is always happening, but usually it doesn't get
      retained.
    ? Who is running?
      . Threads:
        / main - Ui.event_loop - should be blocked in Fl::wait,
          though it comes back on every cursor move.  But still allocates even
          when it doesn't have focus.
        . responder - Respond.responder - Should be blocked in STM.atomically
          block.
        / Midi.CoreMidi.initialize forkOS - goes into CFRunLoopRun
        / interpreter
        / Responder accept repl socket
        . Cmd.Performance: eval performance
        . Cmd.PlayC.play - updates the playback
        . Perform.Midi.Play render midi
      . Could it be EKG?
    . It stops during play.
    . Try disabling ekg and use LDebug.memory and see if it's still there.
    . It still grows without ekg.  Well, the second time it seems like it
      moves but doesn't grow.
    . Is there some way to instrument allocation so I can see which thread is
      doing it?
    . Actually it seems like ghci does it all by itself.  So it's either
      inherent to the GHC API or ghc runtime in general.
    . Does it grow with the repl off?  Yes, so apparently not the repl.
  - Criterion testing: why is cmd_derive faster than derive?  It should be
    doing more work!
  - Check out score size with 'weigh', ala https://github.com/haskell-perf
  - experiment with GC flags
    memory usage:
      . 200 mb -> 350 rss
      . 250 by LDebug.memory and ekg, 500mb by system viewer.
      . I think I have a very large proportion of static data in the GHC API
        loaded .hi files, so that should avoid GC as much as possible.
        Increase the generation count?
        . In the future can I put that in static memory regions?
      . Then I have a lot of short lived garbage generated on each derivation.
      . Then the rest is medium life: score data, Performances.
    . -A8m - larger generation 0 means fewer collections, good if lots of
      garbage is generated.
    . H - Suggested heap size.  I don't really understand this.
    . -qg - turn off parallel gc
    . -n2m - divide -A into chunks, so the first thread to run out doesn't
      trigger a GC for all of them.  Good for unbalanced allocation?
    . -I0 to turn off idle GC.  But it's designed to be good for interactive
      use, and maybe I do pause for >.3s.  Or turn it up to 1sec?
  - find space leaks with nmitchell's stack limit technique:
    . run build/profile/verify_performance +RTS -K975K -xc -RTS --mode=Profile
        p/cerucuk-punyah.state
      Derive.LEvent.events_of,
      called from Derive.Stream.zip3_on.\,
      called from Derive.Stream.emap,
      called from Derive.Stream.zip3_on,
    . Also, what's with the compile_library stuff in the middle?  Should
      I make it stricter?
    . Giving up for the moment since I don't understand the output.
  . Seq.sort_on winds up calling compare on Stack 13374153 times! 9.1% time
    I have to sort it because the stack is kept in reverse order.
    - Per-track stuff can wind up happening zillions of times due to
      inversion, so look for other places where I do work or collect data
      on every track fragment.
    - At least at one point, keeping EnvKey.seed up to date was expensive, and
      it's not even needed when there's no randomization.
    - I could analyze TrackWarp or TrackDynamic to get stats on how many times
      each block is called, along with overall stats on how many notes.  Just
      an interesting thing to know.
  criterion
    - score from a file
    - parsing
  understand deriver performance
    . I never know if changes I am making help or hurt performance, because I
      don't trust any of my profiles.  This means I hardly ever run them, at
      which point why bother having them?

    . Productivity is actually really good during derivation: 70-80%.  Only if
      I turn on heap profiling does it go down to 33%.  So maybe there's
      nothing to do?  Still, it seems like it's slower than it should be.

    . I want to find out how much list copying happens due to Stream being
      a list.  Perhaps I can use SCC annotations?  For transforms, I want to
      see the effect of a transform copying the whole stream so I can tell if
      making it interleave has an effect.
      . It would be nice to see how many times each cons is copied, but it
        would have to be for the output stream specifically.  How can I do
        that?  I think I would have to make my own list type, then count
        allocated cells?
    . Also, from heap profiling, the vast majority is PINNED, which is
      presumably ByteString.  But what is it then, if I'm using Text for
      events now?

  - the first REPL cmd can take 2-3s, but they're fast after that, why?
    . Presumably it's forcing a bunch of CAFs.
  research using pipes for generators and transformers
    . or streaming, or https://www.reddit.com/r/haskell/comments/7w79q1/what_is_your_take_on_conduits_pipes_and_streams/
    . This would handle the composed transforms thing.
    . What about parallelization?
    . What about the MergeList idea?
    . The bigger question is how do I do dynamic state when all the different
      calls are interleaved?
    . Actually now I'm thinking pipes aren't suitable for this.  Pipes are
      about interleaving effects, but derivation is pure.  But not quite,
      since it does depend on StateT.  In a pipes implementation, a generator
      would be 'P.Producer Event Deriver ()', and a transformer would take
      a Producer to another Producer.  Actually, since calls need to typecheck
      etc., it winds up being:
        type Events = Producer Event Deriver ()
        type Generator = Deriver Events
        type Transformer = Deriver (Events -> Events)
      . In a pure environment, pipes still give a constant bound on how many
        elements I hold on to at a time.  But since I look ahead arbitrarily
        much, maybe I don't want that.
    - Set up a pipeline over a StateT that returns Event.
    . The way to do this without pipes would be for transformer to be
      Deriver (Stream -> Stream).  Then I can run all the transformers, and
      then compose all their functions.  At that point, the only thing pipes
      would really give me is a clear picture of how many elements I need
      because each one needs to be specifically awaited... but it seems like
      the look-ahead stuff would be really inconvenient.  And I do the same
      thing, it's just less convenient with pipes.
      . It does mean I have to express all transformers purely.  This is true
        for the non-monadic Post functions, but it means I can't express ones
        where a previous monadic effect on a previous element effects a later
        one.  But that only applies to Threaded, and I can get that anyway by
        threading myself, so maybe there's no problem?
      . The way to prove that would be to remove the monadic Post.emap
        functions.
    . The reason transformers can't interleave is exceptions, and that's
      an effect, and something like pipes or streaming should be able to
      interleave that effect, which is what is needed.
      . Presumably they could also interleave the State effect, but I'd want
        to take that out.  Though of course keeping the Reader part is fine,
        and necessary.
  make composed transforms more efficient
    . Composed transforms have to keep the whole event stream in memory since
      they can't interleave.
    . Would it then be possible to deforest the intermediate lists?  Bulit-in
      deforestation won't work because of the intervening call machinery, but
      maybe I can recreate it manually.
    - First, figure out how to measure the amount of memory used by
      intermediate lists.  It might be completely trivial.
    - First, I have to detach threaded state for the actual map.  This is
      possible because I don't care about Threaded or Collect.  So modify
      Post.emap_m to map a Derive.run over every element.  Then I need to
      collect the output and turn Left into a Log... or leave it in the stream
      somehow so I can throw at the end.
    - I think the stream will then remain lazy, and I should be able to GC
      as it goes, but verify with Debug.trace.
  - I'd like to see if directly modifying Collect or a MergeList for LEvents
    could reduce garbage, so I need to get some profiling up first.
    . monad-par-extras Control.Monad.Par.AList is deprecated due to poor
      performance, what's up with that?
  - Internal.merge_collect is constantly merging in mempty, try reducing its
    use.  Can I continue to enforce monoid-nature?
  - I should be able to move samples only when converting to MIDI, this way
    I don't need to move parts of the signal that wind up being trimmed.
    Either try to trim the signal earlier again, or delay transformation to
    Perform.
  . Signal.sig_op has 4.8% alloc, from Control.cotrol_call ->
    Derive.with_relative_control -> Perform.sig_multiply
    . So default multiplication for dyn is expensive.
  scrolling through giant blocks is slow
    - drawing is stil slow, I'll have to look at the fltk layer
      It happens when the block is wide.  Use test_block to see if it's just
      fltk.
      . It's fltk.  Not alpha draw though.
      Scrolling is weirdly chunky near the top when fl_scroll() is on.
      Curiously it doesn't seem to help at all.
    - Would it be faster to call fl_scroll once for all the tracks?  I could
      also theoretically call find_events all at once too, though that
      shows up low on the profile, so maybe it's not a big deal.
    . The thing is, it seems like fl_scroll doesn't actually help scrolling
      speed at all.  Maybe all the time is spent elsewhere?
  - Store signal chunks in the Ui.Track so they can be directly emitted.
    This is only useful for large chunks of 'set' calls, probably recorded
    from MIDI.  So it's probably not pressing until that feature exists.
    . make Ui.Events into 'Map ScoreTime (Event | Chunk Signal)'
    . collapse chunks of adjacent 'set' calls into a Chunk
    . track_derive on a Chunk just returns the contents
    . fltk event render should detect too dense events and omit them, rely
      on the signal render
    . UI edits should see the Chunk expanded out as Events.  Inserting an
      event should modify the chunk or split it depending on if the inserted
      event is a set call or not.
  Cmd
    - If a msg aborts or doesn't run any cmds, don't bother to run diff.
      Except that hardly ever happens if I do shortcut thru.
    - cache track cmds for each track, update when the track title or skeleton
      changes
  Derive
    - parallelize derivation
    AppendList / MergeList for Derive.Stream
      - switch to AppendList and try to get garbage down
        Avoid copying sublists returned by block calls and cache hits
      - see if a Merge constructor can reduce copying
      - can I cache length and range in AppendList?  does it matter?
      - insert parallelism?  maybe the evaluator can do that when it sees
        Merge?
    - lazy signals
      - check out 'at' and 'bsearch' occurrances and see if they can use tails
      - There are lots of lookups in the tempo map
    - see if making a version of Derive.local that's non-monadic in the
      modifier has any effect on performance
    derive cache:
      - can I cache long blocks by slicing them if they're >n?
      - c_block should only cache if the block has > a certain number of
        events.
      - I won't rederive cached generators if they have control damage outside
        of the event range.  But there's nothing stopping a generator from
        reading ahead or behind... come up with some kind of solution for this.
    - fair amount of garbage generated by SignalBase.bsearch_above, I think
      this is because it has to box the values when it pulls them out.  But
      it's really just comparing to a Double, so I should be able to do the
      operation unboxed.  But decide about lazy signals before going nuts on
      this.  If I revert to linear search then none of this is necessary.
    - at_linear is called a lot by compose, by compose_warp, by d_warp
      can I make this more efficient?

fltk:
  - Floating input in the wrong place for negative events with multiple lines.
    . Because it assumes the text goes downwards.
    . Since haskell doesn't know how the text is wrapped, it can't know where
      to put the input.  I think I'd want the input itself to know it's
      wrapping upwards, so it can get it right during input as well.
    . It seems like too much hassle for a cosmetic issue.
  better drawing
    . All this incremental redraw stuff is fussy and seems like it should be
      unnecessary.  I should be able to lay it out and have someone else handle
      selection overlay and scrolling.
    . How hard would an OpenGL version be?
    . Or why not get rid of the callback, and just keep the complete track in
      c++, like I do with the signals.  I think I need to do that anyway for
      OpenGL, and that way I don't have to play with getting event ranges,
      I can just scan the whole range on every draw.
  - Maybe I could ship over a chunk of playback data in advance, and let the
    UI interpolate playback cursors.
    . If I could keep the warp as linear segments then I just need to ship the
      segments.  NOTE [signal-discontinuity]
  - FloatingInput on linux doesn't interact well with a tiling window manager.
    The new window probably needs to be marked transient.
    . Can fltk even do this?  I can't even figure out what xprop should show
      for transient windows.
  - Factoring a bit of score into a call makes it less readable because
    I can't see the events inside.
    . I could put a mini version in the background of the event.  I'd need
      to be careful to retain readability.  Maybe only show the frist track,
      or the first note track.
  - reduce duplication in EventTrack.cc drawable_pixels
  - I need to differentiate DEBUG from LOG.  And LOG can go to seq.log.
    . I'd need to pass a haskell callback, so it can serialize to JSON.
  - what's going on with SeqScrollbar and FlSeqScrollbar?  Looks incomplete?
    . It still might be useful to put the top level ruler labels, or cues if
      I ever use those, but I'd have to make it wider.
  - Do I want to support set_ruler for Scrollbar?
  - Drag on an event track title doesn't work, because the new FloatingInput
    doesn't realize that a drag has started.
    . Explicitly sending it FL_PUSH doesn't seem to work, but maybe
      something similar could?
  - It gets a few extra focus/unfocus pairs before show, why?
    . I hacked around with FloatingInput::ready.
  / Also, it seems resize on a window which is a child of another window
    goes into endless recursion.  What is a child window supposed to mean
    anyway?
    . Who cares, I don't use any of those.
  - Manually fiddling with track widths is annoying.  It seems like I could
    ask the UI about text extents to resize them automatically.
  - I never wound up using rank > 1, so presumably I could simplify things by
    calling it 'bool align_right' or something.
    . I'm using EventTrack::Align, but the haskell side is still sending
      ranks.
  - When multiple marks from different marklists are in the same place, their
    text collides.  The one from the first marklist should take precedence,
    as should its line.  This is visible when I add logical range markers.
  ? There's an extra axis of information in the width of the event body.  How
    could I use that?
  - add edit and windows menu to all apps
    There must be special OS X support for these
    Apparently not?  iTerms is defined in English.lproj/MainMenu.xib
    https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/WinPanel/Tasks/UsingWindowsMenu.html
    But it doesn't say how to add the Window menu.
  drawing artifacts on retina:
    . Some of this may be fltk bugs.
    / tops of tracks and the tops of track text boxes still get gunk, visible
      when scrolling horizontally
      . I don't see it now, probably just fltk problems.
  + bug: There's a focus bug, but I'm not sure how to reproduce it.
    . The focus bug is still here.  Even clicking on the "unfocused" block
      doesn't fix it.  Don't all msgs contain focus?  What can I log after the
      fact to figure out what's going on?
    . Actually this makes me think it's actually in MsgCollector.
      In that case it would be Fl::focus() which is wrong.  Is there a way to
      just ask the OS what window has focus?
    . Cmd.state_debug_ui_msgs doesn't help because I have to take off focus to
      turn it on.  I would need a key stroke that does that.
    . come up with the next step to find this
    . Last time: c0f6295365b3b1ad1df41f884c4b6a986cf2f608
    . Every msg contains the focused window, and since moving the selection in
      the same block doesn't fix the focus, it must be sending the wrong
      focus.  So I think printing msgs with state_debug_ui_msgs will not be
      helpful.
    . How does MsgCollector get the focus?  From Fl::focus().  So it must be
      out of sync with OS X focus.
    . How does Fl::focus() get it?  Can I directly ask the OS?
    . Yes, by hacking libfltk to add the function.
    . Of course fl_mac_get_key_window() is not a solution, but hopefully I can
      see it diverge.  Then what?
    . At least I want to narrow it down to a problem with how my program uses
      fltk, one with fltk itself, or that the OS is sometimes not delivering
      the notification, or doing it in a way not expected by fltk.  I think
      getting access to the "ground truth" of what the OS thinks is the key
      window is a first step for all of those.
    . Path from windowDidBecomeKey to Fl::focus():
      . Fl::handle(FL_FOCUS, w)
      . Fl::handle_ sets fl_xfocus, calls fl_fix_focus()
      . fl_fix_focus() walks up to the top
        window (presumably already there), checks if the window wants
        take_focus(), and calls Fl::focus(Fl_Window *), which will set
        Fl::focus_ unless visible_focus() is false.
      . visible_focus() is confusingly named, since it really means accept
        *any* keyboard focus, not just do so visibly, but whatever.
      . This is a pretty long convoluted path, with lots of ways to go off the
        rails, so I can't be totally sure it makes it in all cases.  There are
        also some seeming redundancies which make me confused about
        responsibility, for instance, fl_fix_focus() does "if
        (!w->take_focus()) Fl::focus(w);", but Fl_Widget::take_focus already
        does Fl::focus(this) if it's going to return 1.
      . Fl_Widget::take_focus:
        if (!takesevents()) return 0;
        if (!visible_focus()) return 0;
        if (!handle(FL_FOCUS)) return 0; // see if it wants it
        if (contains(Fl::focus())) return 1; // it called Fl::focus for us
        Fl::focus(this);
        return 1;
  - I could set certain Symbols to stretch to the length of their event, this
    would yield a nicer looking score.  But it would mess up the bounds
    detection.
    + gmail: subject:(scaling text)
      But it's OSX only.
  - figure out how to have a minimal title bar in os x (win.border(0) removes
    it altogether)
    I can set something like kUtilityWindowClass in Fl_mac.cxx:Fl_X::make, but
    it doesn't get any kbd input
    . can I get fltk to omit the jellybean buttons on the window?
      . Yes, but requires hacking fltk.
      . Completely disables resizing.  Apparently this is hardcoded.
  incremental redraw / scrolling
    . I don't like the current situation of incremental redraw and scrolling.
      It's also buggy, i.e. one pixel difference between scroll and redraw.
      Get rid of damage and redraw everything every time.  Then I have to make
      it fast to fetch the data for one screenful.  What makes that slow
      currently?
    . Entirely turned it off, speed seems acceptable.
  Track
    - dividers can have separate color for upper part, for collapsable tracks
  + Disable application persistence for fltk apps:
    http://oleb.net/blog/2011/07/whats-new-for-developers-in-lion-part-1/
    http://developer.apple.com/library/mac/#documentation/General/Conceptual/MOSXAppProgrammingGuide/CoreAppDesign/CoreAppDesign.html#//apple_ref/doc/uid/TP40010543-CH3-SW26
    Can then re-enable ~/Library/Saved Application State.
    . Did the objc call, but doesn't seem to have any effect.

  control track, render signal
    - render option: solid with color gradient
    - combine multiple signals, e.g. one controls xpos, one controls color
      I could combine pitch and dyn.  This is appropriate for the note track.
      . I'm pretty sure OS X can do this, as can cairo, so I would need to
        figure out how to get direct access to that API.  I could get rid of
        the awful alpha_draw.cc hack while I'm at it.
      . Or perhaps I should just switch to OpenGL?

logview:
  - use Fl_Help_View and HTML to display text
  + Logview got some kind of file locked error, presumably trying to track
    a rotated log.
    . It happens if the write handle is still open, for some reason
      Posix.getFileStatus then gets openFile: resource busy (file is locked)
    . But I also got:
      . logview: ./log/seq.log: openFile: resource busy (file is locked)
      . Apparently not caused by log rotation.  Maybe if it checks for
        rotation at the same time a new line is written?
  - can I get the standard edit menu and copy/paste?
  - tabs are not lining up properly
  - option to wrap lines or not?
  - hide or display various attrs: date, file, function, ...

Ui:
  Track
    dense sampled signals
      . efficient storage, preferably as a Signal so no conversion is necessary
      . display dense signals: omit text and trigger lines when zoomed out

test: testing:
  * rm .tix and test.output in test/run_tests instead of Shakefile
  / --noninteractive should be the default
    . Actually let's not bother.  It seems confusing to have to add a flag to
      get io_human to actually work, and I never run interactive tests
      automatically anyway.
  - on failure, instead of
      __-> Util/Format_test.hs:80 [test_render_full_width] ...
    print
      __-> Util.Format_test.test_render_full_width 80 ...
    So I can copy paste into run tests.  But fname:lineno is usual for editors
    to jump to that line.
  * use a set of tags instead of single test type
    . I can also put tags in the test name instead of hackery in
      GenerateRunTests.extractTests:
      test'large'interactive'_blah = ...
    . Also the io_human detection is pretty broken.
    . I don't want to make the function name in the testName inconsistent,
      but once this stuff is in the test name, why repeat it?
    . That's fine for stuff like large, for which I can just write
      test_large_..., but I think I want module level, e.g. for initialize,
      which happens to correspond to gui ones, but doesn't have to.
    . I could have something like initialize, but to get typechecking,
      I could put them in a Test.Meta record.
  / find those "manual tests" and mark them with a tag: Util.Process_test
    . Nah, I can still run them by hand.  And I'd need per-test tags.
  * I removed the test/run_tests feature to run multiple binaries, but
    I relied on it for profile tests, and it's convenient to have it because
    then the test logs go to the same place.
    . But it seems not quite right, because I don't want parallization for
      MemoryLeak.
    . Or make parallel append by default, and just run MemoryLeak first.
  / clear build/test/tmp before each run
    . test/run_tests already does this
  * restore CWD after each test run
    . Anything else I should do for isolation?
  parallelize tests
    . Do a work stealing queue, with n workers.
    . Each test has to redirect stdout to its out stream so they don't get
      tangled, but I'm not sure if I can actually do that.
    . If tests reported errors in another way then I wouldn't have the
      problem, but I think I like being able to use print and Util.Debug and
      having it be interleaved properly with test output.
    . In that case, I can start subprocesses for each task.  I already do this
      for tests with setup.
    . Either divide up by module, and assume they're all reasonably quick, or
      dynamically feed tests to a persistent runner.
    . Static is simpler, but assumes each test module is reasonably quick, and
      pays for startup overhead for each one.  Actual fork and startup should
      be pretty quick, but I might have to re-evaluate a lot of CAFs, which
      could slow things down a lot.
    * So let's try static first, and if it's much slower, try a persistent
      runner.
      . Startup overhead is really high:
        . single thread:    4.42s user 1.39s system 291% cpu 1.994 total
        . 2 subprocesses:   17.41s user 11.11s system 341% cpu 8.357 total
    * Try persistent runners.
      . How to tell the caller the tests are done?  I guess I have to monitor
        the output, and notice when it completes.
      . Open subprocesses with pipes, merge stdout and stderr into a chan.
    . Timing:
      . 1 thread:   16.75s user 4.69s system 250% cpu 8.567 total
      . 2 threads:  14.44s user 7.42s system 393% cpu 5.557 total
      . 4 threads:  15.98s user 5.67s system 543% cpu 3.983 total
    * Incorporate the initialization tests?
    * Also I get *.tix parse errors.  I think ghc is mutating RunTests.tix
      on each run, so I have to write different files and merge them
      together at the end.
    * update test/run_tests
    fix failures
      * Util.Format_test.test_render_full_width
        . split on chinese, so maybe wcwidth is different somehow?
        . somhow is -4 instead of 8, what?  What is different about the
          environment?
      * Cmd.Undo_test.test_load_previous_history.test_load_previous_history
        threw exception: git: createProcess: runInteractiveProcess: exec: does
        not exist (No such file or directory)
        . suddenly it can't find git?  RunTests cleared the environment!
  quickcheck: property:
    notes:
      . In general for RealTimes, I'd like some which are the same, some which
        are close, and some randoms.
      ? How does shrinking get associated?
        It's encoded in the test rose tree via 'shrinking'
        Run just explores the tree, which already has shrinks.  So they go into
        Property construction.
        . Testable converts to Property
          Testable (Gen a)
          Testable (Arbitrary a -> prop) does a forAllShrink
        . So I only get Arbitrary's shrink if I do a test directly on an
          Arbitrary, no forAll.  If I want to use forAll with Gens, then I also
          have to construct and pass a shrink.  The point of Arbitrary is to
          construct both that and the Gen together.
      . Arbitrary vs. manual Gen:
        I don't really want to make all RealTime -4 to 4 integral.
        But that means I lose shrink, unless I make a newtype.
      ? Also I want falsifiable msg to pretty print the failing data.  Where
        does that come from?
        . From Q.testCase, which is from counterexample calls, which
          forAllShrink does with show.  So while I can add, I can't replace it
          without using my own forAll.
    Hedgehog:
      . http://teh.id.au/posts/2017/04/23/property-testing-with-hedgehog/
      . Hedgehog lets me use Gen more easily, since it automatically infers
        shrink, and keeps it with the Gen.
    - Integrate hedgehog into Util.Testing
    - port Util.Segment_test quickchecks to hedgehog
      . but I want to see some errors that require shrinking, to demo
        hedgehog's automatic shrinking
      . I can't get test_concat_dups to generate the 3 element list.
  - Write a test for Ui.Diff and Ui.Sync.
    . I think the easiest way to do this is make BlockCStub record its calls,
      then have a UI simulation that interprets those.  Then I can use
      quickcheck to verify a bunch of starting and ending states.  It would
      compare the incremental output against creating the visible UI from
      scratch.
    . It seems non-trivial... but maybe worth it, seeing how complicated
      diff and sync are.
    . If I make Fltk into a typeclass I could substitute a pure State version.
      But I still can't get rid of FltkStub, because the main point is to not
      link in C++.  So as long as I'm doing that anyway, maybe I don't even
      need a typeclass, but I still have to replace the PtrMap functions so
      I don't need MonadIO.
    . Except BlockC uses IO in PtrMap.modify... but that's in BlockC, which
      relies on Fltk (IO a).  BlockCStub wouldn't need that.  So unstubbed
      Fltk is in MonadIO, stubbed one isn't.
    . But how am I supposed to record calls to BlockC without reifying the API
      into a type?  And if I do that, I don't need to do this at all, just
      have Sync return that type.
    . I guess I'm not too worried that an intervening data type will hurt
      performance.  Mostly because just one more allocation is probably not a
      big deal, but also maybe if I inline the interpretation function then
      the allocation goes away.
  / delete build/test/tmp on every test run to avoid test contamination
    . test/run_tests will clear it out, but sometimes I run them directly
    . But this is pretty much limited to expecting a file in a certain
      place, which pretty much only Perform.Im.Convert does.  Tests that
      create tmp files should use Testing.unique_tmp_dir.
  complete quickcheck derive testing
    I switched back to Double for RealTime, but this means the roundoff errors
    are back.  Use quickcheck to repro them.
    + make a simple deriver that creates event and midi output skeletons
    - integrate quickcheck with generate_run_tests.py
    - assert that the reduced deriver output equals the simple deriver output
    - basic pitches: If the score was created with notes aligned to note
      starts, then every NoteOn should have the appropriate key, there should
      be no pitch bends, and "same note" should be the only reason for
      a channel split
    - basic controls: Given randomly placed control events, notes have the
      correct control curves.  Don't worry about times or midi.
    - slicing: Given some simple note transformers (tuple, place, ...),
      pitches and controls are still associated with the right notes as above.
      Don't worry about times, just that the right notes and the right
      controls.
    - block call property: a couple levels of nesting for block calls, notes
      still have the expected pitches and controls as above
    - inversion: as 'basic pitches' and 'basic controls', but controls are
      below the note tracks, results should be the same
    - stack: generate nested events, check that stack is as expected
  - count number of tests in addition to checks within each test

debugging:
  - Can I have a way to display inferred things about notes, such as reyong
    hand, and damping status?  I could integrate it back into a score but
    with text on the notes, sort of like a visual log.

midi record:
  - implement
  . Ideas for editing recorded MIDI:
    . control: realign attacks, smooth or sharpen attacks.
    . pitch: retune intervals, fix wrong note or add notes, change portamento
      speed.  Add, widen, or narrow vibrato.

REPL: repl:
  - sometimes vim fails even though the app is open:
    App/Repl.hs:274 - non-zero exit code from ["vi","-c","source vim-functions.vim","-c","source ky-syntax.vim","-c","nmap gz :call Send('LState.set_ky %s')<cr>","+0","repl-NDpIUn"]: 1
  - vim should abort the changes if I quit with :q instead of ZZ
    . But I don't necessarily want to lose the changes.  Maybe I can save the
      repl-???? tmp file in that case.
  - :h should put the selected cmd into the history
  - something like :h where I can edit a single line
    . Maybe a control key, so I can edit the contents of the current line.
  - It would still be useful to save a single unified history.  Then use
    something like :h to search it.
  - It's easy to leave vi open on a ky file and change scores.  Maybe it could
    send the score name, and reject if it's changed.
    . Another way is if I add back push notifications that the score has
      changed, I could kill off the editor.  But I'd lose unwritten changes.
  - Now that save file is a poll instead of being pushed, it takes a return
    to notice a change.  Can I restore the notification thing?  Or maybe it's
    enough to make sure I write the history to the new name?
  - I don't really use ReplStub, can I get rid of the awkward #ifdef then?
  - only write history when the cmd succeeded
  - command to open the haddock for a module
  - is Cmd.Lang.Fast now obsolete?
  - can I get local variable bindings (let x = ...; y <- ...) to work in the
    REPL?
  - :compile cmd that turns on compilation for everything except Environ
  - :browse to look in modules... can I use GHC.getBindings for this?
  - :module cmd to move evaluation context to a certain module, maybe I
    could also get rid of the need for Cmd.Lang.Environ to import everything.

solkattu:
  transcribe:
    - after 2014-06-17
    - complete Mridangam2013.dinnagina_sequence, maybe move to solkattu.
  technique:
    - kook kook -> kook nook
    - kt_ kn_ ko_ ok_ D -> kt_pkn_pko_ook_oD
  - some way to turn ktkno to kikno.
  - Transcribing ad-hoc things and sarvalaghu mixed with korvai is awkward.
    . I want to write the sarvalaghu as strokes not solkattu, not just ===
      filler.  This is because sometimes it's hard to distinguish in recordings,
      and also because sometimes it has motives related to the korvai.
    . This is like the explicit stroke stuff back again.
    . Solkattu is not appropriate because it's all one-off, so the stroke map
      is awkward.
    . Ideally I could write sarva (k.t.n.o...) and it becomes === or strokes
      for mridangam.  I guess this would become a different kind of group.
  - Can I get a rerender on save?
    . This is like the ascii version of auto integration.
    . This would be set up as an interactive korvai editor, and it could
      do things like display diffs.
  format: output:
    fix all the ruler stuff:
      . Show ruler by line instead of by section.
      . Always show the ruler when it changes, instead of suppressing the
        second half if it wrapped.
      . Mid-akshara Nadai changes.
      . Show at least until the end of the akshara when the sequence ends.
      plan:
        . Generate from the sequence instead of the text.
        . Generate a parallel ruler realization.  [(Mark, Duration)]
        . Every line gets a ruler, which wraps with it.
        . Filter out rulers unless on line `mod` n, or the ruler changed.
        . "Changed" is by structure, not marks, so wrapped ruler with the
          same structure will also be suppressed.
    - in Realize, clearly separate functions for text and html backends
    html:
      - show rulers on nadai changes
      - carry rulersEach across sections
      - strip trailing rests for final note
      - Decrease font size for higher speed.
      - For high speed split avartanam.
      - I shoud be able to display nested groups.
      - show nadai change: as above
      db ideas:
        - similar_to should be a link
        - source should be a link, click on it to see everything from that
          source
        * link to a specific spot in a recording
      - Replace a double rest that starts on an even matra with a double
        underline, or something.  This is effectively rhythmic spelling.
        . Alternately, I could put in a number for matra count.
      - Can I align by structure?
        . E.g. reductions or tri would line up vertically.
    text:
      - carry rulerEach across sections
      - I could make sections more compact by prefixing with "n: "
        . I should also be able to mark sam, to make avartanams more clear
          when they wrap across two lines.
        . On the other hand, maybe I don't really want it more compact.  It
          can already be hard to keep track of where I am.
      / formatting for Solkattu2018.yt_mannargudi2 is hopelessly messed up.
        . Actually not really, it's just the nadai change not being marked.
          See "nadai changes are invisible".
      - Colors stop right before the last note, not on it.
        . It's probably because I need to highlight the end of the group.  Can
          I use lighter gray?
      - If groups touch each other then I can't tell them apart.  Maybe
        I should alternate two colors.
    / Solkattu.notation should output an abstract formatted output, which can
      be rendered to HTML or ASCII.
      . I added notationHtml, which is more error-prone, but simpler.
  - What if I just renamed Sequence to S?
  - automatic sarvalaghu variation
    . In Mridangam2018.e_323s, all of the 3 and 2 groups are mix and match,
      and the order is also mix and match.  There should be some way to
      generate sarvalaghu variations, where I can use these to either come up
      with material, or restrict the pattern to 323 or something but allow the
      specific patterns to vary automatically.
  What would a web UI look like?
    . Have a field for the where block, a field for mridangam (or other)
      strokes, and korvai fields.  Separate entry for name and tags.
    . Enter sends it off, where it gets interpreted, and mridangam and
      konnakol realization appear next to it.  There are probably examples out
      there for semi-securely evaluating haskell, but even without them
      I think it may be hard to do evil things if you can't import modules,
      and I should be able to run as nobody anyway.  The main thing is
      noticing and killing a loop.  There should be haskell execution code
      in the IRC bot or evaluate expression web page thing.
    . The DB goes in a separate repo, which is edited and synced from the web
      UI.
    . To render sounds, I don't know if there is software to host and run a VST
      automatically.  If I have my own sampler it's easy though.  I can either
      run karya headless, or just bypass and generate im notes directly via
      the solkattu library.
  - How can I do a reduction with irregular bits?  E.g. replace the
    4 matra version tat.__.din.__ with ta.ka.din.__.
  . Solkattu2017.c_17_07_13 is showing the difficulty of the
    (solkattu, stroke_map) approach, because there are too many meanings
    for taka and din.  Really if it's meant to be useful for different
    realizations, I should emphasize the reusable phrases, so I should
    try to figure out ways to make that easier.  For instance,
    understanding about reduction is good for that.
    . To an extent, it's acceptable that it's harder than just writing
      the strokes, because I'm trying to find a more general
      representation.
    . Still, I could make it easier with tools:
      - Lint to show unmatched stroke sequences.
      - Diff to compare realizations before and after I change the
        stroke map.
        . How can I keep them both around?  If I do it at the haskell
          level, I have to copy the stroke map, and then have multiple
          stroke maps for the same instrument, and then diff between
          them.  This might be useful in general to highlight different
          players style.
        . If I do it at the ghci level, I'd have to somehow stash the
          previous previous Korvai or realize output someplace that
          survives a reload, like write a file.  Then add a function to
          do a text diff with the file contents.
  / Final notes should be cancellable, so e.g. tri will cancel for the
    first two.
    . E.g. tri (taka.tam.__) is ok when it's at the end, but when I nest
      it: tri (tri (taka.tam.__)) I need to rewrite as
      tri (tri_ (tam.__) taka)
    . Actually, don't I already have the karvai mechanism for this?
      What if I do tri (taka. karvai tam.__)?
    . Not quite, I'd have to do 'tri_ __ (taka . karvai tam)
    . The problem is I don't really have a well defined notion of when
      cancelling is ok.
    . Or maybe it's better to use tri_ after all?  Are there cases where
      either I can't express with tri_, or it's really awkward?
  - Some strokes change realization based on the tempo, e.g. 'od' when
    slow to 'o' when fast.  I could add a stroke attribute for that, or
    I could try to do a global instrument realization heuristic.
    . Not just individual strokes, but a whole section can change, e.g.
      okookook -> nakatiku.  This implies just a realization heuristic
      won't be enough, though maybe I want it anyway for things like
      dynamics.
  - Can I put StrokeMap and Patterns together?  Then I can put standard
    strokes along with the stroke map, and override them together.
  - ensure that later entries in the StrokeMap override earlier ones
  - have a mode to warn about unused StrokeMap entries, and overidden
    ones
  karya integration:
    - I could emit groups as blocks with clip or Clip.
      . But then I lose technique.
      . Unless I also implement that in karya, I'd need a mridangam-specific
        clip and Clip.
    - LSol.insert_* doesn't clear and replace existing notes
    - I want to be able to insert all parts of a korvai in sequence.
      . If I make LSol.insert take [Korvai] then I can use take etc.
      . But it's easier if I get rid of multiple sequences per Korvai.
      . Or keep multiple sequences but take [Index].
  sarvalaghu:
    . Fill it in based on position in the tala.
    . Sometimes there's a final note, e.g. D that replaces the first 1.5
      aksharas.  I don't have a way to notate it.  Maybe a sequence
      needs a separate final stroke, which is played when leading back
      to sarva.
  ? Some patterns are end-weighted, e.g. thom in sarvalaghu.
    . I can just add a rest to the beginning, but I still need to
      take duration from the previous note, e.g.
        d.d.n.n . su (n.d) .d.n.n
      should be ' d d n nnd d n n'
  / rename tri to tir, for tirmanam?
    . Nah, a bunch of changes for no big gain.
  groups:
    This whole groups stuff is still a bit of a mess.
      . Having to keep group count up to date in 'Realize.realize'.  I could
        fix this with a nested FGroup, but of course introducing other
        problems.
      . I think the group _split compensation for After in
        Realize.split_strokes is incorrect.  I think split_strokes or the
        whole collect group thing should be recursive.  Making FGroup nested
        might be good for this.
      . I *still* don't really understand Duration vs. Matra vs. FMatra.
        I think the notion of local FMatra is required.  Duration is useful
        at the DSL level but it only makes sense at the toplevel which means
        it's actually error-prone.  Maybe I should get rid of it entirely,
        except at the global level where I can be sure it's right, which
        basically means after 'Realize.realize'.
      . Can I do quickcheck tests for various durationOf and matrasOf?
      . Do some tests to make sure I understand Solkattu.durationOf and
        Solkattu.matrasOf.

    - Get Nakatiku out of Pattern.  I can use the Standard tag, but I like
      the unexpanded form.  I think this does need named groups.
    - Don't make tk and tktu groups, or at least don't highlight them.
    unify patterns and groups:
      . Groups have an optional name and highlight :: Bool.
      . Then a realizeByDefault :: Bool, which says if realizePatterns :: Bool
        will replace it.  Otherwise it can use name or "p" <> matras.
    - Various Notation functions like 'spread' should work with groups.
  - Ornaments to fill in karvai, e.g. with taka and takatiku
  - Mark for variations, e.g. mark a 'tri_ x 345' for 345.x.345.x.3333.
    end4 (tri_ x (p6, tk.p6, tknk.p6)) -> can play final as p6.p6.p6.p6
    . Variation markers put a branch in the realization, so now I have
      multiple realizations, and I need some way to not just enumerate
      them, but choose a certain path.
    . This is also part of the intensity pattern, where the final repeat
      may have an alternate more intense realization.
  - Different tags for patterns within a Korvai, e.g. for performance
    and exercise variants.
    . Also useful to mark the sections, e.g. development, and related
      sequences.  Ideally I could have separate stroke maps, but maybe
      that's overkill.
  - I should be able to add multiple realizations of the same
    instrument, keyed by string, e.g. for different mridangists
    realizations.
  - Duration assertions, e.g. matra 4 (ta.ka.din.na)
  pakhawaj:
    - integrate pakhawaj bols
      . I think I need "kre" support.
      . The other thing is tette infer.
    - Copy the stuff from Derive.C.India.PakhawajScore.
  reyong realization:
    - some way to select between melodic and rythmic realization, and
      transposition for melodic
      . This could be the same as the emphasis mechanism, if I extend
        it to attach Attributes.
      . Or if I have alternate StrokeMaps by name, then I can use that.
  - Emphasis or automatic variant versions of patterns, e.g.
    . kt_kno -> ki_kno.  k_t_kno -> i_i_kno, i _ i _ ktkto _,
      pu_ pu_ ktkto
    . The emphasis note can be i, or pu, or maybe u, or p+u (play like
      kre on pakhawaj).
  - Mridangam patterns can vary by intensity in addition to duration and
    family. How can I represent and realize that?  E.g. the final of
    a group of three can be higher intensity.
    . It can also be a variant pattern, e.g.
      k_kto k_k_kto k_t_k_kto -> repeat 4 k_kto
  - replacements, e.g. ta.ki.ta -> nang.__ . su (kita.taka)
    . use this in koraippu_janahan
  / I think I need an absolute SetSpeed, so I can pad a number of
    aksharas, regardless of the speed.
    . I also need it to rest by Duration, or to turn that into matras.
    . At the score level it's most convenient to work with sollu-matras.
      These are relative to nadai, but that's actually good.  With speed
      changes I can get fractional matras, and operations can actually
      work as long as the speeds line up and I don't have to drop
      half of a sollu.
    . However, for things like 'align', I need to know that tala and
      nadai, so I can emit a certain number of aksharas.
    . Actually since align is used at the top level, I can assume s0.
  - extend Karvai to take a minimum number of Rests before it applies.
    Default to 2, but a chapu might require 3.
  - This turns into a general way to represent unparsed expressions.
    . Text shouldn't have ShowVal, it should be Symbol, and then CallId
      should have a separate type, its ShowVal doesn't need quotes,
      unless there is a space.
    . Then Unparsed represents parseable text, so actually ShowVal
      should return that.  Is it worth having a separate type over using
      Text, though?
    . I should be able to parse Expr Unparsed without the intervening
      ShowVal by directly parsing the Unparsed vals.
  variation:
    - 345 x 345 x 345 can be transformed to 345 x 345 x 3333, or generally
      any arithmetic progression.
    . This is automatic derivation of variations.
      transformations:
        . karvai u u u -> u i u
        . X X X -> gap X, gap-1 kpX, gap-2 kpnpX
        . X X X -> gap X, gap-2 oktpX, gap-4 ktktoktpX
        . alternate realization for 3rd repeat: 345 345 3333
        . __3 -> __2.p or __2.o if o follows
        . variation for a phrase prefix, usually on its repeat:
          k_k -> kpk, or k_p -> kpt
        . stroke substitution in a transformation, e.g. reduce or expand:
          pk -> kk, e.g. k_kto, k_k_kto, k_t_k_kto.
      . If I can apply them as a postproc, then I can get even random
        variations.
      . Or maybe I should write them explicitly, but make them easier to
        write?
    - Higher level variation, e.g. 666 666 666 -> 555 666 777 or even
      777 777 777 -> 567 876 789.  Actually the latter seems not so
      interesting.
    - Repeat oriented variation, e.g. 3 5 33 5 333 -> 333 5 33 5 3
  - Implement PatternFamilies so I can have 6 8 6 7 6 5, or even just
    distinct realizations within a single korvai.
  - Should I change mridangam notes to be consistent with Solkattu.Dsl?
    I have to put thoppi on the left, for 'od' instead of the keyword
    'do'.  And I have to change tha to p instead of +.
  . Conditional derivation that depends on position in the tala, e.g.
    thali / khali.
  alternate realization
    - kendang pasangan
    - kajar
    - gangsa
  ? Crazy idea: it might be nice to use underline or double underline
    for faster.  Is there a way I could get the editor to display
    special brackets as underline, and then turn those special brackets
    into a 'faster' call?  I think if I'm doing this, I definitely need
    a preprocessor, though if I keep basic haskell syntax and define it
    as a translation to haskell, then I can keep all the usual features.
    . Alternately, use syntax highlighting.  Sufficiently fancy
      highlighting could highlight 'faster (...)'.  I don't think ascii
      can do double underlines, though it could do italic+underline or
      something.
    . I could also try to automatically align by time.  I imagine
      a sufficiently advanced vim macro could do that, e.g. bind ^tab to
      annotate the current expression with line info, evaluate it, and
      align the current line, or try to move the cursor to the next
      beat.  Maybe not worth it though, since the whole idea of the dsl
      is that time can be abstract.

Cmd:
  Repl:
    - LNote.sort_on_pitch is still not right.
      . With multiple chords I get stacked up extra tracks.
      . Turns out this seems really complicated.  Do I really care that much?
  - Paste between blocks with different track layout is awkward.  Can I have
    a note-oriented paste that reuses or creates the track structure?
  - ModifyNotes doesn't seem to understand about parent note tracks.
  - Interpret a midi file with keyswitches back to the attrs.
    . This is so I can load VSL examples and learn from them.
    . Should it be a score transformation, or start from the parsed MIDI?
    . MIDI seems easier because it's already in a linear format, while for
      the score I'd have to interpret it into one.
    . But then I need to pass the instrument mapping to Midi.load.
    . Maybe not really worth it?  For learning I can load in reaper and just
      watch the VSL UI.
    . But still worth keeping existing work, because I'll need something like
      that for MIDI record.
  - Figure out exactly what bad things could happen because of the
    Ui.fltk_event_loop race.  Also figure out what kind of cancelling I'd need
    to fix them.
  - Write a fancy tile like ViewConfig.horizontal_tile but guesses if you mean
    to tile vertically.
    . I have notes in ViewConfig.auto_tile, but it turns out this is hard.
  - Create tempo by "stretching", i.e. select start and end, and create tempo
    mark that will cause the start point to be played where the end point used
    to be played.
  - give Cmd.ModifyEvents.Track the ability to change the track title?
    Cmd.Repl.LPitch.change_scale and to_relative could use this.
  meter / timestep
    - timestep 64*2 skips two 's', because 's' is the minimum match
      skip should be ignored when the match is a larger rank than exists, or
      maybe step should fail.

  ruler:
    - meter type and the construction functions should be integrated more
      tightly
    - LRuler.inject, opposite of extract, replaces sub-block rulers
  Cmd.Edit
    - Make Edit.cmd_invert_orientation set orientation based on the first
      selected event, so I can easily set all to the same.
    - alternate finale-like note entry: hold down step key to set step and
      turn on edit mode, but only while the key is down
      (merge will clip them to the next event)
  copy / paste / Clip
    - clip block should use the ruler, just to make it easier to look at
    - clip could also copy over the skeleton
      It could use it to make sure the paste is compatible, but that might
      be more of an annoyance than a convenience.

  Undo:
    - Suppressed undo for val edit is surprising since I tend to do a lot of
      edits without leaving val edit.  Maybe don't do it for pitch val edit.
      Try going back to using the name to suppress, but ignore cmds with no
      name.
    - Add a "revert within selection" that searches backward for the last
      change within the selection.
    - Along those lines, should each block have its own independent history?
      This is supported naturally by the git layout since each block has its own
      file.  Wait, actually it's track, and that would be awkward if I undo one
      block and it changes tracks on another.  How do a say what position
      a block is in the history in that case?
      . One appealing thing is that I don't necessarily want things like config
        changes to be included in undo.
    - Visual display of undo history, because stepping back one-by-one is
      a bit of a hassle.

Derive:
  - A block with logical range called at time 0 gets messed up.
  - signal-offset: Add time offset to TimeVector
    . event_transformed_controls etc. are really annoying.  I can get rid of
      them by building the translation into Perform.Signal.
    . The downside is that every signal gets an offset, even though it's
      just for Score.Event ones, and their offset is all the same.  But still,
      what's another Double in signal full of them?
    . However, Warps also have it, so I could take that field out of the Warp.
    . I'd want to add an X offset to TimeVector.Boxed and Unboxed, but those
      are type aliases so they work with the Vector.Generic functions.
      So how can I resue Vector.Generic?
    . Presumably I could put my new types in the Generic.Vector class too, but
      that might actually be wrong since then they would ignore the offset.
      So maybe I just stop directly using the generic functions.
    . I also want to consider that I may want to have a TimeVector Val to
      replace the Environ.  So it would be nice to eliminate the duplication
      between PSignal and Signal.  Presumably I could do that by putting them
      in a 'class ToVector a where to_vector :: a -> TimeVector.Offset ?',
      then I can either re-export the shared ones directly, or specialize the
      type.
    . I could make an Offset wrapper and have all the TimeVector functions
      apply the offset.  But it seems like a lot of work for what is really
      just a way to fuse multiple translations for just Score.Events.  It's
      only worth it if I do multiple translations before unpacking.
    . I could put just the event controls into Offset, and require a translate
      to get the control out.  This would be like event_untransformed_controls
      except put it in the type.
  idiom
    - In string-idiom, the end of the attack curve always coincides with the
      start of the next note.  There also could be an attack prepare time,
      analogous to the release delay.
  sekaran
    How to apply sekaran?
      . >hang -> sekar abab -> notes
      . I want to change the pattern, so the problem is how to set an env
        var for a range on one track?
      . I can add a 'sekar-pattern = abc', but I need to repeat it whenever
        there is a gap.
  fancier randomization
    . How much a note differs depends on its neighbors, so it's not an even
      distribution.  Use brownian noise, or a fractal subdivision scheme.  But
      it's also constrained in how far it can wander from the base value.
      Regardless, I think this means I need history, so it can't be
      a stateless control function.
    . Divide on instrument and hand, so each part gets its own individuality.
    - randomization should be centered on a value, with variance as a signal,
      so I can turn accuracy up or down.
    - Randomness could have some hysteresis, so I can e.g. reduce omit chance,
      but not get isolated notes.  At the extreme setting, it means it turns
      on in a slightly random spot, but stays on after that.
      . Is there a simpler way to get this effect?
  tracklang: TrackLang:
    - Keyword args.
      . A problem with environ defaulted args is that if I do e.g.
        'merge=add | a=b | block', then all of 'block' will have merge=add.
        There's no way to set it just for 'a=b'.  So they're not necessarily
        a great substitute for keyword args.  Also keyword args should
        complain if you give one it doesn't understand.
      . I think a=b syntax is available, but do I want to make a Val out of it?
        It would be resolved by Derive.Sig, and not actually make it to calls,
        but Quoted is like that too.
      . And realistically it seems really invasive to support a=b if it's not
        a Val.  But I wind up with weird things like a=b=c.
    generalize sub-event calls
      - Generalize sub-event calls so that they can also take block names.  This
        is just another way to write sub-tracks, perhaps more convenient if
        I want them to be independent.
      - Also generalize them so if I put it as a transformer in a track title,
        the track is treated like a sub-event call.  This way I can apply a
        transformation to the whole track without needing to wrap it with an
        event.  Paired with the Sub.modify_notes macro feature, I can have
        a track with its own little language, e.g. pakhawaj bols.
        . Could do this by making 'ctx_sub_tracks' available in the track title
          call.
        . I think there were calls in Prelude.Lily that would be interested in
          a more defined distinction between track and note level transformers.
      - Could also do a block-level thing.
    - Perhaps I should have a separation between "" as called by Util.note by
      other calls, and "" as called from the track.  The problem is that it
      applies Flags.can_cancel at TrackTime 0, which is only appropriate for
      a direct call from the track.  This is the reason for
      Gangsa.realize_notes.remove.
      . Flags.can_cancel is now obsolete, but maybe the issue still stands?
    - I was confused because I wrote '%just-base = (nn (c3))' instead of
      '%just-base = (hz (nn c3))'.  Can I use type tags to catch that sort of
      thing?
      . Hz doesn't have its own type, so it winds up being Untyped.  But any
        type can coerce to Untyped, so it can't complain if you passed NN.
        I could make Typecheck Double require Untyped, but that would break all
        the stuff that doesn't care about types.
      . Ultimately, this is because pitches take a PitchConfig, which takes
        ControlValMap, which is untyped.  I started a branch making it typed,
        but eventually lost interest since it seemed overly complicated.
    - Rethink if I really want track event calls in TrackTime, rather than
      normalized time.
      . Implementing c_sequence I was confused how stretch was applied twice,
        since Eval.eval_quoted doesn't normalize the event duration.  Same
        problem is in Gamakam2.  It's error prone that you can place the note
        via both Derive.place and via the Derive.info_event.
      . On the other hand, working in TrackTime is convenient, e.g. in gangsa
        norot I can place notes based on the passed-in dur.  If it were
        normalized, I'd have to unwarp back to TrackTime... can I even do that?
      . Details are also in "Derive.EvalTrack".
      . Adding the repeat call was unintuitive because deriver placement is
        unintuitive.
        . Ideally I could just say (0, 2), (2, 2) and it would work.
          Instead, I get (0, 8) and (2, 8)
          This is because the block isn't normalized, so stretch by 2 makes it
          4, then the stretch by 2 for the event goes to 8.
        . This is so that just 'deriver' by itself gets it right.  If I instead
          made deriver always normalized, then the above would work, but
          I would have to do 'Derive.place (Args.start args) (Args.duration
          args) deriver' to avoid it always showing up at 0-1.  And actually,
          I couldn't do that from a transformer, because what about the next
          transformer?  I should instead have each transformer be in
          normalized time.  'repeat' becomes
            [Derive.place start (1/times) | start <- Seq.range_ 0 (1/times)]
        . For blocks, it's actually almost that, except I have to translate
          back by the start time first.  This is because blocks are already
          normalized to the event duration.  I think?
    Typecheck coerces to TypedFunction as a common signal type
      - It turns out this is not so useful because a default TypedFunction
        doesn't have a default control name like a Sig.typed_control does.
        The documentation is also worse.  The way to fix this would be to
        let the default be any coercible type.  But to do that and be type safe
        I'd want a separate class for pairs of types that can definitely be
        converted.
        . Possibly a way around is to include ControlFunction in ControlRef...
          but why do I want so much to pass control functions?  Especially since
          I can already pass a concrete signal as a ControlSignal.
    . It would be nice to be able to have an arg default to ControlRef and
      have typecheck coerce to scalar via Call.control_at.  But once again the
      problem is that I can't coerce to a type different from the default.
    - if I had a boolean type, I could generalize calls in Conditional:
      . when-e key -> when (env key)
        when-e key val -> when (= (env key) val)
      . when-c 1 cont -> when (= %cont 1)
      . if-c< cont 1 a b -> cond (< %cont 1) a b
      . However, they get more wordy, so maybe I don't want it.  E.g. for
        cond I'd actually want a 'switch %cont' and then I need either
        partially applied functions, or just write 'switch<'.
    - replace VAttributes with a general purpose VSet.
      . No users though?
    - there should be a character that triggers a parse failure, which is used
      by invalid ShowVal instances like ShowVal Pitch
    - it's confusing how some calls expect env vals like 'x = 1' and some
      expect controls like '%x = 1'.
      . The obvious way to solve this would be to merge env vals and controls,
        but that's a big change.
    - Track caching is too fragile, if I add a track with scope over everything
      then I get no caching.  Instead I should cache the bottom note track, or
      perhaps every note track.  But that doesn't work because they're all
      sliced up.
  Derive.Sig:
    - Support pairs, e.g. a list of pairs of arguments.
      . many_pairs :: (Typecheck a, Typecheck b) => Text -> Parser [(a, b)]
      . Can I generalize to triplets etc. without a separate function for
        each?  Also, could I reuse many / many1?
      . Can I have a Typecheck instance for (,)?  No, becaues it comes from
        a single Val.
      . I would have to turn Sig into a real parser.
    - Try writing a new Typecheck / Sig which is a real parser.  It can have
      backtracking and nested parsers.
    - if I add an Alternative instance to Sig.Parser I can write arg parsers
      like 'Sig.many xs <|> Sig.many ys'.  I think.  If I wind up with something
      else like Derive.Call.Val.num_or_pitch it would be worth trying out.
      . E.g. Conditional.c_if_c takes: Symbol (Number, Quoted)* Quoted
      . Implement empty as pure (), then (<|>) should try left and if it fails,
        try right.  Doc is (x | y).  'some' and 'many' are like Sig.many1 and
        Sig.many, except they have to backtrack.
      . But derivation may evaluate expressions and check the type after that.
        Do I really want to do that with backtracking?
  postproc
    performance details / humanization
      - irregularize runs based on fingering patterns, e.g. groups of 3
    - retune a note depending on the previous interval (e.g. sloppy pitches
      when playing quickly)

  tempo track:
    - Nested tempo tracks at the toplevel block should normalize like they do
      when called.
    - Nested tempo tracks are probably broken for hybrid and absolute tempo.
    - Nested tempo tracks are probably also broken with a logical start.
  note calls:
    - retune call: differences based on speed should be more obvious, so that
      should also be on a curve.
    + chord calls, with automatic dyns for the notes.
      Originally I intended each note to go in its own track, with the idea
      that it takes about the same space but is more powerful and flexible.
      But it's not quite true, because the extra track is there for the whole
      block, though perhaps that's a side-effect of having blocks which are
      too large.  More compellingly, chords can automatically fiddle with dyn
      and start time, and can also interpret chord symbols.
    mridangam:
      - Automatic inference for Ki vs. Mi, e.g. in sarvalaghu.  E.g.
        dxd -> dld, but dxpx -> dkpk.  Also it can change based on speed and
        emphasis.
      - connect kendang, reyong, etc. to 'tir' and 'seq' calls.
      - make india.mridangam seq call align to the end for -0 dur
      . It would be nice to alternate mridangam and kendang tirmanam, e.g.:
        mridangam, kendang, both.  But I'd need to either write the tirmanam
        in solkattu dsl and give it a name, or have a mini solkattu dsl, e.g.
        with syllable breaking:
        . tri-mk 'kitakitataka nakadit_ talang_ talang_ ta' lang_
      . I'd have to have a standard stroke map, but I'm not sure how well that
        would work in practice.
      . reyong: takadinna -> cccc, nakadit -> i12, talang -> +O
        . c = cek, k = kempyung, 0123 -> relative scale degree, .+ -> byut,
          oO -> byong
        . I could also have shift up, shift down annotations, like speed or
          nadai.
      - Perhaps mridangam should automatically transpose the octave to be within
        its range.
        . I can use something like Cmd.Instrument.Bali.wrap
      - tha is too loud... I can compensate by using -, but maybe the scale is
        off.  Velocity should be logical, so if you play all at the same
        velocity it's like the same dynamic for all strokes.
        . Or I could make + be 0.5, and * be full volume.
      sarvalaghu
        - get them from Score or MridangamScore.
        - adjust to the talam
        - subdivide at slower speeds
    pakhawaj bols
      . Score integrate to convert bols to low level calls
        . Actually score integrate doesn't work like that, it just copies the
          input.  It would have to be derive integration.
      . Or maybe just interpret the bols directly, but due to context
        sensitivity they need to be all processed together, not as separate
        calls.
        . In general I don't have a way to interpret a track as a whole.  This
          is the "track call" thing I was thinking about a long time ago.
      - Add an input mode for bols.
    bali:
      - loop in save/bali/teruna-jaya leads to long notes
      - >kantilan | unison prevents nyog from working
      - kajar: automatic hand muting as with reyong.
      + add additional legong and wayang tunings.  Probably 'tuning' would be
        the most appropriate, but it's already using for umbang/isep.  Maybe
        saih=umbang/isep?  Or keep tuning the same and use laras?  Kelamin
        would be cheeky but only appropriate to kendang and not even Balinese.
      legong scale:
        - add isep to *legong
        - pick better nns for pemero notes 4 and 7
        - dotted cipher notation should use 4 and 7 instead of 3# and 6#.
      kotekan: gangsa:
        - >gangsa instrument, which is pemade + kantilan
          . It can be a alias of `multiple`:
            gangsa = multiple "(inst=pemade) "(%t-oct=1 | inst=kantilan)
        - nyog polos first can be inferred based on whether it's a major ruler
          division.  But should I?  I can just write 's+' to be explicit.
        - Simplify reyong norot in the same way as gangsa norot.  I also
          want to add the prepare_start feature.
          - Can I remove Once now?
        Kotekan kernel notation can be hard to use:
          . The kotekan call can be hard to use for irregular sections like:
            . |       |       |
               3-23-3-23-23-23-5
              2-12-2-12-12-1234-34-4-3
              |       |       |
              -3-23-3-23-23-21-
              2-12-2-12-12-1-10
              |
            . 4-3-4-3-44
              12-212-211
          . Maybe just a literal "once" kotekan call?
            Start at 0.
          . Maybe it's not "once" but "normal alignment", so maybe I can unify
            this with orientation.  But I think I need an explicit Positive
            orientation call like 'ko', rather than using event orientation.
          . For end orientation I still want to align to the end, but can I
            do that just by rotating the kernel?
          . I could say rotate or not based on the leading 'k'.
            (1)-12-1-21
          . Actually, maybe rotation isn't the problem.  Instead I have places
            where the inference rules don't work because the pitch is moving:
                 3-23-21
              (2)-12-1-10
            . Can I infer?  (2)-12-1-10  -> ... not sure
            . Or write both? ke '-12-1-10' '3-23-21-'
            . I can, but it still takes longer than just writing it out.  And
              if it's not pitch-independent, there's not much benefit to the
              specialized kotekan notation.
        - k '-21-21-21-21-12-' infers with 1 below the pitch.  It should be
          . 43-43-43-43-434- 3-43-43-43-434-3
            1-21-21-21-21-12 -12-12-12-12-1-21

                            56-56-56-56-565-2
            2-32-32-32-32-23 23-23-23-23-2-32
          . Write as:
             -21-21-21-21-12- 12-12-12-12-1-21
          . Maybe it would be more predictable to say that 1 is always the
            pitch.  Then I can know if sangsih is above or below by looking at
            pitches.
            . 2-32-32-32-3232- 32-32-32-32-323-
              21-21-21-21-2-21 6-16-16-16-16-612
          . I can get it work, but it takes a lot of thinking.
        - Maybe have a character extend previous note.
        - Another option is to write the polos notes directly, and then
          a parent call that infers sangsih.  This avoids the problem where
          I have to figure out how many little numbers.
          . But if I'm going to do that, why not just use +p, +s, and +k to
            write the whole thing explicitly?
          . Well, that's quite a bit more fiddly.
        - in norot -> nyog transition, the last norot note cancels the first
          nyog note.
          . sangsih 6i cancels out the explicit 5e
          . Since {final} cancels normal notes, this is working as intended, and
            I can fix with final=f or 'strong', but it's surprising.  Maybe
            I should only have a final for negative events?
        - make gangsa and reyong norot and noltol dispatch to 'm' instead of
          directly applying +mute.  Or should I have a call for a weak note, and
          leave 'm' for an explicitly muted note?
        - gangsa zero dur mutes too loud
          . Really I need loose and tight mute, but I'll have to do my own
            samples, or maybe add a loose mute as open with just envelope.
        - noltol puts a mute stroke after a final note.
          . It's becasue it has a lower threshold, but not an upper one.
            But really it's not the threshold, but the form, noltol should be
            during kotekan.  So maybe I should really build this into kotekan
            calls.
        - clip should be end-weighted.  If I used a negative duration I could
          make it based on that...
          . Wait, isn't that what Clip is?
        - generate all possible kernels following some playability rules,
          e.g. no more than 2 notes in a row, only one rest
          . I could then use that to automatically select a pattern for
            a given destination, with some constraints like playability from
            the previous pattern (no fast jumps), above vs. below, telu vs.
            empat.
          . Then do that to make a random kotekan for ngubeng and majalan.
        - in Gangsa.realize_kotekan_pattern, pass Nothing as the start to not
          limit the start
        - inst postproc can interpret +mute as either just a mute, or open, or
          in between depending on %mute.
          . Then I don't need a configurable mute for
            Gangsa.gangsa_norot_arrival.
          . Reapply the 'm' call instead, and override that as appropriate.
        - an optional special pattern which switching between kotekan and back,
          e.g. 112-2-2-
      wayang in octaves
        . pemade: >p=>p-umbang | >s=>p-isep
          kantilan: >p=>k-umbang | >s=>k-isep | %t-diatonic=5
        . I could do it with >wayang-both that emits >wayang-p and >wayang-k. Or
          just call the score twice, once with transpose +1 oct.
        . I definitely want two calls because then kantilan randomizes
          differently.
        . Or I could create the kantilan as a integration of the pemade, so it
          can still be modified. I think this would want a "score integration"
          which just copies and merges the events directly, and doesn't do
          the intermediate derivation.
        . I could add inst aliases, e.g. >umbang = >p-umbang, etc.
          Or a note-track call: '>umbang = "(>p-umbang)'
          This can't be done with call aliasing because it's actually
          'note-title >inst', and anyway wouldn't help with 'inst = >x'.
        . The intended way to do this is have > instrument, and then set it in
          the caller.  But then you can't put >1 inst on the same block.
        . But this way doesn't work if I want differences in the kantilan
          version.  I would have to do correspondingly more copy and paste to
          replace the bit I want to change.
        . Ideally I'd like something like integration: everything is
          duplicated with no extra work, but an integration is available to
          edit.  But it would be a kind of "deep integration", where
          I duplicate the entire structure, from score on down.  Score
          integration could theoretically do that.
      trompong:
        - octaves shouldn't be able to infer damping
          . E.g. (6e 6o 6o, 5e - 5o)
        - I need a better way to notate a section as lower octave.
          . vv doesn't work is a note parent.
          . This is similar to octaves notation for gender rambat.
        - split to ngembat
          . There are several ngembat variations:
            . fast:
              5 61    35 61
                 1        1
            . slow:
              561   53561
               21      21
        - double note, like oo in kajar
          . tabuh-gari, @b4 2.5t
      reyong:
        - Damp level is way too high, I have to put %damp=.2 everywhere.
        - remove kilit, isn't it just norot now?
        - for infer-damp, also infer damp level
          . Damp gets louder when notes are closer, or faster.
          . Also longer note is a quieter damp, or just say if the length is
            over a threshold don't damp at all.
        - How to configure open and closed damping?  I can currently do it
          by adding +open, but that might be too broad because it also applies
          to +cek.  Or I could always damp closed if that sounds good.
          Or I could infer it based on speed.  Otherwise, I can change the
          attr to +loose-mute or +tight-mute to explicitly configure.
        - kbd entry for /, X, O, + etc.?
        kilitan: norot:
          . How to do norot for real?
            . Each voice is semi-independent, and may have different
              preparation patterns and times.  But then sometimes they
              coordinate.
            . Variations are random, but frequency is controlled by
              "kewayahan".
          variants:
            - controlled by variant control
            - omit notes
            - hardcoded variants, e.g. p1 on dong
            - Delayed note, e.g. on ding, oiioioi
            - Pickup can be iioi style, but parts that don't have the pitch
              often play the normal kilitan, or a passing tone.
          above speed threshold:
            - omit notes
            - Entirely different fast patterns.
          - Also I want to be able to control the dyn.  There should be
            a single control for +mute dyn.  Actually I already have that
            if I multiply %damp, right?  Still, explicit +mute notes and
            kilitan +mute notes are stronger than damping, so I need two
            I think.  Damping should default to a fraction of +mute dyn.
          - write an alternate style of kilitan, e.g. with a 6 note scale in
            tisram
        kotekan
          - reyong-voices doesn't seem to affect 'k' 'k//' and 'k\\', but does
            k_\ and k//\\ (and shouldn't the last be k/\ for consistency with
            gangsa?).
          - support high dung for position 4
      gender:
        - rambat damping emulation: notes ring on by default until they can be
          damped.  Damp at the first opportunity, where opportunity is defined
          as a break with no notes for a certain amount of time.  Can only damp
          two neighboring notes at a time.
  india: gamakam:
    . Get rid of gamakam1-4:
      - Remove gamakam4.
      Save what I want from 1-3 and remove.
        - gamakam1:
          . kampita and nkampita implementations
        - gamakam2:
          . use @ begin; middle;* end
          . middle can be kam, to get multiple oscillations + lilt as
            appropriate
          . It has a separate implementation of kampita, which might be more
            modern.  Also I still like the idea of a stretchy middle section,
            and I think I'll need something like that to write higher-level
            gamakam.
      - Remove ; syntax when gamakam2 is gone.
    - How to represent sangatis?
      . Also what about accumulating phrases, as in kuvalaya dala or mosaboku?
      . Maybe define a time range, then an edit in that time range will cause
        a score derive to be appended to the end of the range.  Since the
        "repeat" mark is also included, as soon as you edit the next section,
        it appends another one, unless you delete the repeat mark.  Editing
        a section will cause integrates down the line.
      . This would be a new kind of score derive that integrates into the
        same block and tracks, just at a time offset.  I could do the same
        thing with blocks, and maybe I should to avoid the additional
        complexity of a new "within track" integrate.
    - Bowing ornamonts.
      . gradual attack, and "puff" attack, ...?
    - I think Gamakam4 doesn't test next event pitch, e.g.
      Gamakam3_test.test_sequence on '!!-v-'
    dyn:
      - I think T is messed up, it seems to not know it's 0 dur.
      - Add support for '_' and, why not, '.'.
    - '.' call on the note messes up gamakam
    - 'v' for next pitch is wrong when the next pitch isn't on a note start
    - There still seems to be a case where prev pitch is wrong, it has to
      do with a '--' event.
    - And another prev pitch bug:
      [ (">", [(0, 3, ""), (3, 1, "")])
      , ("*", [(0, 0, "2d"), (1, 0, "3s"), (2, 0, "3r"), (4, 0, "3s")])
      , ("*", [(0, 0, "!^20"), (1, 0, "!0="), (4, 0, "!=")])
      ]
      . Last note should get 3r, but instead gets 3s.
    . For the violin, I want to experiment with other controls, e.g. pitch
      slides also do less bow-force, or dyn can reduce bow-force and
      bow-speed.

    - overshoot "curve" for 'smooth': over2 over3, depending how far over
    . instead of hardcoding specific times, I should say short, medium, long,
      which can vary and have some randomization:
      . short, medium, long: -s = "(rnd low high) | -m = .. | -l = ..

  control calls:
    - signal transformations: +, *, max, min
    - saturation limit, e.g. flatten sine wave but without clipping
    - continuous tempo warping for signals
      tempo: "2" -> "1", "2", cont: "2" -> "i, 1", should emit a bent line

  control functions:
    I'm unhappy with control functions in general - NOTE [fix-control-functions]
      . More details in BaseTypes NOTE [control-function]
      . They duplicate Deriver but can't use it
      . they add another layer on top of controls that you have to take into
        account manually.
      . Also, depending on the pos means the signal is no longer a continuous
        function, and can't be displayed as a line.
      . Making calls all take Call.Function was my attempt to abstract that
        away, but I wound up giving up on that because then the default of an
        optional arg would have to be a Function which is then unshowable.
        To solve this I would have to make a total 'coerce' for Typecheck.
      uses:
        . Randomization, with various ranges and distributions.
        . Some CFs like cf-swing could just be another signal, I only do it as
          a function for efficiency, which is due to my choice to make signals
          fully sampled.
        . A way to pass an interpolation function.  This is a disjoint use
          since it doesn't need any of the BaseTypes.Dynamic state and isn't
          useful as a normal CF.
    - Could use rank to modify dyn and emphasize or de-emphasize notes on
      important beats.
    . With 'real' and 'score' and the signal conversion functions, I gradually
      rewrite more and more functions from Deriver to functions with a
      TrackLang.Dynamic argument.  Also they're going to start to want an
      exception, and why not logging too, and I'm right back to Deriver.
    . Why can't I make ControlFunction into a Deriver?
      ControlFunction moves to Deriver.Monad, so Val must also.
      Now control function stuff must be exported from Deriver, not TrackLang
      and Score.  But also Val can't be exported from TrackLang, and there are
      tons of users for TrackLang.Val.  Maybe I can split TrackLang into a low
      level version.  In fact I already have, everything Deriver uses
      TrackLang for can come from BaseTypes, except Typecheck.  Monad.val_call
      must move to Lib.
      . Environ, Pitch, and Val all move into Derive.  And Score.Event.
        This is getting to be pretty much everything.
      . Another option is to make Derivers polymorphic.  I can put the
        fields in TrackLang.Dynamic in a typeclass.

pitch: scales: scale:
  just:
    - should just chromatic scales differentiate A4 and d5?
      . In general they should probably deal with enharmonics, but I don't know
        enough about just intonation.
    . How could use a custom set of intervals?  Or custom set of ratios?
      . E.g. charukesi: M M m M m M M, 2 2 1 2 1 2 2
      . The existing setup gives easy access to piano_layout and rotations,
        with 5-limit and 7-limit, but ideally I want any ratios and layout.
        I could do this in haskell, but it's awkward to recompile each time.
      . How about: just-intervals = (list 2 2 1 2 1 2 2)
        | just-ratios = (list ...) | scale=make-just
      . I really want a better solution for Scale.Make, so I can write
        scale = (make-just (list 2 2 1 2 1 2 2) (list 3/2 ...))
        and not pollute the global environment, so maybe that's the real
        problem.
      . But maybe that's orthogonal, if I want that I should have named
        arguments.
      . Or, I could delete the keys out of the environment.  I wonder if that
        would even be a reasonable keyword arg implementation if I put it in
        Derive.Sig?
      . Well, but I think scales can't do that since they're not really calls,
        they'd have to hook into Derive.with_scale somehow.
        . What if I replaced Scale.Make with with_scopes, so it can handle
          the scope modification itself.
        . Actually it already happens: get_scale makes the scale including
          degree calls, then degree calls are stashed in scopes.
        . I could just hack this one thing by adding
          Scale.scale_delete_env_keys, which Derive.with_scale then looks at,
          but I don't think I hate env pollution that much.
      . Back to just, there are two possibilities: if I have 7 degrees then
        I can use sa ri ga, but for a variable number of degrees, I'd need
        oct-degree type notation, like *hex.
      . I.e.: (TheoryFormat.letters pc_per_octave)
          (TheoryFormat.cipher pc_per_octave relative_fmt)
  - Think of a way to return scales from val calls
    . Detailed notes in Derive.Scale.Interpolate NOTE [make-scale]
    . It's hard because of the Val and Derive circular dependency.
    . Can I put something in Val that will make a Scale without referring to
      Scale directly?
    . Or can I move Scale out of Deriver.Monad?  I guess if I could I would
      have.
    . I guess no because it has ValCall and Deriver.  Fundamentally it's
      because scales are implemented as val calls, so Derive must be higher
      than Val, so Val can't contain a Derive, unless they live in the same
      module.
    . At one point is it worth trying hs-boot again?  I remember I really
      hated it when I had it, because ghci tended to reload tons of stuff.
    . Ok, can I do it without vals, but get the same kind of syntax?  Like
      maybe LookupPattern for ValCall that evaluates to the scale symbol plus
      whatever it is that makes the scale?
    . Speaking of which, what exactly is that?
      . Scale.All.lookup_scale -> Derive.state_lookup_scale -> Derive.get_scale
      . So it actually makes the scale on every lookup.  I guess it has to be
        this way, since it's not in Val, there's no way to store it.
  - I'd like to make a local scale derived from another one but some notes
    missing, and have input and transposition skip those.
    . Ideally it could be a modifier to any scale, so it would modify input
      and transpose accordingly.  Symbols remain the same.
    . I'm still unhappy with the Scale.Make Make|Simple thing.  Returning
      Scale from a val call would be better, but I think that runs into the
      big Derive / Val circular dependency problem.
    . Do as a Make for now.
  - twelve-k doesn't work entirely correctly.
    . The problem is that ChromaticScales.pitch_note doesn't preserve an
      explicit natural, so it gets lost after a pitch->note.  I think
      show_pitch has to have twelve-k support.
    . I don't care enough about twelve-k to fix this now, but maybe some day.
  scales / Derive.Scale:
    - I think the symbolic pitch_note functions should use RelativePitch,
      otherwise the symbolic pitch they produce can't be parsed back in to
      produce the same pitch.
      . Demonstrate with some tests and fix if necessary.
      . For ChromaticScales and JustScales
    - TheoryFormat.make_relative_format is a confusing name because it makes
      a Format from a RelativeFormat.
    - It's confusing how the default_key is built-in to parse_key but also
      passed separately... maybe it should take a flag to say whether an error
      should become the default?
    - Strip type prefixes from Pitch.Pitch and Pitch.Degree?  Add lenses?
    - add ratio transpose signal, that multiplies hz
    support scales that are different ascending vs. descending
      . Scales have two versions of each degree.
      . scale_input_to_note takes a previous Note arg, which it can use to
        guess the appropriate variant.
      . Variants have to have unambiguous names though, maybe 4n^ and 4n_
      . Use scale_alternate to switch a note between alternates, bind to the
        same key as enharmonic.  If there are no enharmonics, then fall back
        on alternate.
    raga: ragam:
      - arohana / avarohana:
        . Select which depending on an env var, and have a postproc to go
          through and assign those.
        . Try octatonic with 21 ascending, and 12 descending.
        - I also want a cmd to cycle unspecified and explicitly arohana or
          avarohana.  I can bind it to the flip-enharmonic key unless I want
          to have scales with both concepts.
        old notes:
          . I could keep it at the Cmd level by remembering the last entered
            pitch and defaulting this one based on it, or I could try to put it
            at the Derive level too by having the pitch itself be based on the
            previous one.
          . Putting it at the derive level seems really hard and unreliable, so
            I should have separate symbols, e.g. 4r^ and 4r_ for up and down
            variants.  For western modes this isn't necessary since the notation
            is already absolute.
          . Or I can model r1 r2 r3 as accidentals.  The raga gives the default,
            and then I can change the cycle enharmonics binding to instead cycle
            number of "accidentals" to force a particular one.
          . So I would model as a chromatic scale but with a custom number of
            accidentals per degree:
              s, r1 r2 r3, g1 g2 g3, m1 m2, p, d1 d2 d3, n1 n2 n3
          . How should ragams look anyway?
            . Absolute chromatic scale with all pitches, and g[123] notation to
              explicitly choose one.  Arohana and avarohana show how to infer
              given plain g.  If >1 exist, then try to infer based on the
              previous pitch.  Also g^ and g_ chooses between 2, if applicable.
            . I need inference for gamakam, but I'll need an override, maybe
              ^_ postfix for numbers?

    - letter and jianpu but with implicit accidentals based on the key
  intonation: think about how to do e.g. meantone melody, with just harmony
    . Do a postproc to analyze simultaneous notes.  If I use an attr to
      tag the melody, I can tune everyone else to it.  But how do I retune
      notes with non-trivial pitch curves?  Well, I could use a transpose
      signal to tell the pitch calls what's going on.  I think I might just
      need the frequency of the melody note.
    . Do an analysis pass, and insert environment that says what the harmony
      is.  Then pitch calls use that to tune.  Doing the analysis might be
      tricky since I have to extract a "principle pitch" from each event,
      but it might be useful in general to have an analysis framework.

Perform:
  - Overlapping notes with different ControlSwitch cc numbers should share
    a channel.  Of course it'll work anyway if only one channel is
    allocated.
    . Currently they definitely won't, because the performer assumes that
      all controls affect the sound, and so you can't share with any control.
  - Pick the best channel instead of the first one.
    . An event can share a channel if it has different controls but the events
      don't overlap.  This is required so that a sequence of notes that each
      set a different control will go on the same channel.  But since it always
      picks the first usable channel, you can have controls trade channels,
      depending on how the coincident events are sorted:
        [(0, 1, c1), (0, 1, c2), (1, 1, c2), (1, 1, c1)]
      This should put the c1s together, but they will trade channels if they
      come in that order.
    . I think to fix this I'd have to have can_share_chan return
      Left fail_reason or Right priority, and pick the highest priority.
      It would have to give a lower priority to events that could share, but
      have incompatible controls just out of the event range.
    . let f = Perform.shareable_chan
      let mkevent start controls pitch =
              Perform.Event inst1 start 0.33 controls
                  (Signal.signal [(0, pitch)]) DeriveTest.fake_stack
      let pedal = Map.fromList [("pedal", Signal.signal [(0, 1), (6, 0)])]
      pprint (f [(mkevent 3.33 pedal 45, 0)] (mkevent 3.66 mempty 72))

  - I can work around the pianoteq tuning bug by not stripping redundant
    conrol changes.  This also means that recorded MIDI can be played from any
    point.  If bandwidth isn't a concern then why not?
  - damper pedal causes all notes to extend until the pedal comes up, should
    the performer know about that?  Is there anything that this breaks?
    I don't think so, it affects channel allotment so notes could be
    improperly joined, but mixing pedal and multiplexing seems rare enough.
  - Perform.Midi.Perform: should be possible to lead keyswitches as long as
    they don't precede the previous NoteOn, since I think samplers will only
    switch on the next NoteOn
  Instrument
    - some basic midi instrument defs for generic midi (dev, patch)

Util.Format:
  HsPretty:
    problems:
      . Missing close paren after wrapped constructors.
      . If I add an indent after each constructor then I get tons of indents.
        What I really want is a way to collapse multiple constructor calls
        with a single argument.
      . For some reason it's not wrapping tuples properly, they become
          (a, B
            c
          )
        instead of
          ( a
          , B c
          )
  - Util.Pretty still broken: pprint Vsl.violin_harmonics
  - move format related modules to Util.Format.*
  - don't use 'reverse' in 'flatten'
  - lazy implementation?
  - generic implementation for records
    . try generics-sop
    . https://www.youtube.com/watch?v=sQxH349HOik

Instrument DB / browser:
  - Fl_Help_View supports limited HTML, use it to display formatted text
  - browser has lots of empty space on the bottom
  - z1/virus-bass has UnknownMessage for initialization?
  - patch files could go in the Local/Instrument dir with the source?
    at least it should go in source control
  - colorize the info_pane so tags are easier to read
  - search lang supports quotes
  sysex
    z1
      - convert patches to larger pitch bend and send them back
      - I need control over which program and bank the patches go when they
        are initialized.  I can use the card as scratch space.
      - I also need to initialize a new multiset, and give the score
        a multiset config, or derive one from the midi config.
    vl1
      - test sending sysexes back
      - move patches to new format
      - figure out how to set category for builtin patches
        . *word shorthand for category=word?
        but I want to use the inst name, not the score name...

OSC backend
  in doc/dev_notes/sythesizer
  - Write a simple supercollider instrument and try controlling that with OSC.
  - Even if reaktor and supercollider don't understand bundles, I could write
    a scheduler server that takes bundles and emits their msgs at the correct
    time.

jack: JACK: linux midi:
  bugs
    - something is still wrong, I get "no space in output port" and then
      corrupted output
    ? jack1 doesn't work at all: other clients don't see writes, until I quit,
      and then they get continuously spammed.  Apparently the jack_port_t*
      from the registration and the lookup are different.
      - Try stashing port from port_by_name port instead of jack_register_port.
  - does jack not support sysex at all?  Maybe I can't use it at all then.
  - Ensure that shutdown stuff is being called correctly.  I don't care but
    maybe JACK does?
  use jack transport
    I don't think I need to be the master.
    - When starting a play, call jack_transport_locate,
      then jack_transport_start().  The play then blocks on a lock which is
      released by JackSyncCallback when it gets a JackRolling state.
    - Register with jack_set_sync_callback.  JackSyncCallback sets a syncing
      flag, emits a Msg that forces the needed bits of performance, then that
      cmd must call back and reset the flag, at which point the sync function
      can return true.
    Then the next step is to test, and then figure out a way to get ardour to
    automatically set up a bunch of instruments and make MIDI in ports for
    them.

misc ideas:
  . What would a generalized staged evaluation system look like?
    E.g. evaluate note (start, dur) and first pitch track.  Then go through
    again and evaluate the rest of the tracks.  The second time the
    neighbors are now incomplete Score.Events with timing and pitch.
    I would also flatten out the block structure and cancel weak notes so
    I have access to true next and prev.  This implies some way to stash the
    unevaluated tracks in the Score.Event.  Then a postproc pass would go
    through and evaluate again, providing new context to the unevaluated bits.
    . I already have something vaguely like this in the Inversion dynamic
      state.  I can provide new context with Dynamic... though it would be an
      essentially untyped way to do it since there's no type difference
      between the first and second evaluation.
    . At the moment I don't need a generalized solution, so I could just
      hardcode:
      event_stage2 :: Maybe (([Score.Event], [Score.Event]) -> NoteDeriver)
      Then at conversion time, any event with an event_stage2 is replaced by
      its evaluation.
    . Conversion isn't quite right, because I still want next event on track
      etc... but actually no, I've been here before.
    . Then I need some way to specify notation that wants to wait until
      conversion.  I guess it would go by track, so maybe a magic symbol in
      the track title.  Then slicing separately returns slices from those
      tracks.  These still have to be evaluated in their original environment,
      so I then wrap in a derive_tracks and store as a NoteDeriver.
    . So I think this could work... but is it really worth it?  It seems like
      it introduces a whole new level of complexity.  And, if I go the
      typesafe route, a whole new type of calls, which a new accompanying
      namespace.
  . Import or trace curve from a pitch tracker into the pitch track.
  . Staff notation represents chords well, but tracks don't.  Think of a more
    compact notation.
  . Why can't I write a 'tr' that generates pitch signal in some cases, and
    adds an attribute in others?  It would be redesigning control tracks so
    they are just note tracks that slice their children and apply
    a transformer to them.  I'm not sure that will coexist with the curve
    description language that control tracks currently implement.
    It would be interesting to get rid of track types entirely though.
  darcs to git:
    . https://github.com/purcell/darcs-to-git
    . http://darcs.net/DarcsBridgeUsage

tracklang problems
  . It's too low level for chord-oriented music like piano.  For instance, I
    have to care about which note is on which track, while staff notation
    only has one way to write the cord.  So I have to do busywork like sorting
    notes by pitch, or copy pasting notes around between hands.  The whole
    thing about "what track is it on" is a result of the proportional time
    display, otherwise the horizontal position is unnecessary complexity.
  . The way that note, pitch, and dyn are separate is a hassle for reading and
    for editing.  Automatic pitch track selection and collapsing helps a bit,
    but it's still awkward.
  . Also it's not so easy to differentiate all those tracks, especially if
    every pitch track has its dyn track.
  . It can also be complicated to copy paste around if there is a bit of
    non-trivial structure like parent note tracks.
  . It's still hard for me to see relative positions and chords just from
    text.  Staff notation seems much easier.  Also hard to see enharmonic
    spelling.
  . In large scores, especially lilypond-using ones, I wind up with
    a complicated 2d structure to get all of the right transforms on the right
    notes.
    . One problem is that it's hard to see and understand the skeleton
      relationships, but also that each instrument has a unique ad-hoc setup
      based on what it happened to need, and then I fit in whatever I can into
      that ad-hoc structure.
    . Not only does the complicated structure consume thinking power, it makes
      things like copy paste awkward.
    . Also I spend time fiddling with track widths.  Because one track has the
      same width for the whole block, it should generally be wide enough for
      the widest text, but frequently that makes it too wide in general.
    . Also it makes me reluctant to solve problems by adding a new track.
    . Maybe the problem is blocks are too large.  They're generally awkward to
      navigate.  But on the other hand, things scattered into lots of separate
      blocks make it hard to read, and annoying to update.  A "1:1" mode could
      alleviate the update part.
  Solutions?
    . Theoretically lilypond could give the advantages of staff notation for
      reading only, but it's too slow for realtime update.
    . I could use verovio to maintain a instant staff display of the current
      surroundings.  Of course all this only helps with reading, not writing.
    . More utils like LNote.sort_on_pitch to automate away hassle could help
      with writing, but not reading.  So maybe it's worth trying to make
      sort_on_pitch more robust.
  verovio:
    . Lilypond is really slow.  If I use verovio maybe I could have a realtime
      display in staff notation.
    . I'd need a lightweight svg viewer, or svg display widget.  A web browser
      might work, if I can get it to update.
    . It has a standalone binary that can read MusicXML or PAE or various other
      formats, but why should I use some awkward intermediate format when
      I could link it in and use serialized notes as im does.
    . How much work this is depends on what format it expects.  Probably similar
      to lilypond, and should be able to use the same tracklang notation, except
      of course embedded lilypond code won't work.
    . But it's probably not worth it unless there's really a good reason for it.
      It could be a simpler than the lilypond backend since it's just meant to
      give a basic overview of durations and intervals, but still it's probably
      a fair amount of work to create and maintain a binding.
    . One complication is that it might be necessary to do an incremental or
      local-only update for speed, and I'd need to come up with some mechanism
      for that.

long term:
  - midi record
  - dense / efficient control signals
  - stable api
  - solution for per score haskell
  - text score
  + non-realtime synthesizer: doc/dev_notes/synthesizer
    - include audio inline, so I can write signal transforms like event
      transforms
  - horizontal layout
  - Unify environ, controls, and pitch signals by making signals of
    arbitrary type.
  - print scores

planning / research
  african rhythms
    . Book: African Polyphony and Polyrhythm
    . https://github.com/ctford/african-polyphony-and-polyrhythm
    . kolmogorov music: https://www.youtube.com/watch?v=Qg3XOfioapI
  text score: doc/dev_notes/text-score.md
    . Time problems:
      . I want to say "repeat n times".
      . I want sections with their own tempo, and then the caller just sequences
        them.  If I turn the whole thing into one call, then I can still fit it
        into a global timeline, and apply transformations or tempo there.
      . If there is meter information in the text score, I can derive a ruler.
    . I could generalize Pitch.Pitch to 'Pitch pc'.  Then Bounded types would
      have per_octave built-in, but I could still use Int for generic cases.
    . Rhythmic framework: in the solkattu branch I extracted the rhythmic DSL
      to 'Note a | TempoChange (Speed | Nadai)' and I have have generic
      functions to get durations and check tala alignment using matras, and
      flatten to (Time Ratio, a).
    . This winds up being more general than haskore, but probably less general
      than music-suite.  It looks like 'temporal-media' is analogous, though
      with arbitrary time shift/stretch, and events have duration.  Also since
      it uses (start, dur, note) events, it doesn't need rests, and can do
      overlapping events.
    . Henning Thielemann's LiveSequencer highlights score as it plays:
      https://hackage.haskell.org/package/live-sequencer-0.0.6
      . He does it with a custom gui widget and language, but I wonder if
        I could do this with by sending highlighting info in real time to vim?
  cmj:
    . bezier-spline-modeling-of-pitch-continuous-melodic-expression.pdf
      Contact Bret Battey about PICACS: http://www.mti.dmu.ac.uk/~bbattey/
    . Wendy Carlos' tuning article: "Tuning at the crossroads", CMJ 11/1
  things for expressive music
    There needs to be some way for notes to affect surrounding notes.  For
    example
      . A trill might want to push the next note back a bit so it can complete
        its cycle.
      . Portamento might want to put controls points on a curve, so the speed
        a distance between pitches affects how quickly they approach, and
        quick notes will have less accurate pitch.
      . Gender tick affects the damping of the previous note.
      . If I control uses bezier curves, the curve is determined by the last
        control point of the previous and the first point of the current call.
    Other ideas:
      . Switch samples when played quickly.
      . Drum thing where successive strokes lose some energy.
    . Randomization is a first step, but true variation in playing is not
      random.  Things to study:
      . Tempo variation.  This is related to intentional tempo variation, but
        there should be slight tempo variations all the time.  This also has
        to do with higher level controls like rushing or lagging, and slight
        amounts of swing.
        E.g. some instruments may tend to rush when they want to be more
        prominent, or get louder.
      . Start / duration variation.  Related to tempo but at a lower level and
        less systematic.  Interpretation of staccato depends on surrounding
        tempo.
      . Dynamic variation.  Many instruments tend to get louder at higher
        pitches.  Tempo speed up tends to increase volume.
      . Pitch variation.  Some instruments tend to attack inaccurately and
        then correct.  Higher dynamics and tempo could make pitch less
        accurate.
    Modelling notation as a set of constraints:
      Notation specifies parameters along with how "fixed" they are.  For
      example, specified pitches are usually immovable, but onset time might
      be variable, depending on how important the beat is.  Higher level
      notation then assembles components and combines the constraints, and
      results in either conflicts, or a set of more specific constraints.

      . Example: janta attacks from below, normally one diatonic step, but
        avoids repeating the previous note.  A trill can end on either low
        or high, but if followed by janta, will change to avoid making janta
        repeat a note.  If trill speed is unfixed, it can change that,
        otherwise change attack time of the following note.  If the trill end
        is fixed, then the grace note must adapt by picking another higher
        note.
      . Carnatic ornaments change when time is reduced.

  think about grammar for ornaments
    . Notes have a syntax: there are ornaments or articulations only valid at
      the attack time, ones that apply to the sustain, and ones that serve as
      transitions to the next note.  Also, the shapes of ornaments vary based on
      the note or absence of a note preceding and following, in addition to the
      speed.  It makes me think of cursive Arabic, where letters change shape
      and placement based on the previous letter, along with rules about which
      letters go where in the word (I'm sure linguists have a name for this,
      e.g. English has "ng", but won't start a word with it).  I've noticed
      there's a tension between specifying exact times via a timeline or
      whatever, and the kind of higher level flexibility implied by a syntactic
      approach.  E.g. if you say "attack X, sustain Y, end with Z", you are not
      saying exactly when X, Y, and Z start and end, and they are free to
      arrange themselves according to context.  But you do need a certain amount
      of precise control over times, at least in some cases.
    . This is similar to the "constraints" idea, at least with regard to some
      aspects being flexible, while others are fixed.  For instance, if
      I write ornaments with no specific times: 'A; B; C' then the start times
      and durations are flexible, and its up to the interpreting code to
      arrange them, but if I make separate events for A, B, and C, then the
      times are fixed.  Of course I also want to be able to fix A and C, but
      leave B's position flexible.
    . How to represent this as events?  I think I need a "macro" facility,
      where a call can interpret following events as a separate mini-language.
      I used to have this, and could probably get it back, by re-introducing
      the "skip following events" return value.  In that case, some notation
      like a leading '=' would indicate that the start time is fixed.
      Otherwise, the event_start is irrelevant except that it's in between
      the previous and next events.
    . Or maybe I do it as sub-notes, that way the one on the left specifies
      the extent of the "note DSL", and I don't need a "skip following" hack.

  . Give a visual indication of the events emitted by a call.  This is the
    note level version of the track signal render.  The underlying problem is
    that textual call names are not necessarily very clear about what the
    notes are, especially if it's a relatively ad-hoc call.  But I think
    I need a fancier GUI for this, since I'd have to have some way of turning
    a bunch of events into a distinctive looking graphic, e.g. a scaled down
    image of the block or something.
  . spline curve interpolator: evoral/Curve.cpp, www.korf.co.uk/spline.pdf

  . If I implement a VST host or patch a DAW to accept VST controls like MIDI
    controls can I get low latency high res controls?

ness:
  Questions:
    multiplate:
      . You can define membrane and drumshell, but not strike them?
        . It seems like 'strike membrane1 ...' works, but is undocumented?
          Are there any examples of its use?  The demos on the website sound
          pretty good.
      . What's the point of the name on drumshell?
      . In plate, what's rho, H, E, nu, T60, sig1?  Membrane has the same
        parameters, but with an extra T.
        . nu = poisson's ratio?
      . In plate, what does the center coordinates mean?
      . What shape are the plates?  Square, circular?  I assume they're the
        same thickness everywhere?  Depending on the parameters, they can have
        a definite pitch, but where is the continuum between gong and tamtam?
      . How difficult would it be to add features like hand damping, striking
        with soft or hard mallets?
      . Multiplate can be slow!  61m for a 4 second simulation (5m in demo
        mode).  Are there guidelines about what parameters influence runtime?
        It seems like the presence of a membrane makes demo runtime go from
        34s to 5m, and sound become empty.

    soundboard:
      . Each string has its own frets count and distance from the string, but
        you can't place them, and since you can't press on a string, you can't
        generally hear them... I assume they're for collisions only?
      . What's the meaning of the baseboard profile?
      . Each string has start and end coordinates, what does that affect?

    guitar:
      - What's the formula to derive the sounding frequency from the string's
        length, tension, and material?
      - How about the inharmonicity value as used by string_def_gen()?
        I assume it also affects material.

      - "itnum" is presumably iterations for a newton solver... which does what?
      - I guess "tol" would have been its tolerance, but isn't used for the C++
        version?

    bowed string:
      - In this model you can directly set the frequency of a string, but
        isn't that determined by length, tension, and material?
      - The (instrument, instrument_numb) presets affect only strings, right?
        What string definitions do they correspond to?
      - What's kw, alpha, beta, lambda and M in the finger and bow definitions?
        Finger has an extra ku.
      - The bow movements have: w0, vw0, u0, vu0 (initial positions and
        velocities).  I assume w is vertical, and u is horizontal?
      - Then the breakpoints are (position, vertical force, horiz force).
        If the position is horizontal position, what's the relationship
        between it and force?  Wouldn't the force be whatever is necessary to
        put it at the given position and time?

    brass:
      - is the online version the same as the downloadable binary?

  guitar:
    Things that work:
      . Strike open strings, with possible collisions, "jawari fret".
      . Originally, sliding up worked, but not sure how to get that back.
    Things that don't work:
      . Interaction with frets is hard to get right.  If the frets are
        very close (0.0005), then there are lots of string collisions, but
        further distance produces only silence or unpitched jangle.
      . For instance, "fingering", striking with the finger at or below each
        fret, tends to just get a jangle with a tiny bit of pitch.  Also
        touching at or below a fret and striking the string gets a lot of
        collisions.  So try as I might, I can't get the effect of normal
        fingering.
      . Since a finger can only be in one place, I don't think I can do
        artificial harmonics.
      . However, with no frets and a more distant backboard, and touching with
        high force, I can get another pitch, which is presumably the string
        segment on the other side of the finger, which is a nice effect.
    Bugs:
      . Occasionally the guitar model renders the whole sequence with
        a high-pitched whine.  E.g. ness-data/whine-1
      . Segfault, probably when finger movements overlap.
      . Seems like >2 fingers on one string results in no sound output.
      . Negative times or string locations in finger_def causes segfaults or
        no results.
      . For the web interface, output directories marked with seconds means
        parallel submits are unreliable.

    - Experiment with string connections for sympathetic strings.
    * Why do I get attack artifacts?
      . First, I need a stronger touch, like 0.5.
      . I get a cleaner sound if I go from zero to finger from t-0.05
      . I can't release without a new note.

    - Maybe I can use the "jawari" fret with parallel strings as a special
      effect.
    . Can I get a muted string effect by plucking while touching with low
      force?
      . Yes, sort of, just don't touch a node.

  * I need a better way to name strings.  string.idiom needs pitches, but the
    instrument needs symbolic names.
    . Maybe I could use custom pitches with a symbolic name, then convert via
      PSignal.pitch_note?  It seems like a misuse, since it's not really the
      pitch name.  Unless it is, and I also name the strings like that, but
      then I can only use an instrument with one scale.
    . Articulation.c_harmonic open_strings uses [NoteNumber]
    . Or why not use PSignal.Pitch, but the instrument definition converts it
      to a Text of the NN?
    . But I can't use just NN as string name, because then it breaks on
      scales.  It's the symbolic name.
    . I can't put PSignal.Pitch in the patch for open_strings, because Pitch
      can't go in a RestrictedEnviron.  Even though these patches are
      definitely code, and don't need to be serialized.  I only need
      RestrictedEnviron for local config, which is saved with the score.
    . Other than that, is using PSignal.Pitch for strings ok?  Basically
      I need a symbolic name and a NN, which is basically what Pitch is, minus
      the transposing stuff.
    . I think only Common.config_environ really needs to be RestrictedEnviron.
      But since Cmd.ResolvedInstrument merges common_environ into
      Common.Config, I'd have to make the environ a type parameter.
    . But there's no reason the string kind of pitch can't be in
      RestrictedEnviron, because it's just a pair.  So the other approach is
      to add an untranspoesable pitch to RestrictedEnviron.
    . Would it be really awful to just call it VPitch?  Then coerce via
      PSignal.constant_pitch.  The danger is silently casting away
      transposability, for instance put pitches in patch environ and expect to
      transpose them.  I could make it a bit clearer by not having ToVal
      Pitch, but requiring an explicit constructor, or ToVal ConstantPitch.
    . Setting patch element in the note call doesn't work, because it's too
      early.  I assign string via postproc.  So I need to assign at convert
      time.  Don't I have a postproc field for that?
    . Yes, Cmd.inst_postproc.
  - How to do strums and rolls with harmonics?
    . A roll transform would do it, and fix the grace note problems too.

  - Have some way to more easily switch between kontakt mockup and ness.
    . How would this look for real?  A hybrid instrument that writes to im but
      otherwise acts like a MIDI instrument.
    . But on playback I want either im or not, which means I'd have to tell im
      to mute the tracks that are now MIDI.
    . Or I could just use a custom thru, but then I can't get the playback
      mockup.  But in the longer term I'm hoping incremental rendering can fix
      that.
  Expressive things:
    . mute note: just do a short note?
    . pdm: make a quick turn at the beginning.  Use hybrid tempo?
    . ping: rapid pitch drop
    . roll

  ideas:
    . yangqin?
    . play string like reyong, with a hand damp
    . string like gangsa with noltol
    . jawari like tambura or sitar
    . solkattu for metal percussion thing
    . can I hand damp metal percussion?

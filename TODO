LEGEND
  - todo; + in progress; * done; / obsolete, do not want, or can't repro
  ? open question; . note; bug: marks bugs.

UNSORTED
  - If the 's' repl function set primary selection in addition to (or instead
    of) red highlight, then I could find it by wiggling, or zoom on it.
  - I often want to see where I am in the parent, e.g. like parent->child
    selection but the other way.
    . I can get this by playing from the point, but why not do it
      automatically?
  - I often want to see score time selection and RealTime selection in
    a narrow block, and it's annoying to resize it.  Can I have a pop-up?
    Or two lines of status if necessary?
    . Would a tooltip in the status bar be obnoxious?
  - I'd like to use Ui.allocation lens for modification, but I need to be able
    to put it in the monad.  Research once and for all how to do that with
    either fclabels or van-laarhoven lenses.
  - upgrade to ghc 8.2
    . 8.0.2 compile time:
      debug/seq     257.19s user 35.01s system 341% cpu 1:25.63 total
                    242.37s user 32.71s system 336% cpu 1:21.78 total
      opt/seq       619.43s user 44.95s system 331% cpu 3:20.30 total
    . 8.2.1 compile time:
      debug/seq     225.21s user 32.80s system 338% cpu 1:16.20 total
                    201.57s user 30.43s system 328% cpu 1:10.53 total
      opt/seq       712.50s user 42.71s system 329% cpu 3:49.21 total
                    760.40s user 45.88s system 323% cpu 4:09.25 total
    - conduit-audio has base <4.10, I can patch but author is not responding
      . Patched locally, but I'll need a long term solution.
      . Should I fork, or write my own?
    + ghci thinks I have flags changed again
      . f= build/test/obj/Util/CallStack.hs.o; rm $f; mk -V $f
        ghcit -v1  :load Util.Control
      . Flags are same from -XBangPatterns to -fno-warn-duplicate-exports
      . But ghci-flags is missing -W -fwarn-identities ... etc
      . Looks like shakefile uses it twice.
      . ghc -c
        [ -outputdir build/test/obj ... -fno-warn-duplicate-exports ]
        -dynamic
        -fhpc -hide-all-packages -package=...
        Util/CallStack.hs -o build/test/obj/Util/CallStack.hs.o
      . -dynamic
        [ -outputdir build/test/obj ... -fno-warn-duplicate-exports ]
      . Maybe it now considers a flag it didn't consider before?
        But the only difference is -fhpc and packages.
        . And -fhpc can't be used for ghci.
      . Or maybe ghci is including some flag it wasn't before?
        . /usr/local/bin/ghci -ignore-dot-ghci $(cat build/test/ghci-flags)
          also no help.
      . Even with minimal flags, it's still "flags changed."
      . Looks like it is -fhpc, but I can't provide that in ghci.
      . Then why is this tests only, what about opt?
        . Because -O is different, but I can't include that either for
          --interactive.
      . Still works for debug.
      . ghc/compiler/iface/MkIface.hs:checkFlagHash
        iface/FlagChecker
      . Due to https://ghc.haskell.org/trac/ghc/ticket/11798
        https://ghc.haskell.org/trac/ghc/ticket/10923
      . Sent mail to glasgow-haskell-users
  - generalize zheng 'gliss'
    . It would use scale instead of open strings.
    . If I wanted to be fancy for harps I could do gliss on whole note or
      diminished minor sevenths that repeat strings tuned to unison.
  - >kontakt/kendang-bali-pasang doesn't work as a dummy instrument because
    those can't have the Patch.Triggered flag, or any flag.  I could move some
    flags to Instrument.Common, but what's wrong with having a MIDI instrument
    with no allocation?
    . Triggered is duplicated in Im.Patch, so I could get rid of that.
  * randomize makes play from '/' awkward, can I start just a touch before the
    point to try to catch those?  The real problem is MIDI's NoteOn thing.
  - can I have a block template kind of thing, with a standard set of
    instruments?  Maybe REPL cmds.
    . I could also add a track for each allocated instrument, but I'd need an
      order.
  - Also cmds to re-order tracks by instrument.
  * integrate via '<' segfaults
    . Because it does set track signal on a non-existent tracks 4--6.
    . They are added by the integrate, so it seems update_track_signals is
      called before the window is updated.
    . update_track_signals comes from DeriveComplete.
    . What's the integrate sequence?
      . set_track_title ((vid "untitled/b1.v1"), 2, ">pno | <")
      . === rendering
        [ ((vid "untitled/b1.v1"),(tid "untitled/b1.t1"),1,True)
        , ((vid "untitled/b1.v1"),(tid "untitled/b1.t2"),2,True)
        , ((vid "untitled/b1.v1"),(tid "untitled/b1.t4"),4,True)
        , ((vid "untitled/b1.v1"),(tid "untitled/b1.t5"),5,True)
        , ((vid "untitled/b1.v1"),(tid "untitled/b1.t6"),6,True)
        ]
      . insert_track ((vid "untitled/b1.v1"), 4)
      . set_track_title ((vid "untitled/b1.v1"), 4, ">pno")
  * BlockC.set_track_signal is called a lot with empty signals.  I think it's
    necessary to clear an existing one, but maybe replace with nullptr to
    avoid allocation.
  - How to add grace notes to a non-null call note?  Also what if I want
    non-null grace notes?
    . I can make a 'g' transformer for the first: 'g 0 1 | x'
    . For all maybe a grace-transform env arg.
  - squart/6 has some jumpy dynamics due to sets in dyn with a scope over them
    e.g. end of @b3, vln2
  * mridangam should default to its native pitch
  - It would be nice to have a text interpolation syntax
    . E.g. "textlike: %s, %v ShowVal, %p Pretty, %x hex, %.3f showFloat 3"
    . Cmd.Load.Mod2.commands_to_controls: "from=%v | %s %v" vol c val
    . But printf style can't work for typeclasses without dependent typing
      because it doesn't know which one to select.
    . text-format: requires importing a bunch of formatters, type-unsafe
      . format "from={} | {} {}" ('val vol, 'str c, 'val val)
      . I don't like it because the format type is out of context.
    . formatting: import a bunch of formatters plus (%), type-safe
      . Probably worse errors.
      . format ("from="%'val%" | "%'str%" "%'val) vol c val
      . Still much noisier than "from=%v | %s %v".
    . fmt: even more operators and imports
  - The EvalTrack rule that skips events that are all comment event is
    confusing, because you have to replace a note with 'n -- blah'.
    . Make the "skip totally" triggered by '--|'.
    . Search dumps for '--', update doc/*.
    . Except control tracks don't have a "" call, so plain '--' is available.
      But maybe not do that anyway, for consistency.
  load octamed files
    * port to med-module
    * Or for calls other than vol, I can put them in as comments, and fix by
      hand, since it's a bit annoying to get things like 0d right.
    / Put instrument default vol in 'ky' file instead of on each instrument.
    * extend 0s for commands
    * apply default instrument volume
    / Portamento suppresses note start
    - get song tempo
    * use a 4/4 ruler
    * I use 1 for each line, scale by some value, e.g. 1/8.
    / I'll need a port pitch cmd that moves to a pitch at a certain speed
      until it reaches it, then stops.
    - implement set tempo and set frames cmds
  * save/bali/gabor segfault
  - why does fltk on linux subtract 100 from window width and height?
    . does os x? nope
  selection-orientation branch cleanup:
    - It's surprising how positive always wins to negative.  This means adding
      a positive events with +END will destroy all negative ones below it.
    - set_duration: If I have ><---|, I can't set the negative event back to the
      zero dur event because it sets the previous positive event, regardless of
      selection orientation.
    - Slice range should be Events.Range so it can remember the orientation.
      Otherwise I think -0 note slices don't work.
    - I think Slice.events_in_range should get an orientation, which in turn
      means checked_slice_notes needs one.  Otherwise don't negative notes
      not get the end event?  But Sekar maybe relies on include_end.
    - Perhaps related, I removed include_end since negative should work for
      that, but Sekar used it.  Can I use Sekar with negative events to get
      end bias back?
    * Remove Sel.selection constructor, record syntax is actually nicer.

  - track calls / track macros:
    * Add TrackCall to Monad.Scopes.
      . Kind: Note, Control, Pitch, Val -- return type
      . Type: Generator, Transformer, Val -- argument type
    - More general and descriptive names for Derive.Scopes and Scope.
    - Use Scopes in Derive.Library
    - Implement calling TrackCalls.
      . Overloading 'x' to mean a call to x or a control %x might cause some
        problems.  E.g. title_to_control can't know unless it looks
      . If I just use a symbol there's no way to tell if it's a control,
        pitch, or note track.  So I need to keep the syntactic clues.
      . Maybe control: '!call', note: '> !call', pitch '*xyz !call'?
      . I'd like to be able to abstract control, e.g. '!gamakam', and the t-nn
        is an implementation detail.  But I can't have track calls return
        (Control, d), because that's only control tracks.
      . I could have it set a control with the same name as the track call,
        and then some way to rename it.  But what is that way?
      . Or I could just fake it by returning Score.Control, and pitch tracks
        just use Score.Control, and note tracks just ignore it.
      . It seems awkward that this is simultaneously giving a way to abstract
        syntax and control name, and they don't seem naturally related.  Can't
        I have an orthogonal way to make 'gamak' an alias to t-nn?
    - Write a TrackCall for gamakam4.  ! calls quote the argument and pass
      to gamakam call.  Or I could invert it and use ! for non-gamakam calls.
      Copy pitch calls over.
    . Maybe this is how to do macros: track title is a lookup in
      a track-macros namespace.  If 'name' isn't found, then it defaults
      to '%name' ala LookupPattern.  Track call namespace should also be
      in the CallMaps and Library so it can be imported with modules.
      Also I think it needs note, pitch, and control variants in the same
      way.
    . As long as I'm doing this I can go back to using pitches for
      gamakam, and just copy over from the pitch track.  Not sure if
      I should though.
    . old notes:
      . consider track calls and block calls:
        note_track :: TrackTree.EventsNode -> Derive.EventDeriver
        derive_tree :: ScoreTime -> TrackTree.EventsTree -> Derive.EventDeriver
      . I could use this to implement is-ly and no-ly, and also totally custom
        track types and block types.
  - QuickCheck for Midi.Encode_test just for practice
  - Will TimeVectorStorable.Sample Double have both fields unpacked?
  - I'd like to make a local scale derived from another one but some notes
    missing, and have input and transposition skip those.
    . Ideally it could be a modifier to any scale, so it would modify input
      and transpose accordingly.  Symbols remain the same.
    . I'm still unhappy with the Scale.Make Make|Simple thing.  Returning
      Scale from a val call would be better, but I think that runs into the
      big Derive / Val circular dependency problem.
    . Do as a Make for now.
  - Bind keys to Edit.insert_block_time and Edit.delete_block_time?
    . Or a key to expand the selection to all tracks?
    . A downside is that I might want to go back to my original selection.
    . Would it be useful to have an undo stack for selections?  I could also
      do things like select to end of track, delete, then go back to the
      selection.  This is like ^o and tab in vim.
  - Undo stack for selection.
    . For drags, don't record until mouse-up.
    . ^o is still available, but it would become alt-o on linux.
    . Also this tracks focused ViewId and focus changes.
  Integrate from dsl.
    - I tend to use multiple korvai sequences as versions of a single korvai.
      Maybe use index -1 to concatenate them all?  Or have a general way to
      concatenate multiple korvais?
    Implement manual integrate, e.g. LSol.integrate korvai
      * I need a Block.EventIndex to do the diff.  ScoreDestinations requires
        a source TrackId, so I need a ManualDestinations without one.
      . Since 'to_score' returns (note, controls), I can assume track
        derivation.
      . I need some kind of key to distinguish between sources.  For
        solkattu, that would be the source korvai.  So make it Text.
      . I need at least some kind of stack since Merge uses that to tell
        the difference between generated and user-added events.  But the
        actual diffing is based solely on Event.IndexKey, which is just
        TrackTime.
    - validate Block.ManualDestinations from Ui.set_integrated_manual
    - If I put a TrackTime offset into the ManualDestination, I could have
      multiple destinations on a single track.  But then I'd have to also
      know to move things around if they change size, and it seems
      complicated.  Maybe it would be better to put them in their own
      block, and then implement a way to nudge calls when one changes
      size.
    - If I put the destination on its own block, I could automatically
      adjust the ruler.
    * connect LSol.realize to manual integrate
      . LSol.integrate_track (LSol.korvais !! 59) 0 "mridangam"
    - make block version of LSol.integrate_track, where integrate also adjusts
      the block ruler to the right length.
      . I need to understand the tala, not just for the ruler, but to know
        if there's a final stroke.
    * cmd to edit a korvai's source file along with the vi save hook
      . 'gz' is normal so I can load in ghci, but 'gs' saves and sends
        a re-integrate for that korvai.
      . It also needs to trigger a reload, but 'send' should work for that
        too.
    - Solkattu realize with an alignment error should still realize, just
      emit a warning.
    - On vim 'gs', output from 'send' messes up the draw.  Maybe bring it
      back to vi and do :echo?
    - Get rid of Korvai index, it gets more annoying as time goes on.  Just
      have separate korvais, and I can tie them together with variable_name if
      necessary.  But I still need a way to distinguish for SourceKey, so
      maybe I still need it but as another tag, added by 'korvais'.
    notes:
      . I'd like to be able to edit e.g. solkattu dsl, then save triggers
        a score integrate.
      . This is also the way to get text language to integrate in general.
      . Also it's visualization for text language.
      . StateConfig can have 'dsl_integrate :: Map Symbol Code', then repl cmds
        to edit them.  This is then haskell, which means I need some way to get
        it into the REPL, and some standard environment in which it is executed.
      . I can actually do this currently but I have to run a repl cmd, e.g.
        LSol.integrate Score.xyz
      . So simpler way would be to hook the editor so it does 'send ...' on
        save.  I should do that first, and think about a more automatic way
        if it's too awkward.
      . The common building block is a manual score integrate like
        integrate :: Symbol -> Track [Ui.Event] | Block Ruler [Ui.Event]
      ? Remind myself about how score integrate works.
        . Manually call LIntegrate.score_block
        . Which sets (source_block, ScoreDestinations []) on the dest block.
        . score_track adds (source_track, ScoreDestinations []) to dest
          block_integrated_tracks.
      . Dsl integration won't have a source track or block.  Instead it needs
        another ID which can link it with the source.  So for code it would be
        defining file or expression.  I also need identifying stacks for the
        generated events.
      . I have to load the module with the dsl.  If that's supposed to be
        per-score then I need to get that into an .hs file and get the repl to
        add that to the targets.  The file should be .hs and loadable anyway so
        I can use ghci on it.
      . But I'll likely have multiple DSLs, so it needs some configurable
        boilderplate, i.e. imports.
      . Two cases: EDSL means it's haskell with a special "prelude", like
        solkattu.  DSL means text with a parser, e.g. Derive.Text.TScore.
      Make this work for solkattu:
        . Make solkattu set Event.stack.  It should have the sollu and position
          as a TrackTime.
        . The score has a link to a module name, e.g. Local.Score.Xyz.  If it
          doesn't exist, create one with the standard set of imports.
        . On refresh, have the REPL load that module, and pull out every symbol
          with the right name, e.g. _xyz.  Each of those should be of Block
          type, and will be used to create score integrate to a block of the
          same name.  I do the integrate for everything, since it will detect
          if there were changes.
        . Figure out how to make the GHC API load a specific module and find
          symbols.  I need to verify their types too.  Trigger like :dsl X.Y.Z
        . Make a Block type, and hook it up with score itegrate, and :dsl.
        . Make solkattu realization retain the original sollu.
        . Add the "dsl modules" score field.
        . Make a REPL cmd to open vi with the file and bind save to the :dsl
          cmd.
  - ControlFunctions are still super confusing. NOTE [fix-control-functions]
    . E.g.  '%strength=.5 | %strength=(cf-rnd ...)' means it looks like
      %strength is .5, but it's actually not, and the only way to get rid of
      the CF is %strength=_.
    . Also the whole implementation is a mess.  Isn't there some other way to
      randomize signals?
    . I could pass a Quoted, and then control functions are val calls that
      return Quoteds: (cf-rnd control 0 1)
    . Then I want to be able to treat those as signals, or coerce them both
      to the same thing.  Really that's a SignalFunction, or maybe just
      RealTime -> Deriver Y.  So this turns into the problem of how to coerce
      various types into SignalFunction, but not have to have an opaque
      SignalFunction for all the defaults.
    . I could have a Convert typeclass.  In fact maybe it would be cleaner to
      split Typecheck and Convert?
      Typecheck: Val -> Maybe a, Convert: a -> b
      Convert would be: Int -> SignalFunction.
    . I think this won't work because the intermediate 'a' will be
      ambiguous.
    . I can always have a Default class that is used only for Sig defaults,
      and provides both ShowVal and the coercion.  It would mean I have to
      duplicate everything in Typecheck, unless I use an overlapping
      typeclass.  Or I could default to... what exactly?
    . The problem with `Convert a b` is that 'a' needs a type annotation,
      which would make signatures annoying to write.  Normally I don't need
      them because they are the Typecheck val, which already needs to be
      fixed.
    . Or I could have defaults be either a Typecheck val, or
      (Doc, Typecheck val), and then have an explicit constructor for Function
      which promotes various types to (Doc, Function).
  - bug: Track 'mute' status gets increasingly off.  Surely this is due to the
    bug fix in c523680838564ec55752302d1d591482971b9190 where I no longer do
    only absolute updates to the skeleton.
    . Can't reproduce this now.
    . It happens in save/bali/kebyar-duduk, e.g. mute reyong part in @b3
  - Add 'angklung' and 'beleganjur' scales.
  - BaliScales should have a default ombak, depending on laras.
    - Also there should be a way to randomize per instrument, so it's not too
      perfect.
  - Disallow 4e# in selisir.  And generally accidentals.
    . Validating the absolute pitch is broken for *legong, because I want to
      make sure the relative pitch is in the key's intervals.
    . I could make validation more complicated, but I think not using
      ChromaticScales would also fix this.
    . I don't get an error because the pitch is created, but will evaluate to
      UnparseableNote, which makes an error only on conversion.
    . It's because ChromaticScales reads a relative pitch, and only checks
      for validity once it's absolute, at which point it already created
      a ScaleDegree.  I could either also validate relative, or get rid of
      the fancy ChromaticScales use for scales without modes.
    . Or maybe UnparseableNote should have a msg arg to show what it was?
    . The thing is, I don't want the whole accidental parsing mechanism,
      I just want 7 symbols, and a relative pitch system.
    . So I could have a simplified ChromaticScales which dispenses with letter
      + accidental, and instead just has a unique name for each scale degree.
    . Then I could use 1234567 for javanese-style notation.
    . I'd basically replace the show/read pitch stuff with a hardcoded map to
      RelativePitches.
    - I can't have different pc_per_octave based on key, without parsing
      the key in input_to_note.
  - It would be nice to have a no-keys version of BaliScales so I don't have
    to mess with a fake key in *selisir and *wayang.
    . I guess it's not a big deal, but at least it means it ignores key.
    . Actually it seems like it might be a pain, because then I can't use
      the same Config.
  Why are scales so complicated?
    - Can I make it simpler?  If I were to rewrite it knowing all this stuff,
      what would it look like?
    . twelve: Keys have mode and tonic, so each key has a signature that
      influences enharmonic spelling.  Has accidentals with enharmonic
      spelling, and a layout which says which pitches are skipped, also based
      on the key.  Both the pitches and accidentals are absolute and so
      independent of the key.
    . twelve-k: Like 'twelve', but while pitches are still absolute,
      accidentals are relative to the scale.
    . twelve-r: like 'twelve', but both pitches and accidentals are relative
      from the key's tonic.
    . just: Keys have mode and tonic as with 'twelve', but they affect the
      tuning.  The layout is diatonic in that there are no skipped pitches,
      and hence no enharmonics and accidentals.  Accidentals are supported
      just as a constant ratio offset, so respelling enharmonics will change
      the frequency.  Since there's no per-key spelling, the key is much
      simpler, just a tonic pitch.
    . just-r: Like 'just', except that pitches and accidentals are relative to
      the tonic.
    . raga: Like 'just-r', except with a much larger selection of modes.
      Also, instead of accidentals, there are multiple candidates for
      certain pitches (e.g. ri1 ri2 ri3), where one will be default based on
      the key.  TODO the last bit is not implemented yet.
    . legong, pelog: These have keys, but like 'just-r', they are simply a
      starting note (tonic) and a layout to indicate skipped notes.  However,
      there are no accidentals, and instead each note has a unique name.
      'legong' (but not 'pelog') has a 'tuning' which indicates pengumbang or
      pengisep, and they also have a 'laras' value, which indicates the tuning
      variant.
    . legong-pemade, legong-kantilan, etc.: Like 'legong', but with octaves
      relative to the tessitura of a particular instrument.
    . selisir, wayang:
    . selisir, wayang -pemade etc.: Relative octave variants.
    . belaganjur, angklung:
    misc notes:
      . Simplest is an absolute scale with no key and no octave structure, just
        a mapping from symbol to pitch.
      . Then we have a relative diatonic scale.  This has a key which influences
        the note names, since they are relative to a certain pitch, but no other
        structure.
  - Legong scale umbang and isep is too close.
    . Maybe something wrong with how I retuned the sc gamelan samples.
  - TSymbol could have a descriptive arg with e.g. instrument, scale, etc.
    . This would get back the documentation I lost when I got rid of
      VInstrument.
  - OutOfRange pitch error should show the pre-transposition pitch.
    . In fact, all the errors from e.g. Pitches.pitch_nn should be annotated
      with information about the pitch.
  * entering negative events is awkward
    . If I enter a long note and shorten it, I lose the pitch?
    . I think I lose the pitch when I enter a positive note afterwards, or
      delete one.
    . It's confusing how entry is at the beginning, and appears in the wrong
      place.
    . Non-point select should not get -0 at its start.
    . Set duration doesn't work when there's positive and negative together.
    . Using ^G to flip orientation tends to wipe out the pitch event.
    . Also I want to be able to put an explicit note at the start of
      a negative event, e.g. |<--|.
    . I could still conceivably use real negative durations by keying on
      (TrackTime, Bool).  Then I could edit them by giving the selection an
      orientation.  It would have to switch with a key, or I could have 'w'
      and 'b' automatically switch.
    . Suppose the selection could be either negative or positively oriented.
      Maybe I could even use it for e.g. set duration vs. set begin, and move
      up vs. move down.  It would have to be easy to switch directions though.
  - Cmd.Ky: Keep the defining file in a special slot in the call doc, so I can
    print it out in shadowed msgs.
  - Cmd.Backend's Midi.Patch is redundant, since the Inst already has it
    . Not quite, since Backend encodes that alloc and patch backends are
      equal, but is it really necessary?
  - do a renaming pass on all the prev/next pitch function names in Derive.Args.
    . Should Prelude.Pitch.approach use the lookup pitch style?

  - it looks like special kajar calls like 'oo' mess up track signal.
    . I can fix 'oo' by making DUtil.doubled_call inverting, but that doesn't
      work for 'o..'.
    . DUtil.multiple_call doesn't need inverting because it dispatches to
      call that do invert, right?
    . Actually it's pretty pernicious, because without inverting, doubled_call
      will still appear to work because the underlying call inverts.  But
      TrackSignal gets messed up, and if it did anything based on controls
      then they would not take child controls into account.
    . Why is TrackSignal messed up though?
  - do nruk with a static macro
    alias 'o..' 'nruk | o'
    . I could modify c_nruk to have a generator version that takes a deriver,
      but then I have to copy paste it.
    . How can I inherit args?  StaticMacro is no good because I want the
      generator to be late bound.  But 'nruk' should be static bound because
      it's in another module and I want to inherit its args.
    . What I really want is to inherit args and docs from the transformer, and
      apply to the generator dynamically.  So something like a static macro
      where I give all args to one transformer, and the generator is dynamic.
      I think I can do the former with a special arg, and the latter with an
      eval "static call".
    . But what happens with StaticMacro when it hits a Sig.many?  I think it's
      broken.
    . To support this, Sig.required_vals needs to support 'many' parsers.
      I could infer from ArgParser but it seems like it's getting too
      complicated.  I think at that point I had better just be able to copy
      the parser over.  Can't I just reapply to the callee?
  - charukesi: fltk/EventTrack.cc:109 sample time didn't increase: 37.2 <= 37.2
  - Use kotekan for >wy with sargam scale.
  - I should collapse adjacent Collapsed tracks so they don't turn into
    a giant blue block.
    . If I do it at the fltk draw level, then I don't have to worry about diff
      complications or tweaking indices, but I still have to model as fewer
      widgets so the index tweaking just happens lower down.
    . If I do it at the haskell level, hopefully I can reuse the existing
      Track / DisplayTrack distinction used for collapsed tracks in the first
      place.
    - I have to also collapse the skeleton, which means I need
      a Block.display_skeleton and Block.display_integrate_skeleton.
    . However, I'm not sure it's worth it.
  - The error selection is still hard to see on a busy block, I usually have
    to zoom in and do it again.
    . I think to be more visible it would have to blink or somehow be larger.
      Ideally I could have some kind of glow
      Or maybe red is just overused, if it were green or blue?
  vsl:
    - figure out how to do tuning
      . I think it needs to be pitch bend, since it doesn't seem to respond to
        MTS.  But VSL ensemble should be able to load multiple copies of the
        patch and share sample data.
      . Figure this out before doing too many more patches, because I'll have
        to update them all with global control config, unless there's a way
        to copy paste that.
      . However, it apparently can be used with hermode, so not sure how that
        happens.  Maybe I can just ask VSL support.
      . Scala files are not very good because I'd have to go manually load
        them every time, and they're static.
    . Legato attack scale control affects the crossfade level of interval
      samples, experiment with that.
      . Wait, where did this go?
    . figure out how perf reps work, and how I should handle them
    - make sure perf_upbeat_repetitions are consistent
    - make sure grace vs. grace.updown is correct
    attribute groups:
      . bass clarinet has nv without vib
    - rename +sec# to +s#?
  - Sortedness tracking for Stream and Post functions.
    . Track down usage of Stream.from_sorted_list, probably most uses are
      bogus.  Stream.from_list and Stream.from_events have to take
      Score.Events so they can sort them.
    . Sorting vensions of Post functions also have to return Score.Events to
      be able to sort them.  They could take another event_of, but it seems
      like there should be a way to compose the mapped functions instead of
      the maps.
    . I should also come up with a plan for deforesting the intermediate
      lists.
    . Order is easy to check with quickcheck.  I could come up with some ways to
      do quickchecks on certain score fragments.  Or alternately, apply
      a standard set of checks: start =0, >0, in callee block, etc.
  - Perf.lookup_instrument on a pitch track could look at its note track.
  - I forgot to add Sub.inverting to mridangam.p1 and mridangam.pn calls.  Can
    I have a warning for when a non-inverting call has a note track below it?

  - empty track doesn't get an Environ, which causes Cmd.Track to not be able
    to find the instrument.
    . It was because the kendang tracks were below >pno, not "tempo".  So, two
      problems:
      . It's too hard to see that the skeleton is wrong.
      . Note track children should have dynamics too.
  - Do I need Perform.perform_control_msgs.trim or not?  Figure it out and
    write a test if I do need it.
  - fix control scope in parent events that cover up an orphan, as
    demonstrated in Sub_test.test_overlapping_parent_control_scope
  - Better solution for the "sample at end of block" problem, as demonstrated
    by Block_test.test_trim_controls_problem
  wayang
    - Infer late damping.  E.g., if there is a jump wider than 2 notes, then
      wait until the hand is free for long enough to damp it.
    - Automatically fill in weak notes?
      . This also applies to reyongan, even more so.
      . In fact this is similar to noltol.
    - many double strikes or ngoret tones land a bit ahead of the beat
    - I want some optional ngoret to happen the same way in both hands.
      I could make it apply to a parallel kempyung or octave.
      . I'd need a fancier ngoret that understands 'inst-top' so it can go
        down if necessary.
  - thru on *legong notes is wrong the first time
    can see this editing rehearsal/kendang-legong
  / can I make Edit.cmd_set_duration use alter_duration?  Also, why do I need
    modify_event_near_point, doesn't ModifyEvent.selection already do that?

  - %sus-abs=-.x is not quite right for detached, because it should scale
    a bit for shorter notes.  E.g. it's absolute but scales down to 0 below
    a certain threshold.

  - network midi doesn't seem to handle abort?
    playing the second time doesn't happen
  - I have a feeling like FM8 doesn't obey ResetAllControls
    Maybe I should extend Midi.Interface.note_tracker to keep track of
    used CCs to issue resets for them.  Some reset to 1, e.g. cc2 and cc7,
    the rest reset to 0.

IN PROGRESS / branch: branches:
  - draw-text-lines
    . I think it's a bit of an improvement for code simplicity, but still has
      an annoying redraw bug.
  - solkattu-group
  - Make BaliScales which are not saih pitu be fundamentally diatonic, not
    just degenerate chromatic.  Or figure out how to simplify the whole scales
    mess.
  - rewrite shakefile so I can disable features like 'im' and not require
    their dependencies for tests, haddock, etc.
    . branch shake-targets
  - signal-offset
    . Extend TimeVector with an offset, so I can get rid of
      Score.event_untransformed_controls and the like.
    . After this I'd like to make Score.Event's fields private so e.g.
      I can enforce set_instrument.
    . Also simplify or unify various types in Derive.ScoreTypes,
      Derive.BaseTypes, and Derive.Score.  Maybe get rid of type aliases
      and move simple types to Derive.T.
  - Complete Util.PrettyGeneric so I don't have to hand-write Pretty
    instances.
    . Maybe I should fix the formatting bugs first.

TASKS:
  Performance
    . Solve input lagginess when the score is large.
    . Reduce GHC-API memory usage: NOTE [reduce-repl-memory]
    . Look for memory leaks.
    . Make transformers lazy so they can interleave, aka
      map f . map g -> map (f.g)
  Music / design / language:
    . Clean up tracklang type checking with subtypes: e.g. ValType.types_match.
    . Music Analysis: Look for repeats or repeats with transposition.
    . Text score.
    . Solve how timing changes bubble up.  Text score can do it, or maybe
      integrate from DSL (either text score or haskell) or have a purely
      read-only block or track.
    . Simplify scale implementation 'Why are scales so complicated'
    . Something better than ControlFunctions for randomized signals.
      . I might be able to solve this if I can figure how to get literals in
        Sig.Parser defaults to work.  If I coerce to Typecheck.Function
        from signal or a val call, then I can replace with a val call.  The
        problem is that the default then becomes a Function, which means it
        loses ShowVal and hence documentation.
      . See NOTE [fix-control-functions]
    . Im
  Tests:
    . Quickcheck for derivation.
      . Or hedgehog:
        http://teh.id.au/posts/2017/04/23/property-testing-with-hedgehog/
      . Or Midi.Encode_test.test_encode
      . Or Ui.Diff
    . Test Ui.Diff and Ui.Sync.
    . Properly parallelize tests.  Maybe use a Test monad instead of IO and
      make tests pure.
  . fix bugs in Util.Pretty / Util.Format
    . Or use someone else's library... printcess?
      . Looks like it only has one level of indentation.  Also I think it
        doesn't have breaks, it just always breaks on space.  And uses String.
    . Other formatters:
      . https://ocaml.org/learn/tutorials/format.html
      . https://github.com/google/google-java-format
      . https://github.com/dart-lang/dart_style
        http://journal.stuffwithstuff.com/2015/09/08/the-hardest-program-ive-ever-written/
  GUI:
    . Prettier events, smooth scrolling etc.  OpenGL?
    . TrackSignals could use y position and color / transparency.
    . Window management: automatic tiling, window manager configuration.
    . Switch logview and browser to Fl_Html_Display.
  Linux:
    - Increased scroll sensitivity for the scroll wheel.  Or is that an
      X config?

----------------------------------------------------------------------

documentation:
  - Publish haddock with http://documentup.com/feuerbach/standalone-haddock
  - Can I have Util.Linkify check the validity of single-quote links?  Or
    maybe I could run a link checker against the final output.  Otherwise
    'Module.function' references get out of date.
  calldoc: CallDoc:
    - each call should have type (note, pitch, control), so I can see
      what it is after a search
    - collapse control for modules, option to collapse / expand all
      . Haddock:
        <span id=xyz class="module collapser"
          onclick="toggleSection('n.1')">Title</span>
        <ul id='section.n.1' class='show'> ...
    / put anchors on calls and make single quotes link to calls
      . It's not quite so simple because there is module, and then call type.
        So the linkifier would have to understand that structure and search
        for one, or have some javascript, and then it would have to choose
        if there is >1 match.  Too complicated.
    / For call doc, can I group calls with the same doc but different args,
      especially different defaults?
      . Would look like:
        doc doc doc generator
        bind -- name
          args
    - I could go look through arg docs for controls and list all the controls
      that have someone listening to them in a certain scope.

synth: im:
  What's the current status?
    . Cmd.Performance will serialize im notes and start the binary.
    . Synth.Sampler will read the notes and write a single wav file with
      the right start times and start pitches.
    . Cmd.Play.from_realtime can emit the im protocol from Perform.Im.Play,
      which will then play a sample, starting at the right time.
  + Emit signal discontinuities explicitly.
    . If I say signals are now have linear interpolation by default, then
      the linear interpolator can just emit one sample, but now MIDI needs
      interpolation.  I'd have to put srate in the event so it can be
      configured.
    . Leaving as nominally non-interpolated, but with explicit discontinuities
      since im actually is interpolated is not so pretty, but doesn't seem
      so bad in practice.
    . This breaks '* interleave', which was always fragile anyway.
      . Can I save it with a hack?  It could get more clever, and move the
        end sample: [(0, y1), (n, y1)] -> [(0, y1), (x, y1), (x, y2), ...]
      . Or I could get rid of it entirely, if I can fill the same need another
        way.  That's where I want to have swarams and gamakam separately, so
        I interleave with the swaram track.
        . I could have the gamakams read from the swaram track, but then
          I want to get the pitch even when there is no gamakam, so I don't
          have to put a dummy call on each note.
        . The most direct way might be a track preprocessor that copies over
          swarams, or maybe adds a "!^".  I worry about how this obscures
          the usual rules of evaluation, but ! notation is already sort of
          its own language.  I'd need some special track-level macro call.
        . What if ! in a track call was a macro symbol.
          Control.d_control_track separates those out, and calls them from
          a special namespace.  I think they have to go at the front.
        . Why is gamakam not emitting a transpose signal?  I can transpose
          to another pitch with scale_read and scale_show.  But then what kind
          of transposition?  t-dia is obvious, but some gamakams are below
          diatonic.  Actually it can emit multiple signals via the
          ControlMod hack.  I can try to do everything with diatonic, but
          I do need absolute pitch deviations.
          . Speaking of ControlMod, what would it take to have a control track
            actually emit multiple control signals?
            . I guess it would have to be a new type of track, with a
              [(Control, Signal)] return value.  It's actually similar to
              ControlMod except without biased towards any particular Control.
          . So try a Gamakam5: build fragments of transpose signals.
        . But can I really use t-dia?  How do I reresent alternate ga or
          something?  I think the most straightforward way is treat them as
          chromatic notes.  Then it become t-chrom.  But I think I can do
          t-dia for now, until I have that.
        . But now if I have different types of transposition, I can't go from
          one to the other, e.g. +1nn move to -2d.  I would have to flatten to
          an absolute measure like nn, but scales don't give me that.
        . I could get it though, by reducing to NN and doing a diff.
          I think I do need transposed pitches, though.
        . From would always be NN, to would be (Transposition, Step).
        . This all makes it dependent on the scale, it seems nicer to have
          all those functions just emit signals. I guess I can still do that
          if I supply a Transposition -> NN function.  The output gets kind of
          unreadable though, unless I want to emit (Transposition, Step)
          breakpoints, and assume everything will fit into that.  Might as
          well be (Transition, (Transposition, Step)), but now PCalls don't
          really do much.
        . I still need a value for discontinuities though.  It's code vs. data
          again.
        . Oh yes, and prev pitch doesn't work if I'm a control track.  But
          I can get the prev transpose.
        . Another problem is that I have to make it a t-nn track, which
          doesn't make much sense, and any other control calls wind up being
          in t-nn, which doesn't seem that useful.
        . If pitch gamakam is also in a cantrol track, I can't tell it from
          dyn controls.  Really what I want is to be able to write "gamakam"
          for the transpose, and it can set the interpretation of !.  Or even
          use a lookup so I don't need to use !.
        . Maybe this is how to do macros: track title is a lookup in
          a track-macros namespace.  If 'name' isn't found, then it defaults
          to '%name' ala LookupPattern.  Track call namespace should also be
          in the CallMaps and Library so it can be imported with modules.
          Also I think it needs note, pitch, and control variants in the same
          way.
        . As long as I'm doing this I can go back to using pitches for
          gamakam, and just copy over from the pitch track.  Not sure if
          I should though.

        . Which of these would be best for possible future kinds of notation,
          or further extension?
  - Use a gate signal for note duration.
  - Handle amp outside of faust, just by multiplying the signal.  That way all
    instruments support it uniformly.  'dyn' should go to 'dynamic' or 'gain'.
  efficient conduit-audio:
    . Currently I mix [(RealTime, Audio)] by padding all to their start time,
      and mixing them all.  This is inefficient because it generates and adds
      tons of 0s.
    . I'd prefer to have a mix that waits until the start time, allocates
      any resources needed (open source file, allocate synthesizer), and then
      emits samples.
    . Author is nonresponsive.  Maybe I should just write my own:
      . Only one sample rate, only one channel, support only Float.
  TODO
    . Cache / incremental rendering.  Karya has to also emit damage ranges,
      and the synth has to expand that to notes and rerender just those
      sections.  play_cache has to understand the more complicated cache
      and mix or concatenate the chunks.
    . Atomic cache replacement.  The synth generates a new cache dir, and
      play_cache GCs the old one when it stops.
    . Per-instrument or per-track rendering.  The synth tags rendered chunks
      with track and instrument, karya protocal can disable, and play_cache
      omits those.
  faust:
    * faust-im seems to get stuck on long renders.  Add a progress display on
      stdout so I can see what it's doing.
      . It's not stuck, just taking a long time to write the file.  Probably
        due to conduit-audio being inefficient.
    * Test a plucked string dsp, get the UI stuff working.
      . install qt, and try faust2caqt
      . too much bother, try faust2asmjs
      . doesn't work, maybe FaustLive... does work
    + If I use GUI elements for controls then they update at "control rate",
      which is probably enough actually.  It also means I can reuse the GUI
      controls.
      . But faust has to resample those to a-rate anyway, so if I use controls
        I do that twice in a complicated way and add some latency, for no
        other benefit.
      . Wait and see if interactive GUI experimentation plus compatibility is
        worth it.  Also MIDI is "GUI."  Probably yes.
      . UI metadata like [key1: val][key2: val] winds up as calls to
        ui->metadata("key1", "val")
    - Add plucked string and woodwind instruments, with control signals.
    - Assert that inst->getNumInputs() == length controls.
    - How to know when to drop notes?  I think I have to use a heuristic
      like >1s of audio under a threshold after note off.
      . I think this has to go in the driver.  Implement a gate signal, and
        the driver renders until the output gets low enough and gate is 0.
      . For instruments that play multiple notes, I can use this to suspend
        processing.
    - Instruments with explicit voice assignments (e.g. strings) use Attribues
      to assign the string, and create a set number of Instruments which are
      reused.
    - MIDI thru for im instruments.  Tie to a MIDI instrument for thru.
      . If I support faust controls, I can reuse existing OSC or MIDI bindings
        for an accurate thru.  But I'd have to build the faust library as a
        VST and then have some way to address it.  MIDI would be more
        convenient for reusing existing thru, but OSC could be more convenient
        for communicating with the thru-VST, so I could just address patches
        by name and I don't to fuss with MIDI channels.
    support faust ui controls:
      - Make an instrument into a conduit source.  Then I can render
        progressively instead of a whole note.
        - Then I can use controls by setting controls at the audio chunk rate.
        - Store persistent buffers in Instrument.
      - convert to standard control names:
        . Convert pitch NoteNumber to freq Hz
        . vol -> a special control that always multiples output volume
        . amp -> gain
        . note-on + duration -> gate
    cleanup:
      * Split DEBUG and ASSERT out of fltk/util.h so I don't need to import the
        geometry stuff for it.
      - Put find_sample into a TimeVector.cc library.
    plan:
      . Faust has a bunch of *.dsp files.
      . shakefile runs faust to generate .cc from the result, and then collect
        into a map of (name, *dsp)
      . Export a Load function that introspects all of those for the inst db.
        If there is karya code, it gets attached by name just like Sampler.
      . faust_driver loads Notes, and maps PatchName to dsp pointers.
      . Based on patch config (polyphonic, strings, etc.), allocate a certain
        number of dsps by cloning them, and allocate Notes among them.
      . Call compute dsp startFrame endFrame controlsp outputp for each time
        range, and mix the output into a wav.
      ? How does FAUST handle global things like a reverb bus?  I guess I have
        to pipe around the samples myself.  But what if you have multiple
        strings with resonance?  I guess it has to have inputs for each one,
        as one giant list of input channels.  But since they're all
        interleaved samples, I can't just leave some empty, or not easily at
        least.
        . A polyphonic instrument could export controls like pitch-1 pitch-2
          etc.  But does it know to turn off the ones that aren't in use?
      ?  Where does the state go?  I.e. how do I save and restore energy in
        strings, etc?
        . It looks like the state winds up in instance variables, so I should
          be able to just save those.
    . https://ccrma.stanford.edu/~rmichon/faustDay2017/
    . http://faust.grame.fr/faustplayground/
  csound:
    . Use csound-expression?
    . writeSnd "A.aiff" $ setDur 10 $ osc 440

  / The start time should be in fractions of a second instead of sample
    frames, so I'm not dependent on sample rate.  Also, will I need to emit
    negative time?
    . But as long as the srate constant is shared, what's the problem?  Also,
      for negative I'd have to decide how much, and besides reaper doesn't
      necessarily have negative time.
    . So I have to add a constant anyway.
  cache / incremental rerender
    notes
      . I want the sequencer to only send the damaged range, but the synthesizer
        will have to rewind to the previous chunk boundary, since it can't just
        put every note in its own sample.  I suppose a sampler could actually do
        that, but presumably physical models couldn't.
      . Though actually a model would need to save its state at chunk
        boundaries, so if I go per-note, then I wind up with rendering each note
        separately, with a header with the model's state at start time.  But
        overlapping notes would influence each other, so it would have to be
        chunks of overlapping notes.  Of course it's not guaranteed there will
        be a gap, so it would have to break anyway over a threshold.
      . This is all to say that the cache chunks are synthesizer dependent, so
        it needs access to all the serialized notes and can rewind as much as it
        wants.  If notes are saved individually and indexed by time then I just
        need to re-save the damaged ones and either send the time range or infer
        from file timestamps.
    - Include DamageRange RealTime RealTime in the notes dump.
      . This is assuming a always serialize all notes, but I'd also want to do
        that in chunks.  But I would have to expand the damage range out to
        all overlapping notes, which is not great if there's a drone + control
        and you modify the control in the middle.
      . I should just have to emit the notes with overlapping damage, but only
        rerender the time range.
      . Say I make each note is its own file:
        <start-time>-<instrument>-<voice>, where voice is just a number for
        otherwise overlapping notes.  If there's damage from s to e, I get
        the set of overlapping notes.  I delete everything in the damaged
        range, all all (start, instrument) at the times of overlapping notes
        before the range, and then write overlapping notes.
            |----------->|--->
                |--->
                |--->
                XXXXXXX damage
        . This is like Ui.Diff, except that it's RealTime and for
          Score.Events.
        . I also need to turn ScoreDamage into RealTime.  Maybe not trivial?
      . Actually first let's not bother with incremental, and just rewrite the
        whole dump each time.  The real saving is in not rerendering audio.
    - faust-im breaks output into chunks of n seconds.
      . Chunk = (startTime, InstrumentState, samples)
      . InstrumentState = Map (Instrument, Voice) DspState
      . Voice = Int -- assigned by polyphony, but how can I keep it stable?
        . For unlimited polyphony instruments, it doesn't matter, since it
          doesn't affect the output.  For limited voice, I just map it to
          different instruments.  So no Voice needed.  The difference is
          whether I allocate a new instrument for every note or not.
      . DspState = ByteString -- raw serialization of dsp class.
      . Or I could do a memoize thing where I memoize
        (startTime, Instrument, Controls, DspState) -> Samples.
    - PlayCache can sequence multiple .wav files.  The filenames need to have
      a timestamp so it can know how to seek.
    - As PlayCache does fancier stuff, maybe I need to put the sample
      streaming into a separate thread.
  - If there is only one cache mutated by the synth, then a play in process
    will be spoiled by a new render.  I can fix this by making a new cache
    each time, and hardlinking the unchanged entries.  I can remove the old
    one if the play is stopped and there is a newer one, so this could be done
    by the PlayCache vst.
  - Im signals have to either be audio level, or interpolate between their
    points.  Audio rate is overkill at the sequencer level, so I think I
    make them interpolated.  But since it's ambiguous whether the sequencer
    wants interpolation or a discontinuity, I think I have to disambiguate by
    emitting two samples at a discontinuity.
    . Ideally I'd have resolution independent signals, so just functions.
      Not totally sure what that would entail, but it would be a big change.
  more efficient Perform.Im.Convert
    - Trim signals.
    - I can probably serialize more efficiently by just mmaping the signal
      pointers, or at least directly copying their contents.  But maybe not
      worth it if I can just write the changed bits.
  Is it possible to do physical modelling on GPU?
    . http://futhark-lang.org/index.html
    . http://halide-lang.org/
    . hackage accelerate

shakefile: build:
  - in HsDeps and CcDeps, if I need every intermediate file, then
    I think I don't need Generated.
  - determine Shakefile.cppFiles automatically.
  . To get a path between two rules:
    ancestorOf('Synth/Sampler/Main') && descendantOf('Cmd/Cmd')
  - use new system calls and logging levels
  automatic "All.hs" modules
    . I'm reluctant because it's simpler to have normal files, and it's not
      that hard to update them.
    - Derive.Call.All looks for (note|pitch|control)_calls from Derive/Call/,
      but could also take from Local/Call/*
    - Local.Instrument looks for 'load' from Local/Instrument/
  - once upon a time, the shakefile took .2s to discover the build is up to
    date.  Now it's up to .7s.  Where is the time going?

incremental save / git:
  + try saving individual events for incremental save
    Seems to be just as slow as full save, probably most of the time is in
    the call to git.  Test again with larger tracks.
  - wrap operations in a lock file
  - make sure things are ok if it fails at any step
  - I don't think Ui.State needs to emit CmdTrackAllEvents for cases where
    diff will catch it.
  - See if git's delta compression understands binary and can compress
    tracks.  Otherwise, would it be worth helping it by e.g. separating
    each event with a newline?  But then it makes serializing events more of
    a hassle.
  . Git docs: http://progit.org/book/ch9-2.html

integrate / integration:
  score integrate
    - cascading score integrates
      Is there really a use for this, other than consistency?
  derive integrate
    - attrs that the instrument understands can turn into +attr calls, if
      they're not in the CallMap, e.g. save/test/wayang
    - adding a +soft stroke means it gets both less dyn and +soft again, so
      it's extra soft
    - bug: can't delete a derived track, it just gets regenerated
    - bug: can't undo past a integrate create, it just creates a new one
      Maybe I could not record the integrate step?
    - bug: create tracks, remove <, re-add <, does it work?
      Removing < should break the integrate links.
    - Ensure cascading track integration works.
    - If integrate is committing changes to a track, can that bite me if
      a "canceled" derivation comes through?  Think about this later.
    - quantization

lilypond:
  / move c_slur from Articulation to Parent.  I looked for it first in Parent,
    and in fact there's an extra test in Parent_test.
    . Or not, it fits with the other length-changing things in Articulation.
  * make if-ly and similar take Quoteds instead of strings.
  * I lost a \stemUp on viola-sonata/pno1 viola-sonata/pno1.t26 50.5-51; 17
		. (49.5s, 0s, "")               {ly-append-all: '(', ly-prepend: '\stemUp'}
			(49.5s, .5s, "ly-pre stemUp |"){ly-append-first: '('}
			(50s, .5s, "")                 {}
			(50.5s, 0s, "")                {ly-append-all: '\stemNeutral)'}
			(50.5s, .5s, "ly-post stemNeutral |") {ly-append-last: ')'}
			(51s, 2s, "")                  {}
    . output: r4. g''8( f''8 e''8) \stemNeutral) d''2 r4 \bar "|."
    . Maybe it finds ly-append-all and ignores ly-prepend.
		. Why do I get '(' in two places?
      . '(' does SuffixFirst, SuffixLast.
      . Oh, and then it also adds to the 0dur stemUp note.
      . I could otly add Flags.ly_code to 0 dur events, and Ly.first_last
        could skip those.  But I might have to have a separate 'add_note_code'
        which skips 0 dur from 'make_code0' which makes it in the first place.
        I think I never want to attach more code to a 0 dur event, since I can
        just make another one.  But I definitely do attach multiple bits of
        code to a single note.
    . The problem is that 'Lily.emit' wants to make a 0-dur event, which means
      that if I call it as a generator, it derives the non-existent children,
      and then emits only the 0 dur event.  I'm not sure if I should try to
      make it a generator for consistency with other ly calls (I'll never
      remember who's an attach and who's an emit), or make a transformer only
      for regularity.  It seems in the bigger picture, having transformers
      masquerade as generators by automatically applying Call.note might be
      more confusing than just having to remember which is which.
    . But 'emit' is actually fundamentally a generator, not a transformer, so
      it's actually a generator masquerading as a transformer.  And
      I definitely want it to be a transformer, or else I can't stack them.
    . I could make the generator version complain if the note is >0 dur.
    . Or I could try to make it work, by doing what Make.transform_notes does,
      and eval Call.note if there are no subs.
    . Actually, why should emit take subs at all?  I guess because I put
      ly-only on its own track.  I guess it's not technically necessary
      because they use Ly.when_lilypond already.
    . I feel like e.g. ly-pre with subs should apply ly-pre to all the notes.
      In other words, it would behave like attach.
    . The ranged emits like 8va need to be >0 dur.  They don't need to be
      parents, but dual-purpose calls like '(' do.  Maybe I can make
      attach for notes, and the emits not take subtracks.
    . If I do that, then I have emit can transform, but the generator will
      complain if there are subs, and complain if dur >0 and it's not that
      kind of emit.
    . Also there's a spurious ( at
      viola-sonata/vla2 viola-sonata/b2.t41 251.5-252; 63
      . I think it's getting distributed over from the other voice.
      . Showed up after
        patch 8a94f961f21a22132b933269d721057a4917ffb6
        Author: qdunkan@gmail.com
        Date:   Sat Aug  5 12:10:49 PDT 2017
          * lilypond: mark lilypond code events with Flags.ly_code
          This is more explicit than checking if it has any of the magic env
          vars, and easier to maintain when I add new ones.
      . This patch changed the Ly.add_code stuff to e.g. always append instead
        of replace, so that might be related.
  - What's the difference between tracks '> | ly-track' and '> | when-ly'?
  - It would be convenient to be able to see where I am in the ly score, e.g.
    measure number.  Lilypond derivation makes a ScoreTime -> measure mapping,
    I'd just have to save that and invert it.
  - Infer ruler from meter markings, or maybe the other way around.  Meter
    markings seem more convenient, but maybe I could just make LRuler
    similarly convenient.
    . But since the ruler is more flexible, it's easier to infer ruler from
      meter than the other way around.
  * Make tuplet use the normal lilypond evaluation, instead of simple_convert.
    . tuplets are causing extra pizz markings, which will be confusing.
      . This is due to modal articulations not working with tuplets.
    . Lilypond.Process.modal_articulations don't work for Process.simple_convert
      because it doesn't have access to the previous attrs.
    . simple_convert is a grody hack, but if I can't think of a better way to
      do it, I could add modal_attributes as a postproc.
    . But I've already put ly code in a string, so I can't get the notes back
      out.
    . Also it means I need to use ly-( and ly-) for tuplets.  In general, I
      can't attach any notation unless I put it directly on the note, e.g.
      dynamics.
    . Also I get spurious modal articulations after tuplets, e.g. extra pizz.
    . What would be a way to implement nested notation like \time without
      Lily.eval_events?
    . How about I emit a "group" event, which has a magic tag that says
      the next N events marked with my tag belong to me.  Then lilypond will
      gather them and put them in {}s after it.
    . Those next events may be a little ways off, due to Stream being sorted.
      So maybe convert can notice and gather the groups.
    . How to emit the group?  I can't split it according to the meter, and for
      tuplets I don't want to anyway.
    . What kinds of nested things are there besides tuplets?  Repeats?
    . Remember the main goal is to get modal_attributes and slurs to work on
      tuplets.
      . Why doesn't slur work in tuplets, and what would fix it?
      . It's because ( wants to put ( and ) on the first and last notes, but
        after 't' is done, there's just one note with '\tuplet { .. }' in it.
      . To fix it I'd have to keep the notes as separate events, but the
        problem is duration.  Really the duration is /3/2 or whatever but
        I'd need the lilypond backend to understand that the notated dur is
        *3/2, and that it's wrapped in \tuplet 3/2 { .. }.
      . One way would be hardcoded support for tuplet, so make an event
        with ly-tuplet = 3/2 and say a duration over the affected notes.  Then
        it would either multiply duration of the notes, or they have notated
        duration, but count them as the tuplet's dur.  E.g.:
          [ (0, 3, tuplet 3/2), (0, 1, c), (1, 1, d), (2, 1, e)
          , (2, 2, next note), ...
          ]
        Then Process.convert_chunk sees a tuplet event, collects the notes
        inside the duration, and runs a special 'convert_chunk' on them where
        the meter is ok with any duration, then wraps that in \tuplet, and
        then increments time by duration*3/2.
      . This is kind of like the groups, only hardcoded to tuplets.  In that
        case, why not do a general group thing?  It would be some flag to
        collect the overlapped notes, then... it gets tuplet specific because
        the special treatment of duration is basically the definition of
        tuplets.  So it seems hard to generalize.  If I someday have another
        example of nested notation then I can see what can be shared.
      . Nested tuplets don't work.  I think I have to have the tuplet have the
        actual times, e.g.
        [(0, 2, t 3/2), (0, 2/3, "a"), (2/3, 2/3, "b"), (4/3, 2/3, "c")]
      . Then convert_tuplet multiples by 3/2 and they become 1, which is
        the note duration.  Then convert to notation, and rewind time.
        If there is another tuplet in there, it should recursively expand.
      . I think this means that the duplet gets longer rule has to go in
        Lilypond.Process though.
      . The problem with 1/3 is that Time doesn't have the resolution to
        express it.  I could make Time into Rational, and then do
        a Ratio.approxRational in convert.
      . Rational seems to be generally cleaner, except Types.config_quantize
        is going to spoil triplets.  I could just remove that, or I could
        make quantize into an abritrary fraction, and expect a 1/3 if there
        are triplets in there.
      . Why can't I pass integral like in the score, and let lilypond stretch
        it?
        . Nested tuplet:
          . [ (0, 4, t), (1, 2, t)
            , (0, 1, "a")
            , (1, 0.5, "b"), (1.5, 0.5, "c"), (2, 0.5, "d")
            ]
          . Should be:
            (0, 1/3, a), (1/3, 1/3, b), (2/3, 1/3, c)
                         (1/3, 2/9, b), (5/9, 2/9, c), (7/9, 2/9, d)
            (0s, .33s, "")   4s
            (.33s, .22s, "") 4r
            (.56s, .22s, "") 4g
            (.78s, .22s, "") 4m
          . Lilypond should see:
            [ (0, 3, t 3/2)
            , (0, 1, "a"), (1, 1.5, t 3/2)
                         , (1, 0.5, "b"), (1.5, 0.5, "c"), (2, 0.5, "d")
            ]
      . Actually now I think maybe giving actual durations to lilyond and
        using rationals is not right.  It might be hard to find a common
        quantize duration in the presence of nested or complicated tuplets.
        Also, the notation works with quantized durations, and if I write
        those, and keep them that way, then there's no need to go through
        a potentially lossy division then multiplication.
      . Ok, so archive Rational Time.
    . Ok, so let's try that:
      * Archive the groups support, looks like I won't use that.
      * First do Process implementation to make sure it works.
        . Sort of, except the problem with nested tuplets.
      * Modify ly tuplet to emit the overlapping stuff.
        . If I use duration to get grouped events, I think this will get
          messed up if there are multiple parts, not separated by voices.
          Of course, the lilypond will get messed up by that anyway, so maybe
          no big deal.  It may be confusing if the non-tuplet notes are
          incorporated into the tuplet though.
        . But if I revive the general group thing then I can also make
          duration and sub-notes independent.  Of course I can already do that
          simpler by adding yet another env var.
        . Actually it totally does capture normal notes right after the
          tuplet.  The problem is that Parent level makes the notes longer, so
          now they overlap.  Why not leave them short and put the logic in
          Lilypond?
        . Nested tuplets STILL don't work.  It's because stretch also
          stretches the tuplet event, which makes it advance over the barline.
          But if it doesn't stretch it, then it doesn't cover the notes.  So
          this is the same problem as before, with the same solution: don't
          use the duration.  In fact, make it 0 dur, and put both durations in
          the environ.
  squart/6:
    - put accidentals on the trills
      http://lilypond.org/doc/v2.18/Documentation/internals/trillpitchaccidental
    * It constantly cancels nv on staccato, but it doesn't matter because you
      can't hear it on staccato anyway.  Maybe modal_attributes can count
      +staccato as having whatever +nv was previously set.
    * harmonic gliss:
      . before the note: \once \override Glissando.style = #'dashed-line
      . But I have to hide the tied notes:
				glissandoSkipOn = {
					\override NoteColumn.glissando-skip = ##t
					\hide NoteHead
					\override NoteHead.no-ledgers = ##t
				}
				glissandoSkipOff = {
					\revert NoteColumn.glissando-skip
					\undo \hide NoteHead
					\revert NoteHead.no-ledgers
				}
      . Then after the \glissando: \glissandoSkipOn
        Before dest note: \glissandoSkipOff
    * I want to distribute \downbow suffixes among notes and ly-post via
      code0_call only emits one.  I think I need a 'ly-post-note' that
      attaches to each sub-note.
    * The functions in Prelude.Lily are a bit of a mess.  Refactor.
      . code_call:
          gen:
            if not ly:
              Derive subs, throw if no events
            if ly:
              Derive subs and add code to first one
          trans:
            if not ly: id
            if ly: Lily.add_first code deriver
      . This will derive subs, and attach code to the first event.  So this is
        for attaching code to an existing note, though it only does the first
        one.  This is appropriate for ^"text", though why not make
        a transformer or standalone?  Why do I want the thing with duration?
        It's used for text and articulation, and ( [.  I don't use these with
        subs
      . It has the awkward feature where it doesn't derive Call.note so it has
        to be a transformer.

      . make_code_call call:
          gen:
            if not ly: mempty
            if ly: derive call <> subs
          trans:
            if not ly: deriver
            if ly: call <> deriver
      . This creates a new code event, and prepends it to subs or transformed.
        Standalone things like 'dyn' or 'clef' use it.  Also it's the base for
        code0_call, which uses it with Lily.code0, but they all do.

      . add_code, via transform_notes:
        . gen:
            if subs:
              concat . transform . map derive
            if no subs:
              transform $ Sub.inverting Call.placed_note
        . trans: transform deriver
        . This creates a new event, or derives subs, and transforms all of them.

      cases are:
        . attach code to each note: articulations, reminder accidental
        . ( [: attach to a single note. I could either pick first/last, or
          throw if >1.  I guess for a chord maybe I do want to put ( on each
          one, but it's certainly wrong to put it on multiple, unless I want
          to put (, ) on first, last.
        . tie_direction: attach env to notes, same as ( [
        . dyn, clef: emit single code0, no duration, no subs.  These are for
          either putting in ly-track, or attaching to a single note with
          a transformer.
        . 8va, subdivision, tr-span: as above, but have start end events.
          crescendo, diminuendo: I think they could use (start, end) as above.
          key, sustain
    / Put glissando line only right at the end:
      \once \override Glissando.bound-details.right.Y = #-2
      . Can't figure out how to do it. If I manually tweak
        Glissando.bound-details.left.padding, it doesn't change the slope.
      . If I tie to a short note before hand, the glissando line is not
        visible.
      . I think it's a portament, maybe I just write port.
    - tempo: I want to emit \tempo "xyz" as a global marking.
      . Looks like lilypond is smart enough to suppress it for all but the top
        staff.  Presumably I still have to put it in all the parts, so they'll
        get it when I extract.
      . I could have >ly-global distribute code to all instruments.
    - Staff notation has a notion of rhythmic spelling, which, being
      proportional, karya lacks.  In most cases I want to automatically infer
      it, but would it make sense to spell it explicitly in some cases, and
      how would that look?
      . I guess I could add a tie annotation, which merges duration with the
        next event, and a lilypond mode that ignores the meter and puts down
        each duration explicitly.
    - 'incompatible with meter' errors don't have a clickable stack
    * duplets don't work: tuplet duration must be simple, but was: 0.75
      . I could do it if I allowed dotted durations.
      . It would be \times 3/2 "\times" (tuplet_dur / note_dur) "/" note_count
    * Use \tuplet instead of \times.
    - tuplet error
      . tuplet duration must be simple, but was: 0.4911504424778741 (0.0,0.5)
        rt (289.11504424778764,289.6061946902655)
      . shouldn't the warp be id?
      . Due to a block which was slightly short, so the tempo wasn't 1:1.
      . This as a generally annoying problem.  Maybe I can have a mode where
        blocks are called 1:1, and they'll rearrange themselves in callers
        when they change duration.  It can also maintain LRuler.extract.
    - Why does 7/8 not bar the eighth notes?
      . Because lilypond does beaming on its own: lily/Auto_beam_engraver.cc,
        configured in scm/auto-beam.scm and scm/time-signature-settings.scm
      . I should be able to use Meter for beaming too, but for now just beam
        manually.
      . I need to set the subdivision explicitly:
        \set Score.beatStructure = #'(2 3 2)
        Or \compoundMeter #'((2 8) (3 8)) to also set the visible meter.
      . Have the meter and subdivision commands set beatStructure for
        meters where lilypond doesn't already do a good job.
    * I need a way to explicitly set rhythmic spelling per-instrument, for
      ambiguous meters, e.g. 3/4 as 3+3/8 vs 2+2+2/8 or even 3+3+3+3/16 6+6/16
      . Or maybe better to write those as duples?
      . meter works by setting Constants.v_meter, which is collected by
        Lilypond.get_meters, but that's because it needs to be global.
      . Maybe I can set a Constants.v_subdivision, which overrides the meter
        used by Process.make_lys.
      . I could make it only apply to the notes with v_subdivision, but it
        seems like a pain to wrap up everything, and 'meter' is stateful,
        so... maybe not so bad?  But then I need to unset it at the end so
        it doesn't error as soon as the real meter changes.
      . Just setting an env val would be simpler... except I need this to
        apply to rests too.
      * 'subdivision' should emit a cancel at the end if it has non-zero dur.
  - lilypond: espressivo <> should be like a normal hairpin
    But the way to do this is awkward, << .. { s4 s4 \< s4 \> s4 \! } >>
    . I also want tied notes to expand to 'c4~ \< c4 \>'
      But that has problems, I need a \!.
    . Even '<< b'2.~ { s4 \< s4 \> s4 } >> | b'4 cs''4 \!'
      is not ideal, the decrescendo extends to underneath the next note.
      If I put \! on the tied-to note, it still won't extend.
    . see \at in https://github.com/openlilylib/openlilylib/tree/master/input-shorthands/articulations-not-aligned-with-notes
    . Ideally:
      a \cresc \decresc % over duration of the note
      a \cresc ~ a \decresc % same
  - Lilypond.write_empty_staff creates incorrect rests for a tuple, as shown
    in Lilypond_test.test_add_bass_staff
  - to make notes without duration, ignore the existing duration and choose
    the simplest possible duration.  For zheng, yangqin, percussion.
    . Exception for +trem
    . Also applies to pizz, and sonically equivalent things like +det detache.
    . Or maybe I can fix detache in VSL by ignoring NoteOff, I think it can do
      that for pizz and staccato too.
  - warning if ly-prepend or ly-append is being omitted due to a chord
  - Maybe code events with a voice should go in the voice requested rather
    than mixed into the first one.  E.g. would have fixed grace notes.
  - one track has voice, the other doesn't, causes a "can't advance time
    backward" error
  - Support ly-append-first and ly-append-last for zero-dur notes.
    . First come up with uses for them?  Or do it just for orthogonality?
  - code events in >ly-global can be distributed to all staves
    Otherwise I have to remember to add e.g. ly-key to all staves manually.
    . But ly-key is no good, I really do need to set the key.  I think I have
      to break up the block.  Why can't I do assignment more easily?
    . Well, I have to grab a deriver to dynamically scope the new value around.
      Unless I let a deriver mutate the environ, then it has to be nested.  If
      a deriver can mutate, then events have to be evaluated in order.  Of
      course, they already do for controls because of the previous sample.
      And since it's unset at the end of the block, block caching still works,
      the same way as for previous sample.
    . On the other hand, I think I want to encourage nestedness and it should
      be easy to split.  The only reason viola-sonata has huge blocks is that
      it's a midi import.
  * If I can figure out the meter from just the name, then I can get rid
    of the awkward map with hardcoded meters.
    . It should use x+y/z notation to explicitly set divisions, but the sum
      should have a default division, e.g. 9/8 defaults to 3+3+3/8.

  - optionally emit the lilypond to display a compound meter, e.g. 3+2/8
  jianpu
    . Research jianpu conventions, but basically:
      . Hide staff lines, stems, beams.
      . Noteheads replaced by numbers
      . Use a somewhat proportional layout.
      . Lines for 8th, 16th etc. notes.
      . Dots for octaves.
      . Stack chords vertically.
      . Grace notes as superscripts.
      . I still use lilypond's bars, slurs, tuplets, dynamics, etc.
    . http://people.ds.cam.ac.uk/ssb22/mwrhome/jianpu-ly.html
      . Produces extremely mangled lilypond.  I should make my own from first
        principles.
    . standalone commercial software:
      http://www.medeli.com.cn/soft/gb/soft.asp

negative duration / arrival beats:
  new arrival notes scheme infer-duration:
    . I don't want to trim because I might need the controls if I extend the
      duration.  I do want to trim because I don't want e.g. t-dia at start
      from the caller, but I do want pitch at start from the block.
    . t-dia:  0   1   0
              b1  b2
              a b|c   d
              a b|    d
    . If 'c' is present, then I clip off t-dia because I drop controls
      starting at 1.  The starts are replaced with ones from b1.
      So the sample at 'start' should come from the local block only.
      Samples after start can be used from global.  So what if the block
      call just deleted samples at exactly block end?  Any local tracks
      could put a sample there, but otherwise the event gets control signal
      afterwards.  If there is a note to replace, the >start samples are
      replaced, but otherwise, I get the ones from the caller.
    . E.g. global filter sweep.  A infer-duration note would stick out
      because the sweep is meant to be continuous.  In this case, I can
      just use the untrimmed control.  But t-dia should not do that, unless
      I really am treating it continuously.  This is the same problem as
      whether a control should continue changing into the decay or not.  The
      sweep should, but a pitch belongs to the next note.  So maybe this is
      a fundamental limitation of the score language.
  represent arrival notes differently
    . Instead of representing arrival notes as the sounding time plus
      a negative duration, I could represent them as a start time plus a flag.
      If the flag is set, it's considered an arrival note and the trigger line
      is drawn at the bottom instead of the top.
    pros:
      1 Cmds work the same for negative and positive durations, I don't have
        to do any special checks for overlapping with a following negative
        event.
      2 I can have a note arrive and another depart from the same point, e.g.
        trill up to a note.
    cons:
      3 The encoding seems not as elegant.  I can still do it with negative
        durations, but now the negative is just a flag, rather than
        representing the actual extent of the duration.
    4 This means that cmds work spatially rather than logically,
      i.e. I'll need a separate "set beginning" cmd since it becomes set
      duration for negative events.  I don't know if that's a pro or con, but
      it feels like a con since I need more cmds.
    #1 might not be compelling if I've already done the work to get them to
    work, but if it's buggy or turns into continual for for every cmd then it
    becomes a big deal.

external
  parsing "1r" instead of "1s" gives a "unexpected eof" error msg, it should
    say 'r' was an unknown suffix
    Can't get attoparsec to consistently report an error.  Kind of hard when
    it always backtracks.
    - Need to add <||> to attoparsec.
  + send a patch to improve Random.Shuffle?

local: plugins:
  I also want local code in haskell.
    . I could put code in Local.Score.SomeName, and have those either
      statically linked in, or dynamically compiled and loaded on each
      derivation.
    . Static linking is easier, but I should at least automatically create
      a All.hs.
    . Also, creating calls is a bit heavyweight, since I likely don't care
      about tags and doc and module can be inferred.  Presumably I can get
      around that with a constructor that defaults those fields, and then
      the generated All.hs overrides the module.
    . Writing in tracklang lacks typechecking.  There could be utilities to
      write like tracklang, but in haskell, e.g.
        c_p1 = with_note_call "p" "subst1" $ block "pattern"
  . ghc can now unload code: http://ghc.haskell.org/trac/ghc/ticket/8039
  . might be relevant: http://hackage.haskell.org/package/dynamic-loader
    http://codeutopia.net/blog/2011/08/20/adventures-in-haskell-dynamic-loading-and-compiling-of-modules/
  . to do per-score code, I can put it in Local.Score.<namespace>
    Convert to module name by replacing -x with (upper x) and capitalizing the
    first letter.
    Then when you load a score, incorporate the static config from that
    module.  Shakefile can link in the local modules under the right name.
    . If it gets to be too much overhead to link on every single build, then
      I can load dynamically at runtime.

cleanup:
  . Merge Val and MiniVal (RestrictedEnviron.Val for now).
    . NOTE [val-and-minival]
    . The problem is that I'd like to use Val to communicate with tracklang
      without having to re-parse, e.g. via Expr.ToExpr, but that means I can't
      use Val without dragging in Derive, due to VPitch.  I don't need the
      separate MiniVal if I can get rid of VControlFunction and make VPitch
      not in Derive, have a ShowVal, and serializable.
    . I already want to get rid of ControlFunction, but not sure how to do it.
    . I should be able to do those things with Pitch by adding more function
      fields.  Or alternately, typeclass + existential, but I'm not sure if
      that's any better.
  - switch from parsec to megaparsec?
    . Save it for a big ghc upgrade, since it requires a newer semigroups.
  - Cmds don't indicate when they could abort or throw.  I rely on ad-hoc
    conventions like get_ vs. lookup_, but what about it actually being in the
    type signature?  I could try the "lightweight checked exceptions" in:
      http://www.well-typed.com/blog/2015/07/checked-exceptions/
      https://www.reddit.com/r/haskell/comments/3g41au/follow_up_safe_lightweight_checked_exceptions/
    . Or an easier way would be to put 'throw' in a subclass.
    . I have this implemented in the p-monad branch, but it didn't seem
      terribly compelling.  I think the reason is that it turns out most
      functions can throw.  It doesn't replace get_ vs. lookup_ because they
      are likely to call something else which can throw.
  . Could I simplify slicing and inversion by making it into a score
    preprocessing step?  It would annotate UI Events with children, so the
    sub tracks would be in Event, not in Context.
    . If I could get rid of the ctx_sub_events / ctx_sub_tracks thing too that
      would be nice.
    . Could I also somehow make inversion universal?  The idea is to
      eliminate the thing where I forget to add Sub.inverting.
    . I could also take evaluation control away from the event, effectively it
      would mean the Sub.notes bit would be hardcoded and events would get
      [[Sub.Note]] instead of a TrackTree.  I'd lose power, but what are the
      advantages?
  . Things I don't like about evaluation:
    . All that stuff in Context.  The presence of sub_tracks can cause
      unexpected further inversion.  An example is that when I inherited
      the Context for Call.note_here, it also inherited the sub_tracks,
      which caused Call.with_pitch to be overridden.
    . It's also dumb how Context has the event (start, dur) duplicated
      in the 'event' field.  It's not duplicate info for track events
      because they have TrackTime, which is otherwise unavailable.
      This I think is ultimately due to events being in TrackTime
      context instead of (0, 1) normalized.
    . Maybe the problem is inheriting Context?  Or maybe it's awkward
      how it's effectively a manually passed packet of data, while the
      stuff in Dynamic is dynamically scoped.  Events wanting to know
      about their neighbors really does complicate things.
    simplify Context
      . Maybe I should explicitly provide specific bits of context, e.g.
        . prev, cur, and next event TrackTime
        . prev and next logical pitch
      . Say I do that, and put them in Dynamic.  How can I then get rid of
        sub_tracks?
      . I still need prev_val
      . There's nothing intrinsically wrong with Context, ultimately it's
        just an argument, like passed_vals.  I guess it's easy to remember
        passed_vals as just the arguments and understand how they work,
        while that sub_tracks stuff was confusing.
      . Maybe it's just the presence of sub_tracks in Context?  How can
        I get that out?
    . That 'collect' arg in Eval.eval_expr.  Why False for Eval.reapply
      but other functions make the caller decide?
  - pitch transpose
    . It's confusing how sometimes the environ is applied to the pitch during
      derivation (e.g. Post.set_instrument), and sometimes it waits for Convert
      to do it.  Do I really need both?
      . The environ goes in the Score.Event, which is then applied to the pitch.
        So Post.set_instrument actually maybe doesn't work, if the event
        still has environ.  I have to replace the event environ instead.
    . Post.set_instrument needs to set because I need the environ from the new
      inst.  Could I instead overlay the environ into the event environ?
    . It's error prone because there's nothing that enforces that you set
      instrument with Post.set_instrument, and if you don't, it will work until
      you use a scale with e.g. tuning, and then it will be slightly off.
    - Maybe I should at least not export Score.Event(..) so I can't directly
      modify its fields?
    . Or maybe insist on rederive instead of just changing the instrument.
      In general that's the proper approach.
    . Originally added in the patch 'add interpolate scale':
      The bigger problem was that since pitches got the Environ at conversion
      time, the interpolate scale couldn't substitute `key-from` and `key-to`
      because any environ values it set before evaluating the pitch wouldn't
      "stick".

      So I switched to applying the environ when the pitch is created, but this
      broke the case that made me switch to applying environ at the end in the
      first place, which is when switching instruments in a postproc I want the
      new instrument's environ, specifically Environ.tuning, to apply to the new
      event's pitches.  So now when I switch instruments I have to explicitly
      apply the environ from the new instrument, via Post.set_instrument.
    . Also error prone: I applied octave transpositions via Call.add_constant,
      but then realize-ngoret uses transposed nn to infer, and untransposed
      pitch for the final pitch, so I get a confusingly wrong result.  The
      solution is to apply via Pitches.transpose, but I shouldn't have to make
      complicated decisions like that.
  - It seems I get slicing on an already sliced track if I have an
    intermediate empty note track, e.g.:
      [(">", [(0, 1, "")]), ("> | +a", []), ("*", [(0, 0, "4c")])]
    . Is it a problem?  Should I skip if already sliced?  Document if it's ok.
  - use Data.Vector.Algorithms.Search.binarySearch instead of my own, but
    make sure it has the right specializations.
    . Or at least use mine in Util.Vector.
  / BaseTypes.CallId should have a name more reminiscent of Symbol.
    CallSymbol?
  - Modification of State is still kind of messy since I have lens and
    non-lens versions.  And if I wanted to modify with a lens I wouldn't be
    able to add an effect, like causing damage.  If I used ekmett lenses maybe
    I could unify effectful modification.  I'd also need a way to focus
    on UI state.
    . For example, I can add an allocation with State.allocations, but if
      I wanted to make that cause damage I couldn't.  Of course maybe it
      doesn't matter since I infer damage based on config changes.
    . Also I can't make sure that UiConfig.allocate is used instead of
      directly modifying the map.  The root of the problem is that I have
      unrestricted modification via State.modify_config, but even if I removed
      that I'd want something as convenient as lenses, but with the posibility
      of effects, or at least access to Ui.State and Cmd.State.
    . That said, I'm not sure how much this actually matters.  Maybe I should
      wait to see if it's actually a problem before worrying about it.
    . I guess it already has been a bit of a problem, in that the test had
      a bug where it put on the wrong backend.
    - If State.allocations is so read-only, why not make it a plain function?
      . Tests use it to write...
  - Why re-export UiConfig from Ui.State?  Why not directly reference
    UiConfig?
  - Can I make prev val or {Note,Control,Pitch}Deriver return values more
    typesafe with GADTs?
    . Study https://github.com/goldfirere/glambda for ideas.
  See about removing type prefix from record fields.
    . However, if there are lenses, then I need those names for the lenses.
      But perhaps the plain version can have a leading _?
    . Another bonus of the leading _ is I don't have to worry about unused
      function warnings.
    - Cmd.State
    - Derive.Deriver.Monad
    - Ui.State
    - Ui.UiConfig
    - Perform.Midi.Instrument
  - Util.TimeVector has a hack where a sample at <=0 is considered to extend
    to -inf.  It's because I want a control track call at 0 to extend back.
    But I could do that directly with a postproc ala the tempo hack.  It seems
    like a hack at a higher level is better than one deep in the signal
    implementation.
  - Expr is NonEmpty since there is always at least a "" call, but this is a
    special feature of events.  Would it make more sense to parse "" as [],
    and then special case [] in EvalTrack.derive_event?
    . But I'd need a newtype, otherwise ShowVal [Call] overlaps.  Of course
      the only reason it doesn't already overlap is that a don't have
      a ShowVal for NonEmpty.
    . But Quoted is also Expr... should it be non-empty?
    . I now don't remember where it was that I had an Expr that made sense as
      [], so maybe I don't care about this anymore?
  - Move Derive.info_prev_val to the environ, maintained by EvalTrack.
    . This gets rid of all the Taggable stuff, at the cost of making
      Args.prev_val in Deriver and dynamically typed.
    . There's no Val for Score.Event, so I can't use it for note tracks.
      Of course I could just add one, maybe not a big deal.
  - Overlap detection in Derive.Slice I think is still messed up, or at the
    least it's more complicated than it should be.
  - I could make the fltk interface clearer by putting c_interface.cc into
    fltk, and then putting all the types it depends on in one header.
    . I could make that a .c file too, and get rid of the sketchy hsc2hs on
      c++, as well as clang's "treating 'c' input as 'c++' when in C++ mode"
  - split up CallInfo depending on type
    I got started but was discouraged when it came time to write
    GetLastSample, maybe I should make another go.
    Note tracks can't get a GetLastSample at all.

performance:
  - When I'm using ghc 8.2, try compact regions for inst db, especially vsl.
    . 'compact' package
    . Maybe even serialize it to disk?  Probably not worth it though, since
      startup is pretty fast and probably inst db is not a big part.
      . 0.584cpu / 0.222s.
    . Can I use heap profiling to find other large CAFs?
    . Can I use compact regions for the REPL loaded modules memory?
    . compactWithSharing is slower but retains internal sharing, test to see
      if it's worth it.
  . ghc 8.2 puts heap profile in the eventlog so I can align heap profile
    with events: https://ghc.haskell.org/trac/ghc/ticket/11094
  - Reduce memory used by REPL.  NOTE [reduce-repl-memory]
    . About 200mb.
    . GHC reads interfaces maybe with ghc/compiler/utils/Binary.hs:/readBinMem
    Try -fignore-interface-pragmas
      . From ghci: 210mb without vs. 1552mb with
      . But from REPL seems to make no difference.
      . Actually, I can't reproduce this now.
    . 200mb for an empty score seems excessive.  Where does it go?
      . With inst db: 197, without sysex: 190, without vsl: 187.4
      . Without repl: 12mb
      . So 190mb consumed just by loading .o files!  du on obj dir is just 76mb.
      . Loaded modules:
        [254 of 255] Compiling Local.Repl       ( Local/Repl.hs, interpreted )
        [255 of 255] Compiling Cmd.Repl.Environ (Cmd/Repl/Environ.hs,interpreted
        . with verbosity=2:
        . Stable obj: [Local.Instrument.Kontakt.Wayang, ... 253 modules
        . log: Ready for upsweep
          [NONREC
                ModSummary {
            { ... imports of every module }
        . compile: input file ./Ui/ScoreTime.hs
          *** Checking old interface for Ui.ScoreTime:
          [ 41 of 255] Skipping  Ui.ScoreTime( Ui/ScoreTime.hs,
              build/opt/obj/Ui/ScoreTime.hs.o )
          *** Deleting temp files:
          Warning: deleting non-existent /var/folders/6j/.../ghc_62.hs.o
          . bypecode compile for last two modules
    . 'du -hc build/opt/**/*.hs.o | tail -1' shows 55mb for object code,
      and 19mb for .hi.  I'd think object code would be loaded directly with
      little overhead, but that means .hi code expands by (190 - 55) / 19 = 7x
      expansion, which seems like a lot.
    . Also the memory measurements are haskell heap, which might not include
      loaded object files.
    . However, it's also loading .hi files for external packages too, though
      I'm not sure how much.  The external package code is shared libraries,
      which is shared with the app (and not in the haskell heap anyway).
    . Use dtrace to figure out exactly what the GHC API is loading and when.
    - I should be able to share object code by linking everything as a shared
      library... that might save 55mb at least?
  - Allocation when idle: about 300kb/sec
    . What triggers this?  Nothing, it's basically always happening.
      No, the allocation is always happening, but usually it doesn't get
      retained.
    ? Who is running?
      . Threads:
        / main - Ui.event_loop - should be blocked in Fl::wait,
          though it comes back on every cursor move.  But still allocates even
          when it doesn't have focus.
        . responder - Respond.responder - Should be blocked in STM.atomically
          block.
        / Midi.CoreMidi.initialize forkOS - goes into CFRunLoopRun
        / interpreter
        / Responder accept repl socket
        . Cmd.Performance: eval performance
        . Cmd.PlayC.play - updates the playback
        . Perform.Midi.Play render midi
      . Could it be EKG?
    . It stops during play.
    . Try disabling ekg and use LDebug.memory and see if it's still there.
    . It still grows without ekg.  Well, the second time it seems like it
      moves but doesn't grow.
    . Is there some way to instrument allocation so I can see which thread is
      doing it?
    . Actually it seems like ghci does it all by itself.  So it's either
      inherent to the GHC API or ghc runtime in general.
    . Does it grow with the repl off?  Yes, so apparently not the repl.
  - Control input lag, debug with Trace.traceEventIO
    . http://www.yesodweb.com/blog/2012/10/future-work-warp
    . Can I use custom events to see lags in threadscope?
      . Yes, but hard to visualize with everything there.
        I can get labels with View -> Event labels, but often they are jammed
        together, and draw inconsistently.
      . What do the numbers in threadscope's green bars mean?  ThreadId?
      . What I want is for each respond cycle to see where pauses were, and
        why.  I'd want to bracket the respond cycle outside of waiting for the
        next msg, get the total duration of each one.  Possibly I can do that
        by using ghc-events to process the eventlog.
    - GHC's +RTS -v flag is documented but doesn't exist.
      It only exists when -debug, but this isn't documented.
  - Criterion testing: why is cmd_derive faster than derive?  It should be
    doing more work!
  - Check out score size with 'weigh', ala https://github.com/haskell-perf
  - experiment with GC flags
    memory usage:
      . 200 mb -> 350 rss
      . 250 by LDebug.memory and ekg, 500mb by system viewer.
      . I think I have a very large proportion of static data in the GHC API
        loaded .hi files, so that should avoid GC as much as possible.
        Increase the generation count?
        . In the future can I put that in static memory regions?
      . Then I have a lot of short lived garbage generated on each derivation.
      . Then the rest is medium life: score data, Performances.
    . -A8m - larger generation 0 means fewer collections, good if lots of
      garbage is generated.
    . H - Suggested heap size.  I don't really understand this.
    . -qg - turn off parallel gc
    . -n2m - divide -A into chunks, so the first thread to run out doesn't
      trigger a GC for all of them.  Good for unbalanced allocation?
    . -I0 to turn off idle GC.  But it's designed to be good for interactive
      use, and maybe I do pause for >.3s.  Or turn it up to 1sec?
  - find space leaks with nmitchell's stack limit technique:
    . run build/profile/verify_performance +RTS -K975K -xc -RTS --mode=Profile
        p/cerucuk-punyah.state
      Derive.LEvent.events_of,
      called from Derive.Stream.zip3_on.\,
      called from Derive.Stream.emap,
      called from Derive.Stream.zip3_on,
    . Also, what's with the compile_library stuff in the middle?  Should
      I make it stricter?
    . Giving up for the moment since I don't understand the output.
  . Seq.sort_on winds up calling compare on Stack 13374153 times! 9.1% time
    I have to sort it because the stack is kept in reverse order.
    - Per-track stuff can wind up happening zillions of times due to
      inversion, so look for other places where I do work or collect data
      on every track fragment.
    - At least at one point, keeping EnvKey.seed up to date was expensive, and
      it's not even needed when there's no randomization.
    - I could analyze TrackWarp or TrackDynamic to get stats on how many times
      each block is called, along with overall stats on how many notes.  Just
      an interesting thing to know.
  criterion
    - score from a file
    - parsing
  understand deriver performance
    . I never know if changes I am making help or hurt performance, because I
      don't trust any of my profiles.  This means I hardly ever run them, at
      which point why bother having them?

    . Productivity is actually really good during derivation: 70-80%.  Only if
      I turn on heap profiling does it go down to 33%.  So maybe there's
      nothing to do?  Still, it seems like it's slower than it should be.

    . I want to find out how much list copying happens due to Stream being
      a list.  Perhaps I can use SCC annotations?  For transforms, I want to
      see the effect of a transform copying the whole stream so I can tell if
      making it interleave has an effect.
      . It would be nice to see how many times each cons is copied, but it
        would have to be for the output stream specifically.  How can I do
        that?  I think I would have to make my own list type, then count
        allocated cells?
    . Also, from heap profiling, the vast majority is PINNED, which is
      presumably ByteString.  But what is it then, if I'm using Text for
      events now?

  research using pipes for generators and transformers
    . This would handle the composed transforms thing.
    . What about parallelization?
    . What about the MergeList idea?
    . The bigger question is how do I do dynamic state when all the different
      calls are interleaved?
    . Actually now I'm thinking pipes aren't suitable for this.  Pipes are
      about interleaving effects, but derivation is pure.  But not quite,
      since it does depend on StateT.  In a pipes implementation, a generator
      would be 'P.Producer Event Deriver ()', and a transformer would take
      a Producer to another Producer.  Actually, since calls need to typecheck
      etc., it winds up being:
        type Events = Producer Event Deriver ()
        type Generator = Deriver Events
        type Transformer = Deriver (Events -> Events)
      . In a pure environment, pipes still give a constant bound on how many
        elements I hold on to at a time.  But since I look ahead arbitrarily
        much, maybe I don't want that.
    - Set up a pipeline over a StateT that returns Event.
    . The way to do this without pipes would be for transformer to be
      Deriver (Stream -> Stream).  Then I can run all the transformers, and
      then compose all their functions.  At that point, the only thing pipes
      would really give me is a clear picture of how many elements I need
      because each one needs to be specifically awaited... but it seems like
      the look-ahead stuff would be really inconvenient.  And I do the same
      thing, it's just less convenient with pipes.
      . It does mean I have to express all transformers purely.  This is true
        for the non-monadic Post functions, but it means I can't express ones
        where a previous monadic effect on a previous element effects a later
        one.  But that only applies to Threaded, and I can get that anyway by
        threading myself, so maybe there's no problem?
      . The way to prove that would be to remove the monadic Post.emap
        functions.
  make composed transforms more efficient
    . Composed transforms have to keep the whole event stream in memory since
      they can't interleave.
    . Would it then be possible to deforest the intermediate lists?  Bulit-in
      deforestation won't work because of the intervening call machinery, but
      maybe I can recreate it manually.
    - First, figure out how to measure the amount of memory used by
      intermediate lists.  It might be completely trivial.
    - First, I have to detach threaded state for the actual map.  This is
      possible because I don't care about Threaded or Collect.  So modify
      Post.emap_m to map a Derive.run over every element.  Then I need to
      collect the output and turn Left into a Log... or leave it in the stream
      somehow so I can throw at the end.
    - I think the stream will then remain lazy, and I should be able to GC
      as it goes, but verify with Debug.trace.
  - I'd like to see if directly modifying Collect or a MergeList for LEvents
    could reduce garbage, so I need to get some profiling up first.
    . monad-par-extras Control.Monad.Par.AList is deprecated due to poor
      performance, what's up with that?
  - Internal.merge_collect is constantly merging in mempty, try reducing its
    use.  Can I continue to enforce monoid-nature?
  - I should be able to move samples only when converting to MIDI, this way
    I don't need to move parts of the signal that wind up being trimmed.
    Either try to trim the signal earlier again, or delay transformation to
    Perform.
  - https://github.com/tobami/codespeed can make a web page with perf graphs
  . Signal.sig_op has 4.8% alloc, from Control.cotrol_call ->
    Derive.with_relative_control -> Perform.sig_multiply
    . So default multiplication for dyn is expensive.
  scrolling through giant blocks is slow
    - drawing is stil slow, I'll have to look at the fltk layer
      It happens when the block is wide.  Use test_block to see if it's just
      fltk.
      . It's fltk.  Not alpha draw though.
      Scrolling is weirdly chunky near the top when fl_scroll() is on.
      Curiously it doesn't seem to help at all.
    - Would it be faster to call fl_scroll once for all the tracks?  I could
      also theoretically call find_events all at once too, though that
      shows up low on the profile, so maybe it's not a big deal.
    . The thing is, it seems like fl_scroll doesn't actually help scrolling
      speed at all.  Maybe all the time is spent elsewhere?
  - Store signal chunks in the Ui.Track so they can be directly emitted.
    This is only useful for large chunks of 'set' calls, probably recorded
    from MIDI.  So it's probably not pressing until that feature exists.
    . make Ui.Events into 'Map ScoreTime (Event | Chunk Signal)'
    . collapse chunks of adjacent 'set' calls into a Chunk
    . track_derive on a Chunk just returns the contents
    . fltk event render should detect too dense events and omit them, rely
      on the signal render
    . UI edits should see the Chunk expanded out as Events.  Inserting an
      event should modify the chunk or split it depending on if the inserted
      event is a set call or not.
  Cmd
    - If a msg aborts or doesn't run any cmds, don't bother to run diff.
      Except that hardly ever happens if I do shortcut thru.
    - cache track cmds for each track, update when the track title or skeleton
      changes
  Derive
    - parallelize derivation
    AppendList / MergeList for Derive.Stream
      - switch to AppendList and try to get garbage down
        Avoid copying sublists returned by block calls and cache hits
      - see if a Merge constructor can reduce copying
      - can I cache length and range in AppendList?  does it matter?
      - insert parallelism?  maybe the evaluator can do that when it sees
        Merge?
    - lazy signals
      - check out 'at' and 'bsearch' occurrances and see if they can use tails
      - There are lots of lookups in the tempo map
    - see if making a version of Derive.local that's non-monadic in the
      modifier has any effect on performance
    derive cache:
      - can I cache long blocks by slicing them if they're >n?
      - c_block should only cache if the block has > a certain number of
        events.
      - I won't rederive cached generators if they have control damage outside
        of the event range.  But there's nothing stopping a generator from
        reading ahead or behind... come up with some kind of solution for this.
    - fair amount of garbage generated by SignalBase.bsearch_above, I think
      this is because it has to box the values when it pulls them out.  But
      it's really just comparing to a Double, so I should be able to do the
      operation unboxed.  But decide about lazy signals before going nuts on
      this.  If I revert to linear search then none of this is necessary.
    - at_linear is called a lot by compose, by compose_warp, by d_warp
      can I make this more efficient?

fltk:
  - Floating input in the wrong place for negative events with multiple lines.
    . Because it assumes the text goes downwards.
    . Since haskell doesn't know how the text is wrapped, it can't know where
      to put the input.  I think I'd want the input itself to know it's
      wrapping upwards, so it can get it right during input as well.
    . It seems like too much hassle for a cosmetic issue.
  - It's annoying to edit long words (e.g. kotekan kernel) in FloatingInput
    because the box is too narrow.  Can I automatically expand the width to
    fit the longest word?
  better drawing
    . All this incremental redraw stuff is fussy and seems like it should be
      unnecessary.  I should be able to lay it out and have someone else handle
      selection overlay and scrolling.
    . How hard would an OpenGL version be?
    . Or why not get rid of the callback, and just keep the complete track in
      c++, like I do with the signals.  I think I need to do that anyway for
      OpenGL, and that way I don't have to play with getting event ranges,
      I can just scan the whole range on every draw.
  - Maybe I could ship over a chunk of playback data in advance, and let the
    UI interpolate playback cursors.
  * text drawing is pretty messed up with negative events and lots of wrapping
    . I think negative + positive with lots of wrapping makes both disappear
    * Each succesive word wrap bumps down by a pixel.
      59, 70 - each one is 10 tall, but y is +1.
  * save/bug/align-right: right side text redraws inconsistently
    . abcd 0123
    . When it draws:
      fltk/EventTrack.cc:850 ---- calculate drawable pixels for Event(0t, 0t, 0 '0123') is_left: 0
      fltk/EventTrack.cc:853 TextBox Left
          'abcd' Rect(28, 56, 27, 10)
      fltk/EventTrack.cc:853 TextBox Right
          '0123' Rect(42, 56, 27, 10)
      fltk/EventTrack.cc:927 event_line (0123, Rect(42, 56, 27, 10)) pixels: 0
      fltk/EventTrack.cc:1027 drawable pixels for Event(0t, 0t, 0 '0123'): 20
      fltk/EventTrack.cc:1104 POSITIVE: Rect(42, 56, 27, 10): 0123 left 20 - 10
      0------------

    . When it doesn't draw:
      fltk/EventTrack.cc:850 ---- calculate drawable pixels for Event(0t, 0t, 0 '0123') is_left: 0
      fltk/EventTrack.cc:927 event_line (0123, Rect(36, 56, 27, 10)) pixels: 0
      fltk/EventTrack.cc:949 next 0, box: Rect(28, 56, 27, 10) 'abcd'
      fltk/EventTrack.cc:954 intersect: Rect(28, 56, 27, 10) with Rect(34, 56, 29, 10) (0123)
      fltk/EventTrack.cc:1027 drawable pixels for Event(0t, 0t, 0 '0123'): 0
      0------------
  - FloatingInput on linux doesn't interact well with a tiling window manager.
    The new window probably needs to be marked transient.
    . Can fltk even do this?  I can't even figure out what xprop should show
      for transient windows.
  - Factoring a bit of score into a call makes it less readable because
    I can't see the events inside.
    . I could put a mini version in the background of the event.  I'd need
      to be careful to retain readability.  Maybe only show the frist track,
      or the first note track.
  - reduce duplication in EventTrack.cc drawable_pixels
  - I need to differentiate DEBUG from LOG.  And LOG can go to seq.log.
    . I'd need to pass a haskell callback, so it can serialize to JSON.
  - negative event text is pushed downwards the more it wraps
    . Probably that padding pixel making it not line up.
    . All these padding tweaks are a real mess.  Can I get rid of them and
      apply them all in one spot?
  - event "a`tamil-i``xie`" clipping with next event is wrong
  - what's going on with SeqScrollbar and FlSeqScrollbar?  Looks incomplete?
    . It still might be useful to put the top level ruler labels, or cues if
      I ever use those, but I'd have to make it wider.
  - Do I want to support set_ruler for Scrollbar?
  - Drag on an event track title doesn't work, because the new FloatingInput
    doesn't realize that a drag has started.
    . Explicitly sending it FL_PUSH doesn't seem to work, but maybe
      something similar could?
  - It gets a few extra focus/unfocus pairs before show, why?
    . I hacked around with FloatingInput::ready.
  - Also, it seems resize on a window which is a child of another window
    goes into endless recursion.  What is a child window supposed to mean
    anyway?
  - Manually fiddling with track widths is annoying.  It seems like I could
    ask the UI about text extents to resize them automatically.
  - I never wound up using rank > 1, so presumably I could simplify things by
    calling it 'bool align_right' or something.
    . I'm using EventTrack::Align, but the haskell side is still sending
      ranks.
  - When multiple marks from different marklists are in the same place, their
    text collides.  The one from the first marklist should take precedence,
    as should its line.  This is visible when I add logical range markers.
  ? There's an extra axis of information in the width of the event body.  How
    could I use that?
  - add edit and windows menu to all apps
    There must be special OS X support for these
    Apparently not?  iTerms is defined in English.lproj/MainMenu.xib
    https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/WinPanel/Tasks/UsingWindowsMenu.html
    But it doesn't say how to add the Window menu.
  drawing artifacts on retina:
    . Some of this may be fltk bugs.
    - tops of tracks and the tops of track text boxes still get gunk, visible
      when scrolling horizontally
  - bug: There's a focus bug, but I'm not sure how to reproduce it.
    . The focus bug is still here.  Even clicking on the "unfocused" block
      doesn't fix it.  Don't all msgs contain focus?  What can I log after the
      fact to figure out what's going on?
    . Actually this makes me think it's actually in MsgCollector.
      In that case it would be Fl::focus() which is wrong.  Is there a way to
      just ask the OS what window has focus?
    . Cmd.state_debug_ui_msgs doesn't help because I have to take off focus to
      turn it on.  I would need a key stroke that does that.
  - I could set certain Symbols to stretch to the length of their event, this
    would yield a nicer looking score.  But it would mess up the bounds
    detection.
    + gmail: subject:(scaling text)
      But it's OSX only.
  - figure out how to have a minimal title bar in os x (win.border(0) removes
    it altogether)
    I can set something like kUtilityWindowClass in Fl_mac.cxx:Fl_X::make, but
    it doesn't get any kbd input
    . can I get fltk to omit the jellybean buttons on the window?
      . Yes, but requires hacking fltk.
      . Completely disables resizing.  Apparently this is hardcoded.
  incremental redraw / scrolling
    . I don't like the current situation of incremental redraw and scrolling.
      It's also buggy, i.e. one pixel difference between scroll and redraw.
      Get rid of damage and redraw everything every time.  Then I have to make
      it fast to fetch the data for one screenful.  What makes that slow
      currently?
    . Entirely turned it off, speed seems acceptable.
  Track
    - dividers can have separate color for upper part, for collapsable tracks
  + Disable application persistence for fltk apps:
    http://oleb.net/blog/2011/07/whats-new-for-developers-in-lion-part-1/
    http://developer.apple.com/library/mac/#documentation/General/Conceptual/MOSXAppProgrammingGuide/CoreAppDesign/CoreAppDesign.html#//apple_ref/doc/uid/TP40010543-CH3-SW26
    Can then re-enable ~/Library/Saved Application State.
    . Did the objc call, but doesn't seem to have any effect.

  control track, render signal
    - render option: solid with color gradient
    - combine multiple signals, e.g. one controls xpos, one controls color
      I could combine pitch and dyn.  This is appropriate for the note track.
      . I'm pretty sure OS X can do this, as can cairo, so I would need to
        figure out how to get direct access to that API.  I could get rid of
        the awful alpha_draw.cc hack while I'm at it.
      . Or perhaps I should just switch to OpenGL?

logview:
  - use Fl_Help_View and HTML to display text
  + Logview got some kind of file locked error, presumably trying to track
    a rotated log.
    . It happens if the write handle is still open, for some reason
      Posix.getFileStatus then gets openFile: resource busy (file is locked)
    . But I also got:
      . logview: ./log/seq.log: openFile: resource busy (file is locked)
      . Apparently not caused by log rotation.  Maybe if it checks for
        rotation at the same time a new line is written?
  - can I get the standard edit menu and copy/paste?
  - tabs are not lining up properly
  - option to wrap lines or not?
  - hide or display various attrs: date, file, function, ...

Ui:
  Track
    dense sampled signals
      . efficient storage, preferably as a Signal so no conversion is necessary
      . display dense signals: omit text and trigger lines when zoomed out

test: testing:
  - Write a test for Ui.Diff and Ui.Sync.
    . I think the easiest way to do this is make BlockCStub record its calls,
      then have a UI simulation that interprets those.  Then I can use
      quickcheck to verify a bunch of starting and ending states.  It would
      compare the incremental output against creating the visible UI from
      scratch.
    . It seems non-trivial... but maybe worth it, seeing how complicated
      diff and sync are.
    . If I make Fltk into a typeclass I could substitute a pure State version.
      But I still can't get rid of FltkStub, because the main point is to not
      link in C++.  So as long as I'm doing that anyway, maybe I don't even
      need a typeclass, but I still have to replace the PtrMap functions so
      I don't need MonadIO.
    . Except BlockC uses IO in PtrMap.modify... but that's in BlockC, which
      relies on Fltk (IO a).  BlockCStub wouldn't need that.  So unstubbed
      Fltk is in MonadIO, stubbed one isn't.
    . But how am I supposed to record calls to BlockC without reifying the API
      into a type?  And if I do that, I don't need to do this at all, just
      have Sync return that type.
    . I guess I'm not too worried that an intervening data type will hurt
      performance.  Mostly because just one more allocation is probably not a
      big deal, but also maybe if I inline the interpretation function then
      the allocation goes away.
  - delete build/test/tmp on every test run to avoid test contamination
    . test/run_tests will clear it out, but sometimes I run them directly
    . But this is pretty much limited to expecting a file in a certain
      place, which pretty much only Perform.Im.Convert does.  Tests that
      create tmp files should use Testing.unique_tmp_dir.
  complete quickcheck derive testing
    I switched back to Double for RealTime, but this means the roundoff errors
    are back.  Use quickcheck to repro them.
    + make a simple deriver that creates event and midi output skeletons
    - integrate quickcheck with generate_run_tests.py
    - assert that the reduced deriver output equals the simple deriver output
    - basic pitches: If the score was created with notes aligned to note
      starts, then every NoteOn should have the appropriate key, there should
      be no pitch bends, and "same note" should be the only reason for
      a channel split
    - basic controls: Given randomly placed control events, notes have the
      correct control curves.  Don't worry about times or midi.
    - slicing: Given some simple note transformers (tuple, place, ...),
      pitches and controls are still associated with the right notes as above.
      Don't worry about times, just that the right notes and the right
      controls.
    - block call property: a couple levels of nesting for block calls, notes
      still have the expected pitches and controls as above
    - inversion: as 'basic pitches' and 'basic controls', but controls are
      below the note tracks, results should be the same
    - stack: generate nested events, check that stack is as expected
  - count number of tests in addition to checks within each test

midi record:
  - implement
  . Ideas for editing recorded MIDI:
    . control: realign attacks, smooth or sharpen attacks.
    . pitch: retune intervals, fix wrong note or add notes, change portamento
      speed.  Add, widen, or narrow vibrato.

REPL: repl:
  - It would still be useful to save a single unified history.  Then use
    something like :h to search it.
  - It's easy to leave vi open on a ky file and change scores.  Maybe it could
    send the score name, and reject if it's changed.
  - Now that save file is a poll instead of being pushed, it takes a return
    to notice a change.  Can I restore the notification thing?  Or maybe it's
    enough to make sure I write the history to the new name?
  - I don't really use ReplStub, can I get rid of the awkward #ifdef then?
  - only write history when the cmd succeeded
  - command to open the haddock for a module
  - is Cmd.Lang.Fast now obsolete?
  - can I get local variable bindings (let x = ...; y <- ...) to work in the
    REPL?
  - :compile cmd that turns on compilation for everything except Environ
  - :browse to look in modules... can I use GHC.getBindings for this?
  - :module cmd to move evaluation context to a certain module, maybe I
    could also get rid of the need for Cmd.Lang.Environ to import everything.

Cmd:
  Repl:
    - LNote.sort_on_pitch is still not right.
      . With multiple chords I get stacked up extra tracks.
      . Turns out this seems really complicated.  Do I really care that much?
  - Paste between blocks with different track layout is awkward.  Can I have
    a note-oriented paste that reuses or creates the track structure?
  - ModifyNotes doesn't seem to understand about parent note tracks.
  - Interpret a midi file with keyswitches back to the attrs.
    . This is so I can load VSL examples and learn from them.
    . Should it be a score transformation, or start from the parsed MIDI?
    . MIDI seems easier because it's already in a linear format, while for
      the score I'd have to interpret it into one.
    . But then I need to pass the instrument mapping to Midi.load.
    . Maybe not really worth it?  For learning I can load in reaper and just
      watch the VSL UI.
    . But still worth keeping existing work, because I'll need something like
      that for MIDI record.
  - Figure out exactly what bad things could happen because of the
    Ui.fltk_event_loop race.  Also figure out what kind of cancelling I'd need
    to fix them.
  + Write a fancy tile like ViewConfig.horizontal_tile but guesses if you mean
    to tile vertically.
  - Create tempo by "stretching", i.e. select start and end, and create tempo
    mark that will cause the start point to be played where the end point used
    to be played.
  - give Cmd.ModifyEvents.Track the ability to change the track title?
    Cmd.Repl.LPitch.change_scale and to_relative could use this.
  meter / timestep
    - timestep 64*2 skips two 's', because 's' is the minimum match
      skip should be ignored when the match is a larger rank than exists, or
      maybe step should fail.

  ruler:
    - meter type and the construction functions should be integrated more
      tightly
    - LRuler.inject, opposite of extract, replaces sub-block rulers
  Cmd.Edit
    - Make Edit.cmd_invert_orientation set orientation based on the first
      selected event, so I can easily set all to the same.
    - alternate finale-like note entry: hold down step key to set step and
      turn on edit mode, but only while the key is down
      (merge will clip them to the next event)
  copy / paste / Clip
    - clip block should use the ruler, just to make it easier to look at
    - clip could also copy over the skeleton
      It could use it to make sure the paste is compatible, but that might
      be more of an annoyance than a convenience.

  Undo:
    - shift [ and ] undo and redo zooms.  or one key to toggle last zoom?
      . record view changes, at least zoom / scroll so it can be undone
        and redone separately
    - Suppressed undo for val edit is surprising since I tend to do a lot of
      edits without leaving val edit.  Maybe don't do it for pitch val edit.
      Try going back to using the name to suppress, but ignore cmds with no
      name.
    - Add a "revert within selection" that searches backward for the last
      change within the selection.
    - Along those lines, should each block have its own independent history?
      This is supported naturally by the git layout since each block has its own
      file.  Wait, actually it's track, and that would be awkward if I undo one
      block and it changes tracks on another.  How do a say what position
      a block is in the history in that case?
      . One appealing thing is that I don't necessarily want things like config
        changes to be included in undo.
    - Visual display of undo history, because stepping back one-by-one is
      a bit of a hassle.

Derive:
  - A block with logical range called at time 0 gets messed up.
  - Add time offset to TimeVector
    . event_transformed_controls etc. are really annoying.  I can get rid of
      them by building the translation into Perform.Signal.
    . The downside is that every signal gets an offset, even though it's
      just for Score.Event ones, and their offset is all the same.  But still,
      what's another Double in signal full of them?
    . However, Warps also have it, so I could take that field out of the Warp.
    . I'd want to add an X offset to TimeVector.Boxed and Unboxed, but those
      are type aliases so they work with the Vector.Generic functions.
      So how can I resue Vector.Generic?
    . Presumably I could put my new types in the Generic.Vector class too, but
      that might actually be wrong since then they would ignore the offset.
      So maybe I just stop directly using the generic functions.
    . I also want to consider that I may want to have a TimeVector Val to
      replace the Environ.  So it would be nice to eliminate the duplication
      between PSignal and Signal.  Presumably I could do that by putting them
      in a 'class ToVector a where to_vector :: a -> TimeVector.Offset ?',
      then I can either re-export the shared ones directly, or specialize the
      type.
    . I could make an Offset wrapper and have all the TimeVector functions
      apply the offset.  But it seems like a lot of work for what is really
      just a way to fuse multiple translations for just Score.Events.  It's
      only worth it if I do multiple translations before unpacking.
    . I could put just the event controls into Offset, and require a translate
      to get the control out.  This would be like event_untransformed_controls
      except put it in the type.
  sekaran
    How to apply sekaran?
      . >hang -> sekar abab -> notes
      . I want to change the pattern, so the problem is how to set an env
        var for a range on one track?
      . I can add a 'sekar-pattern = abc', but I need to repeat it whenever
        there is a gap.
  fancier randomization
    . How much a note differs depends on its neighbors, so it's not an even
      distribution.  Use brownian noise, or a fractal subdivision scheme.  But
      it's also constrained in how far it can wander from the base value.
      Regardless, I think this means I need history, so it can't be
      a stateless control function.
    . Divide on instrument and hand, so each part gets its own individuality.
    - randomization should be centered on a value, with variance as a signal,
      so I can turn accuracy up or down.
    - Randomness could have some hysteresis, so I can e.g. reduce omit chance,
      but not get isolated notes.  At the extreme setting, it means it turns
      on in a slightly random spot, but stays on after that.
      . Is there a simpler way to get this effect?
  tracklang: TrackLang:
    - Keyword args.
      . A problem with environ defaulted args is that if I do e.g.
        'merge=add | a=b | block', then all of 'block' will have merge=add.
        There's no way to set it just for 'a=b'.  So they're not necessarily
        a great substitute for keyword args.  Also keyword args should
        complain if you give one it doesn't understand.
      . I think a=b syntax is available, but do I want to make a Val out of it?
        It would be resolved by Derive.Sig, and not actually make it to calls,
        but Quoted is like that too.
      . And realistically it seems really invasive to support a=b if it's not
        a Val.  But I wind up with weird things like a=b=c.
    generalize sub-event calls
      - Generalize sub-event calls so that they can also take block names.  This
        is just another way to write sub-tracks, perhaps more convenient if
        I want them to be independent.
      - Also generalize them so if I put it as a transformer in a track title,
        the track is treated like a sub-event call.  This way I can apply a
        transformation to the whole track without needing to wrap it with an
        event.  Paired with the Sub.modify_notes macro feature, I can have
        a track with its own little language, e.g. pakhawaj bols.
        . Could do this by making 'ctx_sub_tracks' available in the track title
          call.
        . I think there were calls in Prelude.Lily that would be interested in
          a more defined distinction between track and note level transformers.
      - Could also do a block-level thing.
    - Perhaps I should have a separation between "" as called by Util.note by
      other calls, and "" as called from the track.  The problem is that it
      applies Flags.can_cancel at TrackTime 0, which is only appropriate for
      a direct call from the track.  This is the reason for
      Gangsa.realize_notes.remove.
      . Flags.can_cancel is now obsolete, but maybe the issue still stands?
    - I was confused because I wrote '%just-base = (nn (c3))' instead of
      '%just-base = (hz (nn c3))'.  Can I use type tags to catch that sort of
      thing?
      . Hz doesn't have its own type, so it winds up being Untyped.  But any
        type can coerce to Untyped, so it can't complain if you passed NN.
        I could make Typecheck Double require Untyped, but that would break all
        the stuff that doesn't care about types.
      . Ultimately, this is because pitches take a PitchConfig, which takes
        ControlValMap, which is untyped.  I started a branch making it typed,
        but eventually lost interest since it seemed overly complicated.
    - Rethink if I really want track event calls in TrackTime, rather than
      normalized time.
      . Implementing c_sequence I was confused how stretch was applied twice,
        since Eval.eval_quoted doesn't normalize the event duration.  Same
        problem is in Gamakam2.  It's error prone that you can place the note
        via both Derive.place and via the Derive.info_event.
      . On the other hand, working in TrackTime is convenient, e.g. in gangsa
        norot I can place notes based on the passed-in dur.  If it were
        normalized, I'd have to unwarp back to TrackTime... can I even do that?
      . Details are also in "Derive.EvalTrack".
      . Adding the repeat call was unintuitive because deriver placement is
        unintuitive.
        . Ideally I could just say (0, 2), (2, 2) and it would work.
          Instead, I get (0, 8) and (2, 8)
          This is because the block isn't normalized, so stretch by 2 makes it
          4, then the stretch by 2 for the event goes to 8.
        . This is so that just 'deriver' by itself gets it right.  If I instead
          made deriver always normalized, then the above would work, but
          I would have to do 'Derive.place (Args.start args) (Args.duration
          args) deriver' to avoid it always showing up at 0-1.  And actually,
          I couldn't do that from a transformer, because what about the next
          transformer?  I should instead have each transformer be in
          normalized time.  'repeat' becomes
            [Derive.place start (1/times) | start <- Seq.range_ 0 (1/times)]
        . For blocks, it's actually almost that, except I have to translate
          back by the start time first.  This is because blocks are already
          normalized to the event duration.  I think?
    Typecheck coerces to TypedFunction as a common signal type
      - It turns out this is not so useful because a default TypedFunction
        doesn't have a default control name like a Sig.typed_control does.
        The documentation is also worse.  The way to fix this would be to
        let the default be any coercible type.  But to do that and be type safe
        I'd want a separate class for pairs of types that can definitely be
        converted.
        . Possibly a way around is to include ControlFunction in ControlRef...
          but why do I want so much to pass control functions?  Especially since
          I can already pass a concrete signal as a ControlSignal.
    . It would be nice to be able to have an arg default to ControlRef and
      have typecheck coerce to scalar via Call.control_at.  But once again the
      problem is that I can't coerce to a type different from the default.
    - if I had a boolean type, I could generalize calls in Conditional:
      . when-e key -> when (env key)
        when-e key val -> when (= (env key) val)
      . when-c 1 cont -> when (= %cont 1)
      . if-c< cont 1 a b -> cond (< %cont 1) a b
      . However, they get more wordy, so maybe I don't want it.  E.g. for
        cond I'd actually want a 'switch %cont' and then I need either
        partially applied functions, or just write 'switch<'.
    - replace VAttributes with a general purpose VSet.
      . No users though?
    - there should be a character that triggers a parse failure, which is used
      by invalid ShowVal instances like ShowVal Pitch
    - it's confusing how some calls expect env vals like 'x = 1' and some
      expect controls like '%x = 1'.
      . The obvious way to solve this would be to merge env vals and controls,
        but that's a big change.
    - Track caching is too fragile, if I add a track with scope over everything
      then I get no caching.  Instead I should cache the bottom note track, or
      perhaps every note track.  But that doesn't work because they're all
      sliced up.
  Derive.Sig:
    - Support pairs, e.g. a list of pairs of arguments.
      . many_pairs :: (Typecheck a, Typecheck b) => Text -> Parser [(a, b)]
      . Can I generalize to triplets etc. without a separate function for
        each?  Also, could I reuse many / many1?
      . Can I have a Typecheck instance for (,)?  No, becaues it comes from
        a single Val.
      . I would have to turn Sig into a real parser.
    - Try writing a new Typecheck / Sig which is a real parser.  It can have
      backtracking and nested parsers.
    - if I add an Alternative instance to Sig.Parser I can write arg parsers
      like 'Sig.many xs <|> Sig.many ys'.  I think.  If I wind up with something
      else like Derive.Call.Val.num_or_pitch it would be worth trying out.
      . E.g. Conditional.c_if_c takes: Symbol (Number, Quoted)* Quoted
      . Implement empty as pure (), then (<|>) should try left and if it fails,
        try right.  Doc is (x | y).  'some' and 'many' are like Sig.many1 and
        Sig.many, except they have to backtrack.
      . But derivation may evaluate expressions and check the type after that.
        Do I really want to do that with backtracking?
  postproc
    performance details / humanization
      - irregularize runs based on fingering patterns, e.g. groups of 3
    - retune a note depending on the previous interval (e.g. sloppy pitches
      when playing quickly)

  tempo track:
    - Nested tempo tracks at the toplevel block should normalize like they do
      when called.
    - Nested tempo tracks are probably broken for hybrid and absolute tempo.
    - Nested tempo tracks are probably also broken with a logical start.
  note calls:
    - retune call: differences based on speed should be more obvious, so that
      should also be on a curve.
    + chord calls, with automatic dyns for the notes.
      Originally I intended each note to go in its own track, with the idea
      that it takes about the same space but is more powerful and flexible.
      But it's not quite true, because the extra track is there for the whole
      block, though perhaps that's a side-effect of having blocks which are
      too large.  More compellingly, chords can automatically fiddle with dyn
      and start time, and can also interpret chord symbols.
    mridangam:
      - Automatic inference for Ki vs. Mi, e.g. in sarvalaghu.  E.g.
        dxd -> dld, but dxpx -> dkpk.  Also it can change based on speed and
        emphasis.
      - connect kendang, reyong, etc. to 'tir' and 'seq' calls.
      - make india.mridangam seq call align to the end for -0 dur
      . It would be nice to alternate mridangam and kendang tirmanam, e.g.:
        mridangam, kendang, both.  But I'd need to either write the tirmanam
        in solkattu dsl and give it a name, or have a mini solkattu dsl, e.g.
        with syllable breaking:
        . tri-mk 'kitakitataka nakadit_ talang_ talang_ ta' lang_
      . I'd have to have a standard stroke map, but I'm not sure how well that
        would work in practice.
      . reyong: takadinna -> cccc, nakadit -> i12, talang -> +O
        . c = cek, k = kempyung, 0123 -> relative scale degree, .+ -> byut,
          oO -> byong
        . I could also have shift up, shift down annotations, like speed or
          nadai.
      - Perhaps mridangam should automatically transpose the octave to be within
        its range.
        . I can use something like Cmd.Instrument.Bali.wrap
      - tha is too loud... I can compensate by using -, but maybe the scale is
        off.  Velocity should be logical, so if you play all at the same
        velocity it's like the same dynamic for all strokes.
        . Or I could make + be 0.5, and * be full volume.
      * perhaps only pitched notes should change with the tuning?
      sarvalaghu
        - get them from Score or MridangamScore.
        - adjust to the talam
        - subdivide at slower speeds
    solkattu:
      - If I make tri_ put a special tag on the middle karvai, then I can
        more easily do the (p6.u . p6.i . p6) pattern.  I'd want a name, not
        a number.
      . Solkattu2017.c_17_07_13 is showing the difficulty of the
        (solkattu, stroke_map) approach, because there are too many meanings
        for taka and din.  Really if it's meant to be useful for different
        realizations, I should emphasize the reusable phrases, so I should
        try to figure out ways to make that easier.  For instance,
        understanding about reduction is good for that.
        . To an extent, it's acceptable that it's harder than just writing
          the strokes, because I'm trying to find a more general
          representation.
        . Still, I could make it easier with tools:
          - Lint to show unmatched stroke sequences.
          - Diff to compare realizations before and after I change the
            stroke map.
            . How can I keep them both around?  If I do it at the haskell
              level, I have to copy the stroke map, and then have multiple
              stroke maps for the same instrument, and then diff between
              them.  This might be useful in general to highlight different
              players style.
            . If I do it at the ghci level, I'd have to somehow stash the
              previous previous Korvai or realize output someplace that
              survives a reload, like write a file.  Then add a function to
              do a text diff with the file contents.
      - Final notes should be cancellable, so e.g. tri will cancel for the
        first two.
        . E.g. tri (taka.tam.__) is ok when it's at the end, but when I nest
          it: tri (tri (taka.tam.__)) I need to rewrite as
          tri (tri_ (tam.__) taka)
        . Actually, don't I already have the karvai mechanism for this?
          What if I do tri (taka. karvai tam.__)?
        . Not quite, I'd have to do 'tri_ __ (taka . karvai tam)
        . The problem is I don't really have a well defined notion of when
          cancelling is ok.
        . Or maybe it's better to use tri_ after all?  Are there cases where
          either I can't express with tri_, or it's really awkward?
      - Some strokes change realization based on the tempo, e.g. 'od' when
        slow to 'o' when fast.  I could add a stroke attribute for that, or
        I could try to do a global instrument realization heuristic.
        . Not just individual strokes, but a whole section can change, e.g.
          okookook -> nakatiku.  This implies just a realization heuristic
          won't be enough, though maybe I want it anyway for things like
          dynamics.
      * Maybe I don't need (!) anymore now that I have (^).  It would
        simplify things to get rid of it, because I don't need to have
        a polymorphic Seq anymore, and I can get rid of the stroke variable
        in Solkattu.
        . Keeping the strokes separate emphasizes instrument independence,
          but on the other hand, numbers are harder to read than strokes.
        . Wait, except MridangamScore uses it.
        . What if I generalize on _sollu instead of _stroke?
        . Wait, didn't I already try this and it didn't work out?
          It broke cancel_karvai... but I don't see how.  Maybe this was
          before I split off into Solkattu.NoteT?
        . Try again.
        . If Korvai takes only Sollus, it can't store a sequence with
          Mridangam.Strokes.  Can I make Korvai polymorphic on sollu?
        . Probably, but then I can't put them in the same db.  Since other
          instrument realizations are dynamically typed, making
          mridangam-only statically different doesn't seem to be a benefit.
        It seems to be really hard to incorporate MridangamScore.
          . Write separate realizes and then try to merge them.
        * Get the tests to compile.
        * Restore tags.
        * Infer Korvai.mridangam vs. mridangam_strokes so I don't have to
          pick the right one from LSol.
          . This seems to be really hard.  I want to say if
            sollu ~ Realize.Stroke stroke, then use realize_stroke, else
            realize_sollu.  I think typeclasses can do it, but there has
            to be a Maybe in there, because not every (sollu, stroke) pair
            is occupied.
      - Can I put StrokeMap and Patterns together?  Then I can put standard
        strokes along with the stroke map, and override them together.
      - ensure that later entries in the StrokeMap override earlier ones
      - have a mode to warn about unused StrokeMap entries, and overidden
        ones
      - LSol.insert_* doesn't clear and replace existing notes
      * LSol.insert_* at non-zero start puts durations on all notes
      - I want to be able to insert all parts of a korvai in sequence.
        . If I make LSol.insert take [Korvai] then I can use take etc.
        . But it's easier if I get rid of multiple sequences per Korvai.
        . Or keep multiple sequences but take [Index].
      - insert for patterns is messed up, I get p '5' with 0 dur.
        . '5' is because I use Expr Text, and it uses ShowVal, which loses
          the type, so everything becomes a Str.
        . It's Text because I want to avoid relying on Val.
        . Which in turn is because I wanted to emit expressions like (4d)
          and have it be evaluated.
        . But I can do that, just skip parsing, right?  Maybe a Expr MiniVal
          instead of Expr Text.
        . Can I use RestrictedEnviron.Val?
        . Not directly, because of circular imports via RestrictedEnviron ->
          BaseTypes -> Expr.
        . But maybe I could move Val to Expr.MiniVal?
          . VNum !ScoreTypes.TypedVal
          . | VAttributes !Attrs.Attributes
          . | VControlRef !BaseTypes.ControlRef
            if I move Ref ControlRef to ScoreTypes.
          . | VNotePitch !Pitch.Pitch
          . | VStr !Expr.Str
          . | VQuoted !Expr
          . | VList ![Val]
        . See NOTE [val-and-minival]
      - Use a typeclass for format-conversion, instead of Pretty.
      * Use underline for tha+x instead of ad-hoc letters.
      transcribe:
        * from 2013-11-19
        - from 2013-02-20, tisram
      sarvalaghu:
        . Fill it in based on position in the tala.
        . Sometimes there's a final note, e.g. D that replaces the first 1.5
          aksharas.  I don't have a way to notate it.  Maybe a sequence
          needs a separate final stroke, which is played when leading back
          to sarva.
        - Sarva fill === gets some spaces in there.
      * Realize.thin_rests doesn't work when there are multiple characters
        per matra, because it gets __.
      . sarvalaghu substitution: this could be a variable-length pattern,
        e.g. sarva------->, which can be substituted with whatever
        sarvalaghu.
        . Then I need annotations to align to end points, like 'pad'.
        . Or use replaceEnd?  But I would want to be able to split rests,
          so maybe extend replaceEnd to do that.
        . So sarva should split like rests.
        * First implement pad for rests.
          . One way:
            rest (4*4) `replaceEnd` theme . rest (4*4) `replaceEnd` theme
          . Another way:
            endAt 4 __ theme . endAt 8 __ theme
          . #1 requires me to calculate the duration manually, is
            dependent on tempo, and replaceEnd needs to split rests.
          . #2 is higher level, but requires some special support for
            alignment.
        / Add absolute SetSpeed, otherwise restD and __sam can't work under
          a tempo change.
          . Couldn't I use this to make all the *D functions work in
            absolute Durations?
          . I think my problem is also that duration_of is wrong under su.
          . Can I make current tempo available somehow?  Then I could make
            duration_of work absolutely.
          . But then, I'd only need this for absolute time things, which is
            just align, at least for now.  So maybe it's just simpler insist
            that align only works at the top level.
        . Could I make this simpler by tagging some notes with explicit
          durations, and only inferring duration for the untagged ones?
          . I think I still have the same problem with not knowing the
            duration of subsequences.
        * Add a flag to Rest that makes it Sarvalaghu.
      ? Some patterns are end-weighted, e.g. thom in sarvalaghu.
        . I can just add a rest to the beginning, but I still need to
          take duration from the previous note, e.g.
            d.d.n.n . su (n.d) .d.n.n
          should be ' d d n nnd d n n'
      * Split Dsl.Score up by year, to keep modules small and so the
        line_numbers don't keep changing.
      * 'pad' should be able to align a tirmanam to sam
        . Since it's used at the top level I can assume speed 0, but I still
          don't know the tala or nadai.
        . Maybe I can attach a flag to the Sequence, which triggers a
          align step before verify_alignment.
        . Or maybe it's a flag on Align.
      * Allow korvais to include the final note on sam, since it's sometimes
        more natural to express, e.g. tri_ (su kitataka) (tat.din) instead of
        tri_ (din . su kitataka) tat.  Ignore trailing rests, so
        tri_ (tat.din.__) (su kitataka) works.
        . It's not so simple because I can't just strip trailing rests,
          because I still want to verify the last rest if it's not part of
          a final note.  I can't tell the difference without an annotation.
        . I can check the last non-rest for at sam, or final state is sam.
        * Make format display final stroke inline.
        * Suppress the extra ruler when that happens.
      ? rename tri to tir, for tirmanam?
      - 345 x 345 x 345 can be transformed to 345 x 345 x 3333, or generally
        any arithmetic progression.
      solkattu-group:
        . top level:
          reduceTo 2 1 taka
            -> Group (ta.ka) (DropL 1), Group (ta.ka) (DropL 0)
          data Group = Group Sequence Reduction
          data Reduction = Reduction Matra (DropL | DropR)
        . realize level:
          . Use the sollus for RealizeNote, but then drop the given number of
            matras.
          . Unlike bare sollus, the group can match exactly.  That raises the
            question, could I put everything in a group, and make all matches
            exact?  I would still be able to use chunks like takadinna.
          . If everything really has to be a group then I wind up with lots of
            noisy 'g' annotations on everything.
          . So let's keep the submatch and no-group sollus for now.
          . I can use Solkattu.Group [NoteT sollu] Reduction.  If I flatten with
            Solkattu.notes_of, this means nested groups are flattened.
          . If I want to make patterns into groups, then I probably do need
            nested groups, can't 'realize' recurse then?
        . format level:
          . Output is [(Tempo, Note stroke)], but I need some kind of marker for
            groups.  Maybe Note can have Group.  If nested is awkward to format,
            then I can flatten to Group Name Count, where Count says how many
            Notes it has scope over.

        * Refactor realize to use GetStroke instead of StrokeMap.
        - Add Solkattu.Group, and ensure Notation.reduce can generate it.
        - Get 'realize2' to recurse on nested groups.
        - I need Realize.drop_matras, like Notation.splitD... it's complicated.
          Can I get a simpler version just for Realize, or maybe just move
          splitD down.
        - Teach Realize.format to show groups as "name----".
        - Various Notation functions like 'spread' should work with groups.
        - Now a Pattern can be a group with a default StrokeMap entry, and some
          flag so Realize.format can show them un-expanded.

        old notes:
          . I should also mark group boundaries in the notation to make
            reductions visually apparent.
          . dropM and the like could be like single-element reductions, so
            I don't have to add an extra stroke map entry.
          - I want results of reductions or expansions to be recognized as
            Patterns for the purpose of variation.  So I think they have to have
            score representation, for this and for strokes.
          . If I have a generalized way to notate patterns as a duration
            plus a possible specific realization, I should be able to unify it
            with Pattern.  So p5 is just a 5 without sollus, but takadinna is
            a 4 with sollus.  I already have this actually, but I don't preserve
            the group boundaries.  So maybe I can have
            'Group Matras (Maybe (Reduction (Front|Back))) Sequence'
          . Reduce leads to fragmented sollu sequences, whose strokes then need
            to be enumerated.  It should be able to figure out the strokes as
            a suffix of an existing one, but I'd need to tag the sollu with
            the whole sequence with n dropped.  Realize would then match the
            whole sequence and drop the same number of matras.
            . Also maybe it can apply special reduction rules, e.g. if ktk is
              reduced to tk, it should be played kk.
            . Also maybe I can use this to use this to emphasize the starts of
              sections, though the reduce function could also put a tag on the
              first note.
          . Set patterns like Nakatiku and Taka don't behave with spread.
            They should be sollus like any other, but with a standard
            realization.
      - Ornaments to fill in karvai, e.g. with taka and takatiku
      - Alternate karvai stroke for middle karvai variation.
      - Mark for variations, e.g. mark a 'tri_ x 345' for 345.x.345.x.3333.
        end4 (tri_ x (p6, tk.p6, tknk.p6)) -> can play final as p6.p6.p6.p6
        . Variation markers put a branch in the realization, so now I have
          multiple realizations, and I need some way to not just enumerate
          them, but choose a certain path.
        . This is also part of the intensity pattern, where the final repeat
          may have an alternate more intense realization.
      - Different tags for patterns within a Korvai, e.g. for performance
        and exercise variants.
        . Also useful to mark the sections, e.g. development, and related
          sequences.  Ideally I could have separate stroke maps, but maybe
          that's overkill.
      - I should be able to add multiple realizations of the same
        instrument, keyed by string, e.g. for different mridangists
        realizations.
      - Duration assertions, e.g. dur 4 (ta.ka.din.na)
      reyong realization:
        - some way to select between melodic and rythmic realization, and
          transposition for melodic
          . This could be the same as the emphasis mechanism, if I extend
            it to attach Attributes.
          . Or if I have alternate StrokeMaps by name, then I can use that.
      - Emphasis or automatic variant versions of patterns, e.g.
        . kt_kno -> ki_kno.  k_t_kno -> i_i_kno, i _ i _ ktkto _,
          pu_ pu_ ktkto
        . The emphasis note can be i, or pu, or maybe u, or p+u (play like
          kre on pakhawaj).
      - Mridangam patterns can vary by intensity in addition to duration and
        family. How can I represent and realize that?  E.g. the final of
        a group of three can be higher intensity.
        . It can also be a variant pattern, e.g.
          k_kto k_k_kto k_t_k_kto -> repeat 4 k_kto
      - format: if the ruler changes after an avartanam line break, show the
        partial ruler, e.g. Realize_test.test_format_nadai_change
      - I could have an 'elide' annotation.  It deletes the previous notes
        so far as they match the next ones.
        . E.g. tri_ (din.__) p7 . elide . p7.p6.p5
          or: tri_ (din.__3) (ta.__3.ta.ta.ka.din.na)
            . elide . tri_ (din.__2) (ta.ta.ka.din.na.din)
        . To keep if from eliding large repeats, it should stop at the
          shortest match.  But then if it happens to end and start with the
          same sollu it will just drop that single sollu.
      - Notation {take,drop}M functions get matras via duration_of and
        divide, while matras_of counts matras directly.  I'm not totally
        sure what the difference is and which one is correct.
        . With division I can get matras even if nadai changes but it winds
          up being integral.  So nadai 4 -> 8 would be equivalent to a speed
          change, which is good.  But 4 -> 6 will also be valid matras if
          I have a multiple of 3.
      - replacements, e.g. ta.ki.ta -> nang.__ . faster (ki.ta.ta.ka)
        . use this in koraippu_janahan
      / I think I need an absolute SetSpeed, so I can pad a number of
        aksharas, regardless of the speed.
        . I also need it to rest by Duration, or to turn that into matras.
        . At the score level it's most convenient to work with sollu-matras.
          These are relative to nadai, but that's actually good.  With speed
          changes I can get fractional matras, and operations can actually
          work as long as the speeds line up and I don't have to drop
          half of a sollu.
        . However, for things like 'align', I need to know that tala and
          nadai, so I can emit a certain number of aksharas.
        . Actually since align is used at the top level, I can assume s0.
      / speed changes mess up the ruler, e.g.  Score.c_17_04_04 in misra
        . Not any more.  Maybe I just had things messed up?
      - extend Karvai to take a minimum number of Rests before it applies.
        Default to 2, but a chapu might require 3.
      - Apply common variation patterns.
          transformations:
            . karvai u u u -> u i u
            . X X X -> gap X, gap-1 kpX, gap-2 kpnpX
            . X X X -> gap X, gap-2 oktpX, gap-4 ktktoktpX
            . alternate realization for 3rd repeat: 345 345 3333
            . __3 -> __2.p or __2.o if o follows
            . variation for a phrase prefix, usually on its repeat:
              k_k -> kpk, or k_p -> kpt
            . stroke substitution in a transformation, e.g. reduce or expand:
              pk -> kk, e.g. k_kto, k_k_kto, k_t_k_kto.
          . If I can apply them as a postproc, then I can get even random
            variations.
          . Or maybe I should write them explicitly, but make them easier to
            write?
      - I use Pretty for format, which is awkward for Realize.Stroke, since
        I can tolerate some ambiguity for the same of a single letter width,
        but Pretty shouldn't have such a restriction.  Add Format class?
        But it still returns Text instead of Char since patterns have two
        characters.
      - This turns into a general way to represent unparsed expressions.
        . Text shouldn't have ShowVal, it should be Symbol, and then CallId
          should have a separate type, its ShowVal doesn't need quotes,
          unless there is a space.
        . Then Unparsed represents parseable text, so actually ShowVal
          should return that.  Is it worth having a separate type over using
          Text, though?
        . I should be able to parse Expr Unparsed without the intervening
          ShowVal by directly parsing the Unparsed vals.
      - Higher level variation, e.g. 666 666 666 -> 555 666 777 or even
        777 777 777 -> 567 876 789.  Actually the latter seems not so
        interesting.
      - Implement PatternFamilies so I can have 6 8 6 7 6 5, or even just
        distinct realizations within a single korvai.
      - Repeat oriented variation, e.g. 3 5 33 5 333 -> 333 5 33 5 3
      - Should I change mridangam notes to be consistent with Solkattu.Dsl?
        I have to put thoppi on the left, for 'od' instead of the keyword
        'do'.  And I have to change tha to p instead of +.
      . Performance rules for variations, e.g. tk can be played kk.
      . Conditional derivation that depends on position in the tala, e.g.
        thali / khali.
      alternate realization
        * sargam, for pitched notes
          . Or I could just use text, and emit it directly.  But maybe
            pitches are useful because I can transpose sequences, e.g.
            each pattern with a different transposition.
          . But I'd want a general purpose way to apply a transform so I
            can put e.g. +mute, and if I can do that then I can put
            transpose on.
          . Also I have to know to put pitches in the pitch track.  I could
            have Note { start, dur, pitch, controls }.
          . N { start, dur :: TrackTime, transforms :: Map Text (Maybe Text) }
            {"*": ..., "+mute": ""}
        - kendang pasangan
        - kajar
        - gangsa
      ? Crazy idea: it might be nice to use underline or double underline
        for faster.  Is there a way I could get the editor to display
        special brackets as underline, and then turn those special brackets
        into a 'faster' call?  I think if I'm doing this, I definitely need
        a preprocessor, though if I keep basic haskell syntax and define it
        as a translation to haskell, then I can keep all the usual features.
        . Alternately, use syntax highlighting.  Sufficiently fancy
          highlighting could highlight 'faster (...)'.  I don't think ascii
          can do double underlines, though it could do italic+underline or
          something.
        . I could also try to automatically align by time.  I imagine
          a sufficiently advanced vim macro could do that, e.g. bind ^tab to
          annotate the current expression with line info, evaluate it, and
          align the current line, or try to move the cursor to the next
          beat.  Maybe not worth it though, since the whole idea of the dsl
          is that time can be abstract.
    pakhawaj bols
      . Score integrate to convert bols to low level calls
        . Actually score integrate doesn't work like that, it just copies the
          input.  It would have to be derive integration.
      . Or maybe just interpret the bols directly, but due to context
        sensitivity they need to be all processed together, not as separate
        calls.
        . In general I don't have a way to interpret a track as a whole.  This
          is the "track call" thing I was thinking about a long time ago.
      - Add an input mode for bols.
    bali:
      * gangsa should not damp repeated notes at the same pitch
        . Same with ' on the same pitch.
        . Same for reyong.
        . The UseFinalNoteOff flag should fix this.
      * abstract kajar parts, and gong cycles
        . k oo+o "(ts e) --> cycle o o + o, giving (ts e) to each.
          Short for k (list o o '+' o)
        . If it's a negative duration, align to the end.
      - kajar: automatic hand muting as with reyong.
      + add additional legong and wayang tunings.  Probably 'tuning' would be
        the most appropriate, but it's already using for umbang/isep.  Maybe
        saih=umbang/isep?  Or keep tuning the same and use laras?  Kelamin
        would be cheeky but only appropriate to kendang and not even Balinese.
      legong scale:
        - add isep to *legong
        - pick better nns for pemero notes 4 and 7
        - dotted cipher notation should use 4 and 7 instead of 3# and 6#.
      kotekan: gangsa:
        - >gangsa instrument, which is pemade + kantilan
          . It can be a alias of `multiple`:
            gangsa = multiple "(inst=pemade) "(%t-oct=1 | inst=kantilan)
        - nyog polos first can be inferred based on whether it's a major ruler
          division.  But should I?  I can just write 's+' to be explicit.
        - Simplify reyong norot in the same way as gangsa norot.  I also
          want to add the prepare_start feature.
          - Can I remove Once now?
        Kotekan kernel notation can be hard to use:
          . The kotekan call can be hard to use for irregular sections like:
            . |       |       |
               3-23-3-23-23-23-5
              2-12-2-12-12-1234-34-4-3
              |       |       |
              -3-23-3-23-23-21-
              2-12-2-12-12-1-10
              |
            . 4-3-4-3-44
              12-212-211
          . Maybe just a literal "once" kotekan call?
            Start at 0.
          . Maybe it's not "once" but "normal alignment", so maybe I can unify
            this with orientation.  But I think I need an explicit Positive
            orientation call like 'ko', rather than using event orientation.
          . For end orientation I still want to align to the end, but can I
            do that just by rotating the kernel?
          . I could say rotate or not based on the leading 'k'.
            (1)-12-1-21
          . Actually, maybe rotation isn't the problem.  Instead I have places
            where the inference rules don't work because the pitch is moving:
                 3-23-21
              (2)-12-1-10
            . Can I infer?  (2)-12-1-10  -> ... not sure
            . Or write both? ke '-12-1-10' '3-23-21-'
            . I can, but it still takes longer than just writing it out.  And
              if it's not pitch-independent, there's not much benefit to the
              specialized kotekan notation.
        - k '-21-21-21-21-12-' infers with 1 below the pitch.  It should be
          . 43-43-43-43-434- 3-43-43-43-434-3
            1-21-21-21-21-12 -12-12-12-12-1-21

                            56-56-56-56-565-2
            2-32-32-32-32-23 23-23-23-23-2-32
          . Write as:
             -21-21-21-21-12- 12-12-12-12-1-21
          . Maybe it would be more predictable to say that 1 is always the
            pitch.  Then I can know if sangsih is above or below by looking at
            pitches.
            . 2-32-32-32-3232- 32-32-32-32-323-
              21-21-21-21-2-21 6-16-16-16-16-612
          . I can get it work, but it takes a lot of thinking.
        - Maybe have a character extend previous note.
        - Another option is to write the polos notes directly, and then
          a parent call that infers sangsih.  This avoids the problem where
          I have to figure out how many little numbers.
          . But if I'm going to do that, why not just use +p, +s, and +k to
            write the whole thing explicitly?
          . Well, that's quite a bit more fiddly.
        - in norot -> nyog transition, the last norot note cancels the first
          nyog note.
          . sangsih 6i cancels out the explicit 5e
          . Since {final} cancels normal notes, this is working as intended, and
            I can fix with final=f or 'strong', but it's surprising.  Maybe
            I should only have a final for negative events?
        - make gangsa and reyong norot and noltol dispatch to 'm' instead of
          directly applying +mute.  Or should I have a call for a weak note, and
          leave 'm' for an explicitly muted note?
        - gangsa zero dur mutes too loud
          . Really I need loose and tight mute, but I'll have to do my own
            samples, or maybe add a loose mute as open with just envelope.
        - noltol puts a mute stroke after a final note.
          . It's becasue it has a lower threshold, but not an upper one.
            But really it's not the threshold, but the form, noltol should be
            during kotekan.  So maybe I should really build this into kotekan
            calls.
        - clip should be end-weighted.  If I used a negative duration I could
          make it based on that...
          . Wait, isn't that what Clip is?
        - generate all possible kernels following some playability rules,
          e.g. no more than 2 notes in a row, only one rest
          . I could then use that to automatically select a pattern for
            a given destination, with some constraints like playability from
            the previous pattern (no fast jumps), above vs. below, telu vs.
            empat.
          . Then do that to make a random kotekan for ngubeng and majalan.
        - in Gangsa.realize_kotekan_pattern, pass Nothing as the start to not
          limit the start
        - inst postproc can interpret +mute as either just a mute, or open, or
          in between depending on %mute.
          . Then I don't need a configurable mute for
            Gangsa.gangsa_norot_arrival.
          . Reapply the 'm' call instead, and override that as appropriate.
        - an optional special pattern which switching between kotekan and back,
          e.g. 112-2-2-
      wayang in octaves
        . pemade: >p=>p-umbang | >s=>p-isep
          kantilan: >p=>k-umbang | >s=>k-isep | %t-diatonic=5
        . I could do it with >wayang-both that emits >wayang-p and >wayang-k. Or
          just call the score twice, once with transpose +1 oct.
        . I definitely want two calls because then kantilan randomizes
          differently.
        . Or I could create the kantilan as a integration of the pemade, so it
          can still be modified. I think this would want a "score integration"
          which just copies and merges the events directly, and doesn't do
          the intermediate derivation.
        . I could add inst aliases, e.g. >umbang = >p-umbang, etc.
          Or a note-track call: '>umbang = "(>p-umbang)'
          This can't be done with call aliasing because it's actually
          'note-title >inst', and anyway wouldn't help with 'inst = >x'.
        . The intended way to do this is have > instrument, and then set it in
          the caller.  But then you can't put >1 inst on the same block.
        . But this way doesn't work if I want differences in the kantilan
          version.  I would have to do correspondingly more copy and paste to
          replace the bit I want to change.
        . Ideally I'd like something like integration: everything is
          duplicated with no extra work, but an integration is available to
          edit.  But it would be a kind of "deep integration", where
          I duplicate the entire structure, from score on down.  Score
          integration could theoretically do that.
      trompong: reyong:
        - octaves shouldn't be able to infer damping
          . E.g. (6e 6o 6o, 5e - 5o)
        - trompong: I need a better way to notate a section as lower octave.
          vv doesn't work is a note parent.
        - Damp level is way too high, I have to put %damp=.2 everywhere.
        - remove kilit, isn't it just norot now?
        * A %damp of 0x01 is still counted as 0 due to 7-bit MIDI.  I have to
          have at least 0x02, but this seems like exposing details.
          . One way is to have a postproc ensure ==0 or >=1/127.
          . Or I could do the min thing in the performer for all MIDI.
          . Or maybe this "pick a low number" thing is no good.  I could
            have another control to turn off damping.
            . The sustain pedal, cc64, is a natural choice.
            . But CCs are global, so no good.
        - for infer-damp, also infer damp level
          . Damp gets louder when notes are closer, or faster.
          . Also longer note is a quieter damp, or just say if the length is
            over a threshold don't damp at all.
        - How to configure open and closed damping?  I can currently do it
          by adding +open, but that might be too broad because it also applies
          to +cek.  Or I could always damp closed if that sounds good.
          Or I could infer it based on speed.  Otherwise, I can change the
          attr to +loose-mute or +tight-mute to explicitly configure.
        - split to ngembat
          . There are several ngembat variations:
            . fast:
              5 61    35 61
                 1        1
            . slow:
              561   53561
               21      21
        - kbd entry for /, X, O, + etc.?
        kilitan: norot:
          . How to do norot for real?
            . Each voice is semi-independent, and may have different
              preparation patterns and times.  But then sometimes they
              coordinate.
            . Variations are random, but frequency is controlled by
              "kewayahan".
          variants:
            - controlled by variant control
            - omit notes
            - hardcoded variants, e.g. p1 on dong
            - Delayed note, e.g. on ding, oiioioi
            - Pickup can be iioi style, but parts that don't have the pitch
              often play the normal kilitan, or a passing tone.
          above speed threshold:
            - omit notes
            - Entirely different fast patterns.
          - Also I want to be able to control the dyn.  There should be
            a single control for +mute dyn.  Actually I already have that
            if I multiply %damp, right?  Still, explicit +mute notes and
            kilitan +mute notes are stronger than damping, so I need two
            I think.  Damping should default to a fraction of +mute dyn.
          - write an alternate style of kilitan, e.g. with a 6 note scale in
            tisram
        kotekan
          - support high dung for position 4
      gender:
        - rambat damping emulation: notes ring on by default until they can be
          damped.  Damp at the first opportunity, where opportunity is defined
          as a break with no notes for a certain amount of time.  Can only damp
          two neighboring notes at a time.
  india: gamakam:
    - It doesn't emit signal discontinuities correctly.
    . Get rid of gamakam1-4:
      * Convert gamakam4 to gamakam5 and make sure they sound right.
        . LState.ky add import india.gamakam5
        . change '* interleave' to 't-nn | gamak'
        . 'dyn' to 'dyn mul | dyn'
        * evvari
          . The sample at note start winds up being too high: 16.67s:70.649
          . Maybe due to how pitch transposition is applied.
          . t-nn goes from 0 to 16.67s:2.669, for some reason the first sample
            is different.
          . Save the untransposed pitch and t-nn.
      - Remove gamakam4.
      Save what I want from 1-3 and remove.
        - gamakam1:
          . kampita and nkampita implementations
        - gamakam2:
          . use @ begin; middle;* end
          . middle can be kam, to get multiple oscillations + lilt as
            appropriate
          . It has a separate implementation of kampita, which might be more
            modern.  Also I still like the idea of a stretchy middle section,
            and I think I'll need something like that to write higher-level
            gamakam.
        * gamakam3:
          . Like gamakam5 with pitch and dyn integrated into one syntax.
          . It also has a notion of expr and "compact expr", where the compact
            one is not space separated.
        * gamakam4:
          . Like gamakam5, but emits pitches instead of a transpose signal.
      - Remove ; syntax.
    - How to represent sangitas?
      . Also what about accumulating phrases, as in kuvalaya dala or mosaboku?
      . Maybe define a time range, then an edit in that time range will cause
        a score derive to be appended to the end of the range.  Since the
        "repeat" mark is also included, as soon as you edit the next section,
        it appends another one, unless you delete the repeat mark.  Editing
        a section will cause integrates down the line.
      . This would be a new kind of score derive that integrates into the
        same block and tracks, just at a time offset.  I could do the same
        thing with blocks, and maybe I should to avoid the additional
        complexity of a new "within track" integrate.
    - Bowing ornamonts.
      . gradual attack, and "puff" attack, ...?
    - I think Gamakam4 doesn't test next event pitch, e.g.
      Gamakam3_test.test_sequence on '!!-v-'
    dyn:
      - I think T is messed up, it seems to not know it's 0 dur.
      - Add support for '_' and, why not, '.'.
    - '.' call on the note messes up gamakam
    - 'v' for next pitch is wrong when the next pitch isn't on a note start
    - There still seems to be a case where prev pitch is wrong, it has to
      do with a '--' event.
    - And another prev pitch bug:
      [ (">", [(0, 3, ""), (3, 1, "")])
      , ("*", [(0, 0, "2d"), (1, 0, "3s"), (2, 0, "3r"), (4, 0, "3s")])
      , ("*", [(0, 0, "!^20"), (1, 0, "!0="), (4, 0, "!=")])
      ]
      . Last note should get 3r, but instead gets 3s.
    . For the violin, I want to experiment with other controls, e.g. pitch
      slides also do less bow-force, or dyn can reduce bow-force and
      bow-speed.

    - overshoot "curve" for 'smooth': over2 over3, depending how far over
    . instead of hardcoding specific times, I should say short, medium, long,
      which can vary and have some randomization:
      . short, medium, long: -s = "(rnd low high) | -m = .. | -l = ..

  control calls:
    - signal transformations: +, *, max, min
    - saturation limit, e.g. flatten sine wave but without clipping
    - continuous tempo warping for signals
      tempo: "2" -> "1", "2", cont: "2" -> "i, 1", should emit a bent line

  control functions:
    I'm unhappy with control functions in general - NOTE [fix-control-functions]
      . More details in BaseTypes NOTE [control-function]
      . They duplicate Deriver but can't use it
      . they add another layer on top of controls that you have to take into
        account manually.
      . Also, depending on the pos means the signal is no longer a continuous
        function, and can't be displayed as a line.
      . Making calls all take Call.Function was my attempt to abstract that
        away, but I wound up giving up on that because then the default of an
        optional arg would have to be a Function which is then unshowable.
        To solve this I would have to make a total 'coerce' for Typecheck.
      uses:
        . Randomization, with various ranges and distributions.
        . Some CFs like cf-swing could just be another signal, I only do it as
          a function for efficiency, which is due to my choice to make signals
          fully sampled.
        . A way to pass an interpolation function.  This is a disjoint use
          since it doesn't need any of the BaseTypes.Dynamic state and isn't
          useful as a normal CF.
    - Could use rank to modify dyn and emphasize or de-emphasize notes on
      important beats.
    . With 'real' and 'score' and the signal conversion functions, I gradually
      rewrite more and more functions from Deriver to functions with a
      TrackLang.Dynamic argument.  Also they're going to start to want an
      exception, and why not logging too, and I'm right back to Deriver.
    . Why can't I make ControlFunction into a Deriver?
      ControlFunction moves to Deriver.Monad, so Val must also.
      Now control function stuff must be exported from Deriver, not TrackLang
      and Score.  But also Val can't be exported from TrackLang, and there are
      tons of users for TrackLang.Val.  Maybe I can split TrackLang into a low
      level version.  In fact I already have, everything Deriver uses
      TrackLang for can come from BaseTypes, except Typecheck.  Monad.val_call
      must move to Lib.
      . Environ, Pitch, and Val all move into Derive.  And Score.Event.
        This is getting to be pretty much everything.
      . Another option is to make Derivers polymorphic.  I can put the
        fields in TrackLang.Dynamic in a typeclass.

pitch: scales: scale:
  scales / Derive.Scale:
    - I think the symbolic pitch_note functions should use RelativePitch,
      otherwise the symbolic pitch they produce can't be parsed back in to
      produce the same pitch.
      . Demonstrate with some tests and fix if necessary.
      . For ChromaticScales and JustScales
    - TheoryFormat.make_relative_format is a confusing name because it makes
      a Format from a RelativeFormat.
    - It's confusing how the default_key is built-in to parse_key but also
      passed separately... maybe it should take a flag to say whether an error
      should become the default?
    - Strip type prefixes from Pitch.Pitch and Pitch.Degree?  Add lenses?
    - add ratio transpose signal, that multiplies hz
    support scales that are different ascending vs. descending
      . Scales have two versions of each degree.
      . scale_input_to_note takes a previous Note arg, which it can use to
        guess the appropriate variant.
      . Variants have to have unambiguous names though, maybe 4n^ and 4n_
      . Use scale_alternate to switch a note between alternates, bind to the
        same key as enharmonic.  If there are no enharmonics, then fall back
        on alternate.
    raga: ragam:
      - Support arohana and avarohana by treating them as enharmonics
        Is this really a good idea, since they aren't anything like
        enharmonics?  Maybe I should just use the flip-enharmonic key, but
        keep the concept separate.
        . I could keep it at the Cmd level by remembering the last entered
          pitch and defaulting this one based on it, or I could try to put it
          at the Derive level too by having the pitch itself be based on the
          previous one.
        . Putting it at the derive level seems really hard and unreliable, so
          I should have separate symbols, e.g. 4r^ and 4r_ for up and down
          variants.  For western modes this isn't necessary since the notation
          is already absolute.
        . Or I can model r1 r2 r3 as accidentals.  The raga gives the default,
          and then I can change the cycle enharmonics binding to instead cycle
          number of "accidentals" to force a particular one.
        . So I would model as a chromatic scale but with a custom number of
          accidentals per degree:
            s, r1 r2 r3, g1 g2 g3, m1 m2, p, d1 d2 d3, n1 n2 n3
        . How should ragams look anyway?
          . Absolute chromatic scale with all pitches, and g[123] notation to
            explicitly choose one.  Arohana and avarohana show how to infer
            given plain g.  If >1 exist, then try to infer based on the
            previous pitch.  Also g^ and g_ chooses between 2, if applicable.
          . I need inference for gamakam, but I'll need an override, maybe
            ^_ postfix for numbers?

    - letter and jianpu but with implicit accidentals based on the key
  intonation: think about how to do e.g. meantone melody, with just harmony
    . Do a postproc to analyze simultaneous notes.  If I use an attr to
      tag the melody, I can tune everyone else to it.  But how do I retune
      notes with non-trivial pitch curves?  Well, I could use a transpose
      signal to tell the pitch calls what's going on.  I think I might just
      need the frequency of the melody note.
    . Do an analysis pass, and insert environment that says what the harmony
      is.  Then pitch calls use that to tune.  Doing the analysis might be
      tricky since I have to extract a "principle pitch" from each event,
      but it might be useful in general to have an analysis framework.

Perform:
  - Overlapping notes with different ControlSwitch cc numbers should share
    a channel.  Of course it'll work anyway if only one channel is
    allocated.
    . Currently they definitely won't, because the performer assumes that
      all controls affect the sound, and so you can't share with any control.
  - Pick the best channel instead of the first one.
    . An event can share a channel if it has different controls but the events
      don't overlap.  This is required so that a sequence of notes that each
      set a different control will go on the same channel.  But since it always
      picks the first usable channel, you can have controls trade channels,
      depending on how the coincident events are sorted:
        [(0, 1, c1), (0, 1, c2), (1, 1, c2), (1, 1, c1)]
      This should put the c1s together, but they will trade channels if they
      come in that order.
    . I think to fix this I'd have to have can_share_chan return
      Left fail_reason or Right priority, and pick the highest priority.
      It would have to give a lower priority to events that could share, but
      have incompatible controls just out of the event range.
    . let f = Perform.shareable_chan
      let mkevent start controls pitch =
              Perform.Event inst1 start 0.33 controls
                  (Signal.signal [(0, pitch)]) DeriveTest.fake_stack
      let pedal = Map.fromList [("pedal", Signal.signal [(0, 1), (6, 0)])]
      pprint (f [(mkevent 3.33 pedal 45, 0)] (mkevent 3.66 mempty 72))

  - I can work around the pianoteq tuning bug by not stripping redundant
    conrol changes.  This also means that recorded MIDI can be played from any
    point.  If bandwidth isn't a concern then why not?
  - damper pedal causes all notes to extend until the pedal comes up, should
    the performer know about that?  Is there anything that this breaks?
    I don't think so, it affects channel allotment so notes could be
    improperly joined, but mixing pedal and multiplexing seems rare enough.
  - Perform.Midi.Perform: should be possible to lead keyswitches as long as
    they don't precede the previous NoteOn, since I think samplers will only
    switch on the next NoteOn
  Instrument
    - some basic midi instrument defs for generic midi (dev, patch)

Util.Format:
  HsPretty:
    problems:
      . Missing close paren after wrapped constructors.
      . If I add an indent after each constructor then I get tons of indents.
        What I really want is a way to collapse multiple constructor calls
        with a single argument.
      . For some reason it's not wrapping tuples properly, they become
          (a, B
            c
          )
        instead of
          ( a
          , B c
          )
  - Util.Pretty still broken: pprint Vsl.violin_harmonics
  - move format related modules to Util.Format.*
  - don't use 'reverse' in 'flatten'
  - lazy implementation?

Instrument DB / browser:
  - Fl_Help_View supports limited HTML, use it to display formatted text
  - browser has lots of empty space on the bottom
  - z1/virus-bass has UnknownMessage for initialization?
  - patch files could go in the Local/Instrument dir with the source?
    at least it should go in source control
  - colorize the info_pane so tags are easier to read
  - search lang supports quotes
  sysex
    z1
      - convert patches to larger pitch bend and send them back
      - I need control over which program and bank the patches go when they
        are initialized.  I can use the card as scratch space.
      - I also need to initialize a new multiset, and give the score
        a multiset config, or derive one from the midi config.
    vl1
      - test sending sysexes back
      - move patches to new format
      - figure out how to set category for builtin patches
        . *word shorthand for category=word?
        but I want to use the inst name, not the score name...

OSC backend
  in doc/dev_notes/sythesizer
  - Write a simple supercollider instrument and try controlling that with OSC.
  - Even if reaktor and supercollider don't understand bundles, I could write
    a scheduler server that takes bundles and emits their msgs at the correct
    time.

jack: JACK: linux midi:
  bugs
    - something is still wrong, I get "no space in output port" and then
      corrupted output
    ? jack1 doesn't work at all: other clients don't see writes, until I quit,
      and then they get continuously spammed.  Apparently the jack_port_t*
      from the registration and the lookup are different.
      - Try stashing port from port_by_name port instead of jack_register_port.
  - does jack not support sysex at all?  Maybe I can't use it at all then.
  - Ensure that shutdown stuff is being called correctly.  I don't care but
    maybe JACK does?
  use jack transport
    I don't think I need to be the master.
    - When starting a play, call jack_transport_locate,
      then jack_transport_start().  The play then blocks on a lock which is
      released by JackSyncCallback when it gets a JackRolling state.
    - Register with jack_set_sync_callback.  JackSyncCallback sets a syncing
      flag, emits a Msg that forces the needed bits of performance, then that
      cmd must call back and reset the flag, at which point the sync function
      can return true.
    Then the next step is to test, and then figure out a way to get ardour to
    automatically set up a bunch of instruments and make MIDI in ports for
    them.

misc ideas:
  . What would a generalized staged evaluation system look like?
    E.g. evaluate note (start, dur) and first pitch track.  Then go through
    again and evaluate the rest of the tracks.  The second time the
    neighbors are now incomplete Score.Events with timing and pitch.
    I would also flatten out the block structure and cancel weak notes so
    I have access to true next and prev.  This implies some way to stash the
    unevaluated tracks in the Score.Event.  Then a postproc pass would go
    through and evaluate again, providing new context to the unevaluated bits.
    . I already have something vaguely like this in the Inversion dynamic
      state.  I can provide new context with Dynamic... though it would be an
      essentially untyped way to do it since there's no type difference
      between the first and second evaluation.
    . At the moment I don't need a generalized solution, so I could just
      hardcode:
      event_stage2 :: Maybe (([Score.Event], [Score.Event]) -> NoteDeriver)
      Then at conversion time, any event with an event_stage2 is replaced by
      its evaluation.
    . Conversion isn't quite right, because I still want next event on track
      etc... but actually no, I've been here before.
    . Then I need some way to specify notation that wants to wait until
      conversion.  I guess it would go by track, so maybe a magic symbol in
      the track title.  Then slicing separately returns slices from those
      tracks.  These still have to be evaluated in their original environment,
      so I then wrap in a derive_tracks and store as a NoteDeriver.
    . So I think this could work... but is it really worth it?  It seems like
      it introduces a whole new level of complexity.  And, if I go the
      typesafe route, a whole new type of calls, which a new accompanying
      namespace.
  . Import or trace curve from a pitch tracker into the pitch track.
  . Staff notation represents chords well, but tracks don't.  Think of a more
    compact notation.
  . Why can't I write a 'tr' that generates pitch signal in some cases, and
    adds an attribute in others?  It would be redesigning control tracks so
    they are just note tracks that slice their children and apply
    a transformer to them.  I'm not sure that will coexist with the curve
    description language that control tracks currently implement.
    It would be interesting to get rid of track types entirely though.
  darcs to git:
    . https://github.com/purcell/darcs-to-git
    . http://darcs.net/DarcsBridgeUsage

tracklang problems
  . It's too low level for chord-oriented music like piano.  For instance, I
    have to care about which note is on which track, while staff notation
    only has one way to write the cord.  So I have to do busywork like sorting
    notes by pitch, or copy pasting notes around between hands.  The whole
    thing about "what track is it on" is a result of the proportional time
    display, otherwise the horizontal position is unnecessary complexity.
  . The way that note, pitch, and dyn are separate is a hassle for reading and
    for editing.  Automatic pitch track selection and collapsing helps a bit,
    but it's still awkward.
  . Also it's not so easy to differentiate all those tracks, especially if
    every pitch track has its dyn track.
  . It can also be complicated to copy paste around if there is a bit of
    non-trivial structure like parent note tracks.
  . It's still hard for me to see relative positions and chords just from
    text.  Staff notation seems much easier.  Also hard to see enharmonic
    spelling.
  . In large scores, especially lilypond-using ones, I wind up with
    a complicated 2d structure to get all of the right transforms on the right
    notes.
    . One problem is that it's hard to see and understand the skeleton
      relationships, but also that each instrument has a unique ad-hoc setup
      based on what it happened to need, and then I fit in whatever I can into
      that ad-hoc structure.
    . Not only does the complicated structure consume thinking power, it makes
      things like copy paste awkward.
    . Also I spend time fiddling with track widths.  Because one track has the
      same width for the whole block, it should generally be wide enough for
      the widest text, but frequently that makes it too wide in general.
    . Also it makes me reluctant to solve problems by adding a new track.
    . Maybe the problem is blocks are too large.  They're generally awkward to
      navigate.  But on the other hand, things scattered into lots of separate
      blocks make it hard to read, and annoying to update.  A "1:1" mode could
      alleviate the updte part.
  Solutions?
    . Theoretically lilypond could give the advantages of staff notation for
      reading only, but it's too slow for realtime update.
    . I could use verovio to maintain a instant staff display of the current
      surroundings.  Of course all this only helps with reading, not writing.
    . More utils like LNote.sort_on_pitch to automate away hassle could help
      with writing, but not reading.  So maybe it's worth trying to make
      sort_on_pitch more robust.
  verovio:
    . Lilypond is really slow.  If I use verovio maybe I could have a realtime
      display in staff notation.
    . I'd need a lightweight svg viewer, or svg display widget.  A web browser
      might work, if I can get it to update.
    . It has a standalone binary that can read MusicXML or PAE or various other
      formats, but why should I use some awkward intermediate format when
      I could link it in and use serialized notes as im does.
    . How much work this is depends on what format it expects.  Probably similar
      to lilypond, and should be able to use the same tracklang notation, except
      of course embedded lilypond code won't work.
    . But it's probably not worth it unless there's really a good reason for it.
      It could be a simpler than the lilypond backend since it's just meant to
      give a basic overview of durations and intervals, but still it's probably
      a fair amount of work to create and maintain a binding.
    . One complication is that it might be necessary to do an incremental or
      local-only update for speed, and I'd need to come up with some mechanism
      for that.


long term:
  - midi record
  - dense / efficient control signals
  - stable api
  - solution for per score haskell
  - text score
  - non-realtime synthesizer: doc/dev_notes/synthesizer
    - include audio inline, so I can write signal transforms like event
      transforms
  - horizontal layout
  - Unify environ, controls, and pitch signals by making signals of
    arbitrary type.
  - print scores

planning / research
  text score: doc/dev_notes/text-score.md
    . Time problems:
      . I want to say "repeat n times".
      . I want sections with their own tempo, and then the caller just sequences
        them.  If I turn the whole thing into one call, then I can still fit it
        into a global timeline, and apply transformations or tempo there.
      . If there is meter information in the text score, I can derive a ruler.
    . I could generalize Pitch.Pitch to 'Pitch pc'.  Then Bounded types would
      have per_octave built-in, but I could still use Int for generic cases.
    . Rhythmic framework: in the solkattu branch I extracted the rhythmic DSL
      to 'Note a | TempoChange (Speed | Nadai)' and I have have generic
      functions to get durations and check tala alignment using matras, and
      flatten to (Time Ratio, a).
    . This winds up being more general than haskore, but probably less general
      than music-suite.  It looks like 'temporal-media' is analogous, though
      with arbitrary time shift/stretch, and events have duration.  Also since
      it uses (start, dur, note) events, it doesn't need rests, and can do
      overlapping events.
  cmj:
    . bezier-spline-modeling-of-pitch-continuous-melodic-expression.pdf
      Contact Bret Battey about PICACS: http://www.mti.dmu.ac.uk/~bbattey/
    . Wendy Carlos' tuning article: "Tuning at the crossroads", CMJ 11/1
  things for expressive music
    There needs to be some way for notes to affect surrounding notes.  For
    example
      . A trill might want to push the next note back a bit so it can complete
        its cycle.
      . Portamento might want to put controls points on a curve, so the speed
        a distance between pitches affects how quickly they approach, and
        quick notes will have less accurate pitch.
      . Gender tick affects the damping of the previous note.
      . If I control uses bezier curves, the curve is determined by the last
        control point of the previous and the first point of the current call.
    Other ideas:
      . Switch samples when played quickly.
      . Drum thing where successive strokes lose some energy.
    . Randomization is a first step, but true variation in playing is not
      random.  Things to study:
      . Tempo variation.  This is related to intentional tempo variation, but
        there should be slight tempo variations all the time.  This also has
        to do with higher level controls like rushing or lagging, and slight
        amounts of swing.
        E.g. some instruments may tend to rush when they want to be more
        prominent, or get louder.
      . Start / duration variation.  Related to tempo but at a lower level and
        less systematic.  Interpretation of staccato depends on surrounding
        tempo.
      . Dynamic variation.  Many instruments tend to get louder at higher
        pitches.  Tempo speed up tends to increase volume.
      . Pitch variation.  Some instruments tend to attack inaccurately and
        then correct.  Higher dynamics and tempo could make pitch less
        accurate.
    Modelling notation as a set of constraints:
      Notation specifies parameters along with how "fixed" they are.  For
      example, specified pitches are usually immovable, but onset time might
      be variable, depending on how important the beat is.  Higher level
      notation then assembles components and combines the constraints, and
      results in either conflicts, or a set of more specific constraints.

      . Example: janta attacks from below, normally one diatonic step, but
        avoids repeating the previous note.  A trill can end on either low
        or high, but if followed by janta, will change to avoid making janta
        repeat a note.  If trill speed is unfixed, it can change that,
        otherwise change attack time of the following note.  If the trill end
        is fixed, then the grace note must adapt by picking another higher
        note.
      . Carnatic ornaments change when time is reduced.

  think about grammar for ornaments
    . Notes have a syntax: there are ornaments or articulations only valid at
      the attack time, ones that apply to the sustain, and ones that serve as
      transitions to the next note.  Also, the shapes of ornaments vary based on
      the note or absence of a note preceding and following, in addition to the
      speed.  It makes me think of cursive Arabic, where letters change shape
      and placement based on the previous letter, along with rules about which
      letters go where in the word (I'm sure linguists have a name for this,
      e.g. English has "ng", but won't start a word with it).  I've noticed
      there's a tension between specifying exact times via a timeline or
      whatever, and the kind of higher level flexibility implied by a syntactic
      approach.  E.g. if you say "attack X, sustain Y, end with Z", you are not
      saying exactly when X, Y, and Z start and end, and they are free to
      arrange themselves according to context.  But you do need a certain amount
      of precise control over times, at least in some cases.
    . This is similar to the "constraints" idea, at least with regard to some
      aspects being flexible, while others are fixed.  For instance, if
      I write ornaments with no specific times: 'A; B; C' then the start times
      and durations are flexible, and its up to the interpreting code to
      arrange them, but if I make separate events for A, B, and C, then the
      times are fixed.  Of course I also want to be able to fix A and C, but
      leave B's position flexible.
    . How to represent this as events?  I think I need a "macro" facility,
      where a call can interpret following events as a separate mini-language.
      I used to have this, and could probably get it back, by re-introducing
      the "skip following events" return value.  In that case, some notation
      like a leading '=' would indicate that the start time is fixed.
      Otherwise, the event_start is irrelevant except that it's in between
      the previous and next events.
    . Or maybe I do it as sub-notes, that way the one on the left specifies
      the extent of the "note DSL", and I don't need a "skip following" hack.

  . Give a visual indication of the events emitted by a call.  This is the
    note level version of the track signal render.  The underlying problem is
    that textual call names are not necessarily very clear about what the
    notes are, especially if it's a relatively ad-hoc call.  But I think
    I need a fancier GUI for this, since I'd have to have some way of turning
    a bunch of events into a distinctive looking graphic, e.g. a scaled down
    image of the block or something.
  . spline curve interpolator: evoral/Curve.cpp, www.korf.co.uk/spline.pdf

  . If I implement a VST host or patch a DAW to accept VST controls like MIDI
    controls can I get low latency high res controls?

Instruments:
I'd like to make "instruments" indistiguishable from calls.  I need to find
instrument quickly to figure out the scale, and besides I shouldn't combine
into one track.  So, pitch is in its own track.  Then a separate instrument
/ block call track.  What about tuplets then?

Logically, pitch track should be like a controller and the instrument track
should control note on/off.  However, a very common use is to put in a new note
and duration and the instrument is the same as the previous.  Or have one
instrument controller multiple tracks.  So I need a way to abbreviate set pitch
+ previous instrument + duration.



A pitch track is a controller track, just like other controller tracks, except
that it has scale degrees instead of just being 0--1.

Notes are actually played by the instrument track, whose events have duration.
The instrument is constructed from the text in the event and the track title:

title       event           result

""          inst +attr      inst +attr
inst        +attr           inst +attr
inst        inst2           inst2
inst +attr  +attr2          inst +attr1 +attr2
inst +attr  -attr +attr2    inst +attr2

inst        ""              inst
""          ""              error
+attr       inst            inst +attr


combine title event = case foldl' parse (Nothing, []) ws of
        (Nothing, _) -> Nothing
        (Just inst, attrs) -> Just (Call inst attrs)
    where ws = words title ++ words event

parse (inst, attrs) word = case word of
    '+':attr -> (inst, attrs `List.union` [attr])
    '-':attr -> (inst, attrs List.\\ [attr])
    _ -> (Just word, attrs)

However, it seems like instruments should also be in the envirnonment,
otherwise say a tuplet doesn't know what instrument it is.  How about, a track
title with inst acts like a set, +attr just combines.  So when you see "xyz"
in instrument position, if it's a call it just does the call, but if it's
a "real instrument" it overrides the instrument in the environment.
- add 'Instrument Name (Set Attr)' to environment

So how do I get to scale from here?  Instrument -> scale doesn't work so well
if the instrument is a call, which could after all involve instruments with
different scales.  It doesn't make sense to put a pitch curve on those anyway.
Ok, so scale goes in the track title of the pitch track.  If you want to enter
scale degrees in the instrument track (instruments with note args like
tuplets) the scale comes from the accompanying pitch track, if any.
- come up with title for "main" pitch track, and form for pitch tracks, with
  scale name

A common use is to have the note simply be the track instrument, in which case
a whole track consisting soley of empty note durations lined up with pitch
sets is awkward.  So there should be an editing mode that edits the notes and
their pitches as a unit, and a display mode that can collapse them into one
track.  In fact, a mode that combines any control track (or multiple control
tracks) could be useful.  A command expands or collapses combined tracks, and
they are marked on the UI.  If you expand an instrument track it creates
a pitch track if need be.
- "nonflat" track structure, which is flattened before sync, has bits for how
to merge with whom.  this also has info like mute and collapse.
- visual cue to indicate a mergeable group

So you create an instrument track, and when you enter a note, it finds the
pitch track, adds the pitch, and adds the note with the current instrument.
The pitch track is created if none exists.

So the commands will depend on being able to easily get from the instrument
track to its pitch track and back again, and that means it should be enforced
that there only be one pitch track per note track or at least one "main" one
(what about one for pitch and one for vibrato?).

TODO:
- remove the parsing stuff, revert to state where you enter plain notes
- implement pitch track as a separate control track
- implement instrument track and lookup, put inst in environment
- remove the old instrument track stuff
- modify note entry commands to write to both inst and pitch tracks
at this point I should be back where I started, with the ability to put in
notes, except more awkwardly because of two tracks

- track collapsing
- track muting
- track merging


2010-02-01
the problem:
transform deriver maps across the derivers, but c_equal as a generator sets
the evaluating env.  It would have to map across derivers after its pos.

I want to expose the note structure to transformers, but I want to allow
functions to behave as they please, which implies opacity.

Processing Event.Events makes it hard to modify signals since they don't have
signals attached.

Process Score.Events completely bypasses abstraction, you can only manipulate
the events concretely and in global time.

Processing Derivers means that transformers can't deal with events at all.
Global things like echo with constant delay would work, variable delay would
not work.  What's more, notation like tick may not work.  This is theoretically
the nicest way, but I have to push everything down to the evaluation level.
The thing that's hard to do is modifying sets of events together.

- tick: look at prev pos and pitch and next pos and pitch, emit EventDeriver
based on that.

- suppress previous note: I think I can better implement this as a block arg
anyway, but in any case this works with Score.Events so it's a post proc,
I think I need the notation pass-through thing (directives).  So I would emit
(EventDeriver, [leftover_event]).

- tuplet: Evaluated at call time, should be fine.

- clip-call: Should be fine.

- seleh: I could snarf future events, evaluate them, and then manipulate the
resulting derivers.  So I need a way to snag a bunch of future events and turn
them into derivers.  So the event map should look like:
[previous_event] -> [following_event] -> (EventDeriver, consumed).

derive_notes prev next = do
    let (d, consumed) = derive_note prev next
    events <- d
    -- optimize consumed=1?
    let (pre, post) = splitAt consumed next
    rest_events <- derive_notes (reverse pre ++ prev) post
    return (merge events rest_events)

Conclusion:
    - implement new derive_notes map, change Call signature
    - remove NoteDeriver
    - come up with a syntax for Ui Event preproc

Ideally I want to be able to process things at all levels, preprocess
Event.Events, postprocess Score.Events, and abstractly manipulate Derivers.
I can postprocess Score.Events by forcing the Deriver and re-packaging it at
the cost of evaluating behaviours (I would have to at least handle warp).
Preprocess would need a special notation at the track level, though I can see
it wanting the control tracks too, so maybe also at the block level.



2010-02-21
    application of calls in the track

A note track is at the bottom of the call tree, it runs in the context
provided by the control tracks above it.  This is necessary for derivers that
need to know what the pitch is, or modify the pitch, like trill.  However,
some derivers want to move (warp) other derivers, along with their pitches and
various other controls.  The problem is that the controls have already been
evaluated, and that's why you can see them in the environment.

There are two solutions: warp the controls in the environment after the fact,
or evaluate the call before the controls.  The first is probably not tenable,
because controls themselves may contain abstract derivation, e.g. a trill in a
pitch control can't be manipulated properly if it has already been reduced to
a signal, so I am left with the second.  While the actual note generating
calls are still at the bottom of the call tree by necessity, some of the calls
in the note track are not.

One problem is how to express where each call goes.  A normal language can
simply nest expressions as desired, but I have all expressions flattened into
tracks.

- Use multiple note tracks, and place each call explicitly at its level.  This
is most appealing in terms of orthogonality.  I have to work out exactly what
this would look like: how does a call in an outer note track get the derivers
for the calls in the inner ones?  Will it be too awkward notationally?

- Explicitly mark calls with a list of controls they are above.  This can
either be from passing some kind of argument to the call, or something
hardcoded.  It seems like this would lead to lots of messing with control
lists for each call and is not very easy to use.  Also, it has to be
per-track, because you could have the same control outside and inside, e.g. a
breath track outside, and then a multiplicative breath track contouring each
note inside.

- Mark controls as binding loosely or tightly, and derivers are coded to
operate "inside" or "outside" of notes.  I think this is pretty feasible
because derivers seem to break down naturally into those two categories.  This
way control tracks are tagged with note-local or global, which will control
whether derivers that modify notes will modify them or not.

Derivers that want to manipulate notes abstractly are functions of [Deriver]
-> Deriver.  But how do events get turned into a Deriver in the first place?

More like real expression evaluation: eval innermost first then pass to calls.
Dunno how this would work...

Another way is that the deriver takes [Event] then has control over the
evaluation, but will eval recursively.  This way if it reorders them they can
get the proper prev and next, or can it?  Suppose a note generator wants prev
and next pitches, and is inside a sekaran:

derivers = eval_notes [events duplicated for how to play]
merge [d @ x ~ f | d <- derivers]

The whole thing about stripping the call from the first note of a subeval
seems wrong.  Multiple note tracks would avoid this.  It seems like if they
were evaluated separately...


To get trimmed_pitch right I only need to trim according to the track and
warping won't destroy that property.  However, next and prev notes won't be
according to what you actually hear.  Then again, what exactly does "previous
note" mean in the presence of derivers that rearrange them arbitrarily?  I
need a better idea of what prev and next will be used for.
    trimmed_pitch : need next event on the track, in RealTime.
    repeat something from previous note: maybe just use dynamic env?

Previously, a note can get previous/next pitch because it's in the same pitch
env as prev and next notes.  Could I generalize this with prev/next derivers?
I just need the environ from them, so I should be able to avoid an endless
recursion.

Anything but strictly previous on track and next on track seems too ad-hoc and
hence too hard to predict.  Multiple consume calls kinda throw in a monkey
wrench.  They're really analogous to macros though.  But macros just rearrange
syntax, they don't evaluate too, but just doing syntax would make common
things like transposition a pain.  It seems like I should still be able to get
prev and next right if I'm careful.


    - controls are marked as being outside or inside
    - calls are also marked as binding outside or inside
    - pass the TrackIds for outside controls in the dynamic env, and an
        outside call will delete and re-evaluate them
    or
    - the first time I hit an inner control, look downwards for note tracks.
    Run a derive on just the outer calls.  But how do I actually do that?

outer expr events = do
    -- But then I need to pass in the expr below me for eval, right?
    (deriver, consumed) <- eval expr events
    return (deriver, drop consumed events)

eval_outer = do
    groups <- collect_groups :: (Expr, [(TrackId, [Event])])
    (ds, residue) <- unzip <$> mapM outer groups
    sequence_ [set_residue tid (concat events) | (tid, events) <- residue]
    return (merge ds, concat residue)


I think the general form of what I want to do is a deriver that takes
*multiple* other derivers as arguments.  So the main issue is breaking up a
track into multiple derivers so they can be processed separately.  How about:

Transformer takes Deriver, but also gets [(TrackId, [Event])].  It can use
that to create (TrackPos, TrackPos) ranges and set those in dynamic env, which
causes the note deriver to only derive events in that range.  So

outer expr events d0 = do
    (d1, consumed) <- eval expr events d0
    range = range_of events (drop consumed events)
    merge d1 (in_range range end d0)

I don't think prev/next works with this at all though.



Make a list of derivers and where they want to be:
    - trill, bottom
    - vibrato and pitch ornaments, bottom
    - rambat, bottom
    - more traditional sekaran that only looks at pitches and generates new
    notes
    In general ornaments can all go on the bottom.  If they modify a single
    note, or generate simple notes, i.e. first order.

    - sekar, above pitch, breath, etc.
    - tuples, much like sekar
        t *a *b *c | call |
    - also could have a sekar-like tuple:
        t 3 -- Take the next 3 notes and fit them into the space of the first,
            or into the space of all 3 until 4th event start.
    - echo, like sekar
    In general, things that transform notes go in a certain middle position
    since they want to keep controllers on their notes.  I.e. "higher order"
    derivers that manipulate other derivers.  The problem is that they're in
    the middle, but where is per-block.  But I think a simple low/high flag
    would be enough.  It would have to be block-local, the controls from
    an outer block are all outer.

    max, vel, inner -- but with two optional args it's ambiguous
    vel + inner -- but just + won't parse currently
    %vel + inner -- not ambiguous with normal calls, which is necessary if
        I allow it in the middle of a track

    %vel combine:+ inner:true
    This becomes a null call to 'control %vel combine:+ inner:true'

    In the same way
    >i
    becomes a null call to 'note >i', which then evaluates everything and
    returns (Deriver, length of track).  Returns to who?  Default call is
    hardcoded.  This means that the track call can be a generator.  This is
    also a way to implement preproc.  But it doesn't scale to composed preproc.
    Also the need the > first to signal a note track.



Conclusion for now:

This stuff is too complicated, forget about it.
    - implement echo with events
    - implement tuple by splitting one event

I already have deriver arguments in block calls.  I don't have a way to collect
them into multiple arguments, but presumably could.  It's just that splitting
every single deriver out into a block is too much of a pain notationally.  So
if I eventually do want to implement this, do it as a kind of automatic block
splitting, where you can split a bit of a block and pretend its a sub-block.


old notes:

- I need a way to give default args to each call.  Normally signals do
  this and they would give me a way to change the default args in time,
  but I would need typed signals, and still might want a way to set the
  name of a signal for an arg.  So for the moment I can use a separate
  mechanism, but it should be dynamically scoped via Derive.State.

  So why do I need ';' at all then?  It signals the event is not
  derived into notes, but maybe that's obvious enough from the syntax.
  I think I could make '>inst' shorthand for 'inst = >inst' and '+attr'
  shorthand for 'attrs + attr'.  But what if I want to scope the
  setting to a note?
    '' -> a null call derives a note
    'x = y' -> set val for rest of track
    'x = y |' -> set val within the derivation of a note
    '+attr' -> shorthand for 'attrs += attr |'
    '+attr1 +attr2' -> shorthand for 'attrs += attr1 | attrs += attr2 |'
    '>inst | block' -> set inst and call 'block'
    '|' -> derive two notes (or error if this isn't useful)
    '| x = y' -> error, x = y is ignored

  This brings up the possibility of being able to set the "null"
  deriver for a track.  Normally it's the one that emits [Event ...],
  but could there be a use for replacing it with something else?
  Implement "damping" notes that way?

  Now the track title really is just composed with the track: >inst | blah
  I still have to signal a note track though, and a leading '>' still
  seams reasonable.  But now I can write '> | sets_inst_based_on_env'.

  A problem with the 'set val' statements is that I have to evaluate them
  to be able to evaluate notes past it.  This makes finding the next event
  tricky.  A signal wouldn't have this problem but that's only because
  the signal is evaluated in a separate track.  That seems notationally
  inconvenient, though I suppose automatic track collapse and creation
  could improve this.

  Hmm, the presence of random seed means I have to evaluate in a line...
  except if I make random a function of seed + trackpos.  "Associative"
  derivation seems like a useful property in general.  What if I have
  a deriver that wants to know if there's a note at the next major
  downbeat?  Also this lets me derive only a portion of a block.

  So I could do two passes on a note track: one pass extracts the '=' and
  turns them into signals, next pass does processing.  I can even put them
  in their own track if I want, I just add a note track and don't put in
  notes... or maybe I need a '=' title or something because as note
  generators, note tracks need to go at the bottom.

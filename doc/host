VST / AU host

    host synth plugins

plugins - list available plugins

load "name" - load a plugin, return an plugin ID

unload ID - unload plugin, disconnecting everything from it

ls audio/{in,out} midi/{in,out} - list port IDs for global ports

ls plugin/ - list loaded plugin IDs

ls ID/audio/{in,out} ID/midi/{in,out} - ls port IDs for relevant input or output
available on a given plugin

ls ID/auto - list automation targets

connect port_id port_id - connect the ports, if of compatible type

disconnect port_id port_id - disconnect

get_state ID - return state of plugin with ID, as an opaque chunk of bytes

set_sate ID - restore state, given previous chunk of bytes

edit ID - bring up editor window for plugin

automate ID/auto/auto_id signal - feed automation signal to automation
parameter.  Signal is a binary format: [(Float, Float)].

This means I need an internal timer, which should be the CoreMIDI one for
synchronization.

    DAW

cursor_at seconds - Set cursor to n seconds into the session.

play start pos - Start playing at 'start' time, which is some global timer,
maybe the one used by the MIDI system, start playing 'pos' seconds into the
session.

stop - Stop playing.

    cache synth output (or track freezing)

arm ID - arm recording on the track attached to the ouput of plugin ID
disarm ID


TODO

c++:
os specific
  load and unload VSTs and setup interface
  open and close audio and midi interfaces
  create window for editor

os independent
  setup audio / midi graph and drive it
  get and set state

hs:
listen on port
parse commands


Indents are 4 spaces only.  Nothing is lined up vertically (so indents should
all be multiples of 4 spaces), and there are no tabs.

No line is longer than 80 columns.

All lower case names are lower_with_underscores even though it's not haskell
standard.  All upper case names are haskell standard CamelCase.  If I started
again I'd use lowerUpper, but it's too late to change now.  Some modules in
Util, which are nominally independent, are in lowerUpper, but I'm a bit
inconsistent.  Solkattu/* is all camelCase.  Acrynyms are words, so MidiTest,
not MIDITest, and NoteId, not NoteID.  It looks weird but it's consistent.

Operators are wrapped on the following line, with some exceptions like =, <-,
$, <$>.  Call signature definitions are a bit stylized so they have their own
convention.

Each module has a haddock comment, describing what it's for and what should go
in it.

Large comments use {- -} and their contents are indented.  This way
indentation based folding can get them out of the way.

Long explanations (typically of why something is the way it is) are in a
separate comment that starts off `NOTE [something-or-other]`, and other
comments that want to reference it mention `see NOTE [something-or-other]`.
Make sure to capitalize the NOTE, otherwise there are way too many things
named "note" or "Note" in the source!  This is borrowed from GHC and it seems
to work for them.

Modules are imported like `import qualified A.B.C as C`, with very few
exceptions (notably, Global and Types).  Therefore, toplevel variable names
should generally not repeat the module name.  Preferably no two modules have
the same file name, but if they do, they can be imported along with their
directory name, e.g. `import qualified A.B.C as B.C`.  They are sorted by the
order in the `.fix-imports` file, and alphabetically after that.  The order is
automatically enforced by the fix-imports tool.

Major high level types tend to go in a module with their own name.  Many types
also often have a constructor with the lower cased name of the type which may
provide default arguments and whatnot.  Even though I don't generally restrict
the "real" constructor from the module export list, you should use the
function constructor when possible to insulate against changes to the type.  I
prefer function accessors rather than record pattern matching for the same
reason.

All modules that call C end with "C", and are split up such that as few
modules as possible import them.  This is because ghci won't work if it has to
import a module with foreign deps.  Technically it should be able to if you
give it the object files but since it's the entire GUI library and associated
system libraries I've never been able to get that to work.

I'm inconsistent about record fields.  Originally I used `rec_xyz` where `rec`
is an abbreviation of the record type name, but lately I've been using just
`_xyz`.  It's hard to do that everywhere though, because they can collide
within the module.  Yeah, it's annoying.  The lenses, if there are any, omit
the leading `rec_`.  I write lenses by hand, no TH, because TH is a hassle.
I'm inconsistent about lenses, but generally only add them for records that are
nested in other records.  Records in Haskell are just inconsistent and awkward
in general.

Cmds begin with cmd_.  But not always.  I'm not very convinced of the value of
this convention.  The idea with cmd_ is that the cmd_* version can be directly
bound to a key, and it will get various default parameters from context and
call the non-cmd_ prefixed version with more parameters.  Lately I've been
omitting the prefix.

Calls begin with c_.  I use this convention pretty consistently, where the c_
prefixed version has the documentation, signature, and any further arg
parsing, and the non-prefixed version has the actual logic.

Most types should be in Show and Pretty, for debugging and interactive use.
Types that cannot use the automatic Show instance may derive their own.  If so,
they should emit valid haskell syntax because non-valid syntax will break
`Util.PPrint.pshow`.  In this case, they are surrounded by double parens
`((xyz))` to distinguish them from automatic instances.

There's a convention where functions that look something up are prefixed with
`lookup_` if they return Nothing on failure, and `get_` if they throw an
exception on failure.

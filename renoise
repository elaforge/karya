suggestions for renoise:

    Pitch Bend

Let the normal pitch effects send midi pitch bend.  What's more, you
can make "portamento" (05) work in midi if you know the pitch bend range of the
midi instrument.  Unfortunately many synths max out at 12 semitones, but some
go up to 48 or even 96.  The rationale is that the tracker style pitch bend is
much easier to use than entering a stream of 14-bit numbers!  What's more, I
think tracker portamento is one of the most expressive techniques out there,
and the midi equivalent (turn on the "mono synth mode" and mess with the
portamento speed CC) is made so awkward by sequencers.  Non-retriggering
trills, swoopy leads, 

A midi note with a 05xx on it would not send a new note on, but send pitch bend 
to approach the target note at rate xx.  If that goes out of the 14-bit range
according to the pitch-bend range setting for this instrument, it just clips.
This also means that the first note without a 05xx effect on it will have to
send a pitch-bend reset right before the note.

As an alternate implementation which would work for synths with narrow pitch
bend range would be that 05xx sends a portamento speed CC of xx and sends the
previous note off slightly after this note's note on, for that fingered
portamento thing.


    Controllers

Editing controller data in the track.  If this were implemented, you could put
the automation curves directly into the tracks.  You could also implement the 
volume and pitch slide effects with it.

A special command sets the controller track to control given parameter.  The
controller track, unlike other tracks, can hold values at a greater resolution
than the visible track lines.

0C07 s00 -- 0C = midi cc, 07 = volume, s00 sets value to 0
.... s40 -- set value to 64
.... d05 -- decrease value 5 per track line (but interpolated)
.... d.. -- continue previous decrease
.... ...
.... l40 -- linear interpolation to 64 over two lines
.... c20 -- cubic interpolation to 32

Clearly, all kinds of interpolation methods could be present.  Note that this
is different from the more trackerly portamento style, where you specify the
destination and the speed to approach that destination, which gets complicated
(though still possible) if you start wanting curves.

When you record midi input like aftertouch or pitch bend, it just records the
numbers with 's' in front (of course you can change that if you want to smooth
the curve).

The tricker bit is controller values at a greater resolution that one per line,
which is essential for e.g. recording real pitch bend or breath controller
data, or finer control over e.g. vibrato like effects.  The best thing I can
think of for that is a command to "expand" a line into its constituent ticks,
which are presumably at a "fine enough" resolution.  A row with multiple values
"inside" could just display the first and have e.g. a red background to let you
know you will be deleting multiple values if you delete the value there.

In fact, once you do this, you might as well let people put notes in there too,
which will be a nicer way to notate the "fractional delay" instead of a special
command with a delay in ticks.  Actually, I think the whole notion of "ticks"
is a non-musical leftover from the old days of trackers.  Why should we be
stuck with some arbitrary finest resolution decided at the begining of the
piece?  If you could instead unfold a row into n subrows that evenly divide it,
you would have arbitrary resolution for note entry.  You would also have a nice
notation for triplets and quintuplets and such, which trackers have
traditionally lacked.  You could also fold up rows to more easily view and edit
slower moving parts, or just view larger sections of the piece.  Trackers are
traditionally very weak at notating complex rhythms or even just natural
timing...  this could address that!  This would be a pretty major change on top
of the controller major change, but hey, you said you didn't want to be limited
to imitating historical tracker preceedent.


Random other nice features would be a configurable interpolation resolution to
avoid overloading the midi bandwidth or to intentionally create a stair-step
effect (this is why the interpolation resolution command should be a normal
track level effect, so you can change it on the fly).  You could also display
a graphical curve (you could even squeeze it behind the numbers in
a contrasting color) to visualize the controller.

Possible controllers:
volume - On a midi instrument, this sends CC 7, on a sample it controls volume
normally.

absolute pitch - This does pitch bend, and controller values are in hz for
effects like heterodyne tremolo that need an absolute hz offset.  This would
have to be relative to the note's hz and negative numbers are hard to notate,
so maybe it's too complicated to implement.

log pitch - Also pich bend, but the controller values are note numbers (it
would be nice to be able to enter  in pitchclass-octave notation instead of
note number, which would require some context sensitivity in the controller
column).

Note that the presence of volume and pitch controllers obsoletes (or just
provides an alternate notution for) the pitch slide, portamento, volume column,
cresc. / decresc. etc.  Especially if you allowed pitchclass entry into the
controller column, there would be little reason to keep the portamento effect
around except backward compatibility.

midi cc / vst parameter - Obvious.

tempo - This would be interesting.  The controller column would be bpm.  You
could do nice smooth ritards and accelerandos, which is traditionally hard in
a tracker.

I'm sure there are other useful controllers to be thought of.  Note that this
suggestion also subsumes the "pitch bend for midi" suggestion.


    Programmable pasting.

When you paste, it exports the clipboard along with the overlapping track data
to an external program.  You could use this to implement:

Merge effects, to impose effects from one bit of music onto another.

Standard replace - just return the clipboard.

Push overlapping notes forward - return the clipboard and the ovlapping notes
with start time += length(clipboard).

More interesting controller merges: add controllers to like controllers (impose
a pitch-bend vibrato on some other notes), multiply them by each other
(gradually decrease strength of that vibrato, turn a linear slide into a curve,
etc.).  Note that this is much more powerful in the presence of the
"controller" suggestion.

You could implement "filter selected block through external program" by just
doing a copy, clear, and then paste through said program.

    RPC API

Doesn't need to be complicated.  In fact, the most valuble feature would be
"get selected music" and "replace selected music with this" or "insert this
music here".  This would, of course, subsume the "programmable pasting"
suggestion.  If you could say "load this sample as a new instrument" you could
implement "render this selection in csound, reload as a sample, in a new
column, mute original notes.

If this was, say, XML RPC over a socket, you could implement these plugins in
any language you choose.  You've already got a start on this with the 

From there it's an easy step to bind an arbitrary keystroke to an RPC call, and
this would obsolete all the traditional ad hoc tracker commands like
"interpolate volume" (of course, the above controller suggestion is a better
way to do this anyway :), or even copy and paste:

- I select some music
- I hit ^1, which is bound to "copy1"
- renoise sends "user wants 'copy1'" out the rpc port
- "plugin" bound to that receives the request, sends back a request for the
selected music data
- it saves that to disk in the "copy1" file, which a later "paste1" will insert


    Visible waveforms

If you implement the part of the controller suggestion where the curve is
visible behind the numbers, you might as well go ahead and display the sample
behind the note column for sample instruments.  It wouldn't be super useful,
but it would be fun!


    Sysex

Very useful for setting up synth config at the beginning of a piece.  My old
tracker did this by having a set of buffers and then "effects" to say "dump
buffer n".  It meant songs had to start with a "dump, wait a second" block
though.  A manual send button could fix that, I guess.


    Integration with another sequencer

So, what I'd like is the ability to mix live recorded music with tracked music,
in a less clumsy way than recording giant samples and trying to get them to
line up.  Sequencers like cubase are already quite powerful here, so they just
need to be synchronized.  I know you can do that with midi clock, but it would
be convenient to have tight synchronization and to be able to stream the audio
back into cubase to integrate with the existing channels there (the reason why
I favor the tracker as the slave rather than the other way around is that it's
much easier to sync a sequencer to recorded material than the other way
around!).  So, rewire is proprietary and annoying, but it seems to work ok and
be something of a standard.  So, rewire support for renoise would complement
its capabilities very nicely!



I'd be willing to register renoise a couple of times to get some of these
features! :)  I don't think I could just plain sponsor development since that
would probably be thousands of dollars (though I would be willing to go up to
hundreds---if I'm willing to pay $500 for cubase then that much for another
powerful tool shouldn't be that much of a stretch).  I could also possibly
contribute to development myself, although I don't know how that would work
since you're clearly not an open-source project and don't just hand the source
out to anyone!  I think the only ones I could reasonably promise to implement
would be the simple pitch bend one and the RPC API one since they wouldn't
involve major changes to the internals (hopefuly! I don't know the state of
the code obviously!).  Once again, I don't know how you non-open-source
guys handle this stuff and how you could know that I'm a competent and
responsible programmer aside from some kind of interview or something.  Let
me know.


I would also need some time to play with renoise and get a feel for whether
it's the tool I want to commit myself to!

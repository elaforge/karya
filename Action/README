The Action modules provides the Action type.  It can be serialized (for saves),
inverted (for undos), combined (when multiple actions should be undone as one),
and of course, executed (converted to UI () and sent to the UI thread).

All changes to music data are expressed as Actions.  This includes view changes
(zoom, scroll, create new view), model actions (create new model, insert event, ...)

However, not everything you do in UI is an Action, since queries don't need
to be recorded.  In addition, so that Actions can refer to previously created
models and views, the create actions store a name in a global namespace.  E.g.:

Block.create name args = do
    modifyMVar block_ns $ \block_map ->
        resp <- send_action (B.create args)
        Map.insert name resp block_map

All objects are referred to by name.  Internally there is a namespace map from
String -> Dynamic.


type Act = (Action, Bool) -- is undo


data Action = ActionGroup [ActionMsg] | Action ActionMsg

--

data ActionMsg = ModelAction ModelAction | ViewAction ViewAction

data ModelAction
    = BlockModelAction BlockModelAction
    | TrackModelAction TrackModelAction
    | RulerModelAction RulerModelAction

data ViewAction
    = BlockViewAction BlockViewAction
    | TrackViewAction TrackViewAction

data BlockViewAction
    = CreateView (Int, Int) (Int Int) BlockName RulerName BlockViewConfigName
    | Resize BlockViewName (Int, Int) (Int, Int)
    | SetZoom BlockViewName

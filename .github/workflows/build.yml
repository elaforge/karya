# https://nix.dev/tutorials/continuous-integration-github-actions.html

name: build
on: [push]
jobs:
  build:
    # https://docs.github.com/en/actions/using-jobs/using-a-build-matrix-for-your-jobs
    strategy:
      matrix:
        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idruns-on
        os: [ubuntu-20.04, macos-10.15]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: cachix/install-nix-action@v12
        with:
          # Consistent with my-poison in nix/nixpkgs.nix, I have a pinned
          # nixpkgs but maybe it'll download a bit less this way.
          nix_path: nixpkgs=channel:nixos-21.11
          # extra_nix_config: append to /etc/nix/nix.conf
          extra_nix_config: extra-experimental-features = nix-command
      - uses: cachix/cachix-action@v8
        with:
          name: elaforge
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          # I think it's binaryCaches.secretKey?
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

      # All I want to do is rsync build to some storage.  But I don't know how
      # to do that, so store the cache by the date.  Then it will probably miss
      # and restore-keys will restore the latest one.
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash
      - uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-v1-${{ steps.get-date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-v1-
      - run: ls -l build || true

      # 19.09.2522.75f4ba05c63
      # but mine is 19.09pre-git
      # - run: nix-instantiate --eval -E "(import <nixpkgs> {}).lib.version"

      # Build in advance and make sure the result is cached immediately, since
      # I think it won't upload if later steps fail.
      # - run: nix build -L -f default.nix --arg isCi true buildEnv
      # - run: cachix push elaforge $(readlink result)
      - run: nix/run_ci
      - run: rm -rf build/test/tmp build/report.html
      - run: ls -l build
      - run: du -hsc build/*

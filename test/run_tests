#!/bin/zsh
# Copyright 2013 Evan Laforge
# This program is distributed under the terms of the GNU General Public
# License 3.0, see COPYING or http://www.gnu.org/licenses/gpl-3.0.txt

# Run tests given in prefixes.  If some of them require init, run each in a
# separate process.
# Redirect stderr to test.output.
# Grep for failures.

# TODO: display warn and error log msgs

# If set, then exclude the test modules from the hpc results.
hpc_exclude_test=${hpc_exclude_test-} # Add 't' to default true.

while [[ $1 = */* ]]; do
    binaries=($binaries $1)
    shift
done
if [[ ${#binaries} -eq 0 ]]; then
    echo "usage: $0 build/test/RunTests [ build/profile/Run ...] [ prefix ...]"
    exit 1
fi

prefixes=("$@")

# Default to parallel, but you can turn it off with parallel=
parallel=${parallel-t}

# Write test stdout to here.
test_output=build/test/output

function run {
    echo '->start' "$@" >&2 # In case the test itself writes to stderr.
    "$@" 2>&1
    local r=$?
    if [[ $r -ne 0 ]]; then
        echo '__->' cmd returned $r: "$@"
    fi
    echo '<-complete' "$@" >&2
}

# Tests will recreate this if they need to.
tmp=build/test/tmp
rm -rf $tmp $test_output
mkdir -p $tmp
rm -f *.tix(N)

time (
if [[ -n $parallel && -z $prefixes ]]; then
    # Only run in parallel if no explicit prefixes were given.
    for bin in $binaries; do
        for test in $($bin --list '^large-'); do
            ln $bin $tmp/RunTests.$test
            run $tmp/RunTests.$test $test >$tmp/output.$test &
        done
    done
    for bin in $binaries; do
        run $bin '^normal-' >>$test_output
    done
    wait
    mv *.tix $tmp
    cat $tmp/output.* >>$test_output
    # Will be waited for later.
    hpc sum --union --output=RunTests.tix $tmp/*.tix &
else
    if [[ -z $prefixes ]]; then
        prefixes=('^normal-')
    fi
    for bin in $binaries; do
        run $bin --noninteractive $prefixes >>$test_output
    done
fi
)

echo -n '\nTests complete.  Failures:\n'
test/extract_failures.py <$test_output
# These magic prefixes are in Util.Test and Util.RunTests.
passes=$(grep '^++->' $test_output | wc -l)
failures=$(grep '^__->' $test_output | wc -l)
tests=$(grep '^===> run-test' $test_output | wc -l)
echo $failures failed / $passes passed / $tests tests

# hpc is super slow
echo 'Generating hpc markup in the background...'
(
    wait # for hpc sum above to complete
    rm -rf build/hpc
    mkdir -p build/hpc
    if [[ -n $hpc_exclude_test ]]; then
        nontest=$(tools/all_hs.py notest dotted)
        nontest=--include=${^nontest}
    else
        nontest=
    fi
    hpc sum --union --output=RunTests.tix $tmp/*.tix
    hpc markup --destdir=build/hpc $nontest RunTests.tix | grep -v Writing
    # I'm more used to typing index.html
    (cd build/hpc && ln -fs hpc_index.html index.html)
    echo Done generating hpc.
) &

exit $failures

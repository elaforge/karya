#!/bin/zsh

# Run tests given in prefixes.  If some of them require init, run each in a
# separate process.
# Redirect stderr to test.output.
# Grep for failures.

# TODO: display warn and error log msgs

run_tests=$1
shift
if [[ -z $run_tests ]]; then
    echo "usage: $0 run/tests/binary [ prefixes ...]"
    exit 1
fi

# This is appended to.  It should be reset along with the coverage data every
# time test_obj/RunTests is built.
test_output=test.output

prefixes=("$@")
flags=()
if [[ $prefixes[0] = '--skip' ]]; then
    flags=(--skip)
    shift
fi

interactive_tests=($($run_tests --list $prefixes | grep '^interactive-'))
normal_tests=($($run_tests --list $prefixes | grep '^auto-'))

function run() {
    "$@"
    local r=$?
    if [[ $r -ne 0 ]]; then
        echo __: cmd returned $r: "$@"
    fi
}

:>$test_output
if [ "$normal_tests" ]; then
    run $run_tests $flags $normal_tests |& tee -a $test_output
fi
# init tests don't re-init after running, and it's easier to tear down
# everything after each run.
for test in $interactive_tests; do
    run $run_tests $flags $test |& tee -a $test_output
done

echo -n '\nTests complete.  Results:\n'
test/extract_failures.py <$test_output
passes=$(grep '^++' $test_output | wc -l)
failures=$(grep '^__' $test_output | wc -l)
tests=$(grep '^-----' $test_output | wc -l)
echo $failures failed / $passes passed / $tests tests

echo Generating hpc markup...
hpc markup --destdir=hpc RunTests | grep -v Writing
# I'm more used to typing index.html
(cd hpc && ln -fs hpc_index.html index.html)

exit $failures

#!/bin/zsh -e
# Copyright 2013 Evan Laforge
# This program is distributed under the terms of the GNU General Public
# License 3.0, see COPYING or http://www.gnu.org/licenses/gpl-3.0.txt

# Run tests given in prefixes.  If some of them require init, run each in a
# separate process.
# Redirect stderr to test.output.
# Grep for failures.

# TODO: display warn and error log msgs

# If set, then exclude the test modules from the hpc results.
hpc_exclude_test=${hpc_exclude_test-} # Add 't' to default true.

while [[ $1 = */* ]]; do
    binaries=($binaries $1)
    shift
done

if [[ ${#binaries} -eq 0 ]]; then
    echo "usage: $0 build/test/RunTests [ build/profile/Run ... ] [ prefix ...]"
    exit 1
fi
shift

prefixes=("$@")
if [[ -z $prefixes ]]; then
    prefixes=('^normal-')
fi

# Default to parallel, but you can turn it off with parallel=
parallel=${parallel-t}

# Write test stdout to here.
out_dir=build/test/output
all_tix=$out_dir/all.tix

# Tests will recreate this if they need to.
tmp=build/test/tmp
rm -rf $tmp $out_dir
mkdir -p $tmp $out_dir


function run {
    echo "$@"
    "$@"
}

if [[ -n $parallel ]]; then
    outs=($out_dir/out{1..4}.stdout)
    outs=${(j:,:)outs}
    # The subprocesses will set HPCTIXFILE appropriately.
    # Apparently there's no way to turn off hpc, and it doesn't like /dev/null.
    for bin in $binaries; do
        HPCTIXFILE=build/test/tmp/tix.tix run $bin --jobs $outs $prefixes
    done
    rm -f build/test/tmp/tix.tix
else
    for bin in $binaries; do
        echo "HPCTIXFILE=$all_tix $bin --noninteractive $prefixes \
            >>$out_dir/out.stdout"
        time (
            HPCTIXFILE=$all_tix $bin --noninteractive $prefixes \
                >>$out_dir/out.stdout
        )
    done
fi

test/check_output $out_dir/*.stdout

# Optionally disable HPC.
if [[ -z $skip_hpc ]]; then
    # hpc is super slow
    echo 'Generating hpc markup in the background...'
    (
        exec >$out_dir/hpc.log 2>&1
        if ! [[ -e $all_tix ]]; then
            run hpc sum --union --output=$all_tix $out_dir/*.tix
        fi
        rm -rf build/hpc
        mkdir -p build/hpc
        if [[ -n $hpc_exclude_test ]]; then
            nontest=$(tools/all_hs.py notest dotted)
            nontest=--include=${^nontest}
        else
            nontest=
        fi
        hpc markup --destdir=build/hpc $nontest $all_tix
        # I'm more used to typing index.html
        (cd build/hpc && ln -fs hpc_index.html index.html)
        echo Done generating hpc.
    ) &
fi

exit $failures

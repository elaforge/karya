#!/bin/zsh
# Copyright 2013 Evan Laforge
# This program is distributed under the terms of the GNU General Public
# License 3.0, see COPYING or http://www.gnu.org/licenses/gpl-3.0.txt

# Run tests given in prefixes.  If some of them require init, run each in a
# separate process.
# Redirect stderr to test.output.
# Grep for failures.

# TODO: display warn and error log msgs

# If set, then exclude the test modules from the hpc results.
hpc_exclude_test=${hpc_exclude_test-}
    # Does nothing, but add 't' to default true.

run_tests=$1
shift
if [[ -z $run_tests ]]; then
    echo "usage: $0 build/test/RunTests [ prefixes ...]"
    exit 1
fi

# Default to parallel, but you can turn it off with parallel=
parallel=${parallel-t}

# Run tests in parallel.
if [[ -n $parallel ]]; then
    if ! which parallel >/dev/null; then
        echo parallel command not found, running tests in serial.
        parallel=
    fi
fi

# This is appended to.  It should be reset along with the coverage data every
# time test_obj/RunTests is built.
test_output=build/test/output

prefixes=("$@")
if [[ -z $prefixes ]]; then
    prefixes=('^normal-')
fi

function run {
    "$@"
    local r=$?
    if [[ $r -ne 0 ]]; then
        echo '__->' cmd returned $r: "$@"
    fi
}

# Some tests are more expensive than others.  Scramble them around to try
# to distribute them evenly.
function scramble {
    python -c 'import sys, random
x=list(sys.stdin); random.shuffle(x); sys.stdout.writelines(x)'
}

# Tests will recreate this if they need to.
tmp=build/test/tmp
rm -rf $tmp $test_output
mkdir -p $tmp
rm -f *.tix(N)


# I capture stderr as well because Debug.Trace.trace prints to stderr,
# and apparently there's no way to change that.
time (
if [[ -n $parallel ]]; then
    # Apparently ubuntu compiles with the --tollef flag on, which makes
    # everything different.  WTF parallel, and WTF ubuntu?
    # Also, go through contortions to write different tix files, because
    # the RTS will crash if there is already a tix file.
    $run_tests --list $prefixes \
        | parallel --gnu -j$(tools/ncpus) --max-args=50 -m \
            "ln $run_tests $tmp/RunTests.{#} && $tmp/RunTests.{#} {}" \
            >$test_output 2>&1
else
    run $run_tests --noninteractive $prefixes >$test_output 2>&1
fi
)

mv *.tix $tmp

echo -n '\nTests complete.  Failures:\n'
test/extract_failures.py <$test_output
# These magic prefixes are in Util.Test and Util.RunTests.
passes=$(grep '^++->' $test_output | wc -l)
failures=$(grep '^__->' $test_output | wc -l)
tests=$(grep '^===> run-test' $test_output | wc -l)
echo $failures failed / $passes passed / $tests tests

# hpc is super slow.
echo 'Generating hpc markup in the background...'
(
    rm -rf build/hpc
    mkdir -p build/hpc
    if [[ -n $hpc_exclude_test ]]; then
        nontest=$(tools/all_hs.py notest dotted)
        nontest=--include=${^nontest}
    else
        nontest=
    fi
    hpc sum --union --output=RunTests.tix $tmp/*.tix
    hpc markup --destdir=build/hpc $nontest RunTests.tix | grep -v Writing
    # I'm more used to typing index.html
    (cd build/hpc && ln -fs hpc_index.html index.html)
    echo Done generating hpc.
) &

exit $failures
